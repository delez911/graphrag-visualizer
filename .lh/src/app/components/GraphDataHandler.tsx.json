{
    "sourceFile": "src/app/components/GraphDataHandler.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1727235160816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727235168436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import ReactGA from \"react-ga4\";\n import { useTranslation } from 'react-i18next';\n \n const GraphDataHandler: React.FC = () => {\n+  const { t } = useTranslation();\n   const [tabIndex, setTabIndex] = useState(0);\n   const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n   const [isFullscreen, setIsFullscreen] = useState(false);\n   const [selectedTable, setSelectedTable] = useState<\n"
                },
                {
                    "date": 1727235187794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,11 @@\n \n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label=\"Upload Artifacts\" />\n-        <Tab label=\"Graph Visualization\" />\n-        <Tab label=\"Data Tables\" />\n+      <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.graphVisualization')} />\n+        <Tab label={t('tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n         <Container\n           maxWidth=\"md\"\n"
                },
                {
                    "date": 1727235262271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n-      <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.uploadArtifacts')} />\n         <Tab label={t('tabs.graphVisualization')} />\n         <Tab label={t('tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n"
                },
                {
                    "date": 1727235268240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('layout.tabs.uploadArtifacts')} />\n         <Tab label={t('tabs.graphVisualization')} />\n         <Tab label={t('tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n"
                },
                {
                    "date": 1727235274910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,10 +108,10 @@\n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n         <Tab label={t('layout.tabs.uploadArtifacts')} />\n-        <Tab label={t('tabs.graphVisualization')} />\n-        <Tab label={t('tabs.dataTables')} />\n+        <Tab label={t('layout.tabs.graphVisualization')} />\n+        <Tab label={t('layout.tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n         <Container\n           maxWidth=\"md\"\n"
                },
                {
                    "date": 1727235541069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('layout.tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.uploadArtifacts')} />\n         <Tab label={t('layout.tabs.graphVisualization')} />\n         <Tab label={t('layout.tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n"
                },
                {
                    "date": 1727235593756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('layout.tabs.uploadArtifacts')} />\n         <Tab label={t('layout.tabs.graphVisualization')} />\n         <Tab label={t('layout.tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n"
                },
                {
                    "date": 1727235977999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,11 @@\n \n   return (\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('layout.tabs.uploadArtifacts')} />\n-        <Tab label={t('layout.tabs.graphVisualization')} />\n-        <Tab label={t('layout.tabs.dataTables')} />\n+        <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.graphVisualization')} />\n+        <Tab label={t('abs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n         <Container\n           maxWidth=\"md\"\n"
                },
                {
                    "date": 1727235989047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+import React, { useState, useEffect } from \"react\";\n+import GraphViewer from \"./GraphViewer\";\n+import { Box, Container, Tab, Tabs } from \"@mui/material\";\n+import { useDropzone } from \"react-dropzone\";\n+import DropZone from \"./DropZone\";\n+import Introduction from \"./Introduction\";\n+import useFileHandler from \"../hooks/useFileHandler\";\n+import useGraphData from \"../hooks/useGraphData\";\n+import DataTableContainer from \"./DataTableContainer\";\n+import ReactGA from \"react-ga4\";\n+import { useTranslation } from 'react-i18next';\n+\n+const GraphDataHandler: React.FC = () => {\n+  const { t } = useTranslation('');\n+  const [tabIndex, setTabIndex] = useState(0);\n+  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n+  const [isFullscreen, setIsFullscreen] = useState(false);\n+  const [selectedTable, setSelectedTable] = useState<\n+    | \"entities\"\n+    | \"relationships\"\n+    | \"documents\"\n+    | \"textunits\"\n+    | \"communities\"\n+    | \"communityReports\"\n+    | \"covariates\"\n+  >(\"entities\");\n+  const [includeDocuments, setIncludeDocuments] = useState(false);\n+  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n+  const [includeCommunities, setIncludeCommunities] = useState(false);\n+  const [includeCovariates, setIncludeCovariates] = useState(false);\n+\n+  const {\n+    entities,\n+    relationships,\n+    documents,\n+    textunits,\n+    communities,\n+    covariates,\n+    communityReports,\n+    handleFilesRead,\n+  } = useFileHandler();\n+\n+  const graphData = useGraphData(\n+    entities,\n+    relationships,\n+    documents,\n+    textunits,\n+    communities,\n+    communityReports,\n+    covariates,\n+    includeDocuments,\n+    includeTextUnits,\n+    includeCommunities,\n+    includeCovariates\n+  );\n+\n+  const hasDocuments = documents.length > 0;\n+  const hasTextUnits = textunits.length > 0;\n+  const hasCommunities = communities.length > 0;\n+  const hasCovariates = covariates.length > 0;\n+\n+  useEffect(() => {\n+    if (entities.length > 0) {\n+      setTabIndex(1);\n+    }\n+  }, [entities]);\n+\n+  useEffect(() => {\n+    const measurementId = process.env.REACT_APP_GA_MEASUREMENT_ID;\n+    if (measurementId) {\n+      ReactGA.initialize(measurementId);\n+    } else {\n+      console.error(\"Google Analytics measurement ID not found\");\n+    }\n+  }, []);\n+\n+  const onDrop = (acceptedFiles: File[]) => {\n+    handleFilesRead(acceptedFiles);\n+  };\n+\n+  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n+    onDrop,\n+    noClick: false,\n+    noKeyboard: true,\n+    accept: {\n+      \"application/x-parquet\": [\".parquet\"],\n+    },\n+  });\n+\n+  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n+    setTabIndex(newValue);\n+    ReactGA.send({\n+      hitType: \"event\",\n+      eventCategory: \"Tabs\",\n+      eventAction: \"click\",\n+      eventLabel: `Tab ${newValue}`,\n+    });\n+  };\n+\n+  const toggleGraphType = () => {\n+    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n+  };\n+\n+  const toggleFullscreen = () => {\n+    setIsFullscreen(!isFullscreen);\n+  };\n+\n+  return (\n+    <>\n+      <Tabs value={tabIndex} onChange={handleChange} centered>\n+        <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.graphVisualization')} />\n+        <Tab label={t('abs.dataTables')} />\n+      </Tabs>\n+      {tabIndex === 0 && (\n+        <Container\n+          maxWidth=\"md\"\n+          sx={{\n+            mt: 3,\n+            display: \"flex\",\n+            flexDirection: \"column\",\n+          }}\n+        >\n+          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n+          <Introduction />\n+        </Container>\n+      )}\n+      {tabIndex === 1 && (\n+        <Box\n+          p={3}\n+          sx={{\n+            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+            width: isFullscreen ? \"100vw\" : \"100%\",\n+            position: isFullscreen ? \"fixed\" : \"relative\",\n+            top: 0,\n+            left: 0,\n+            zIndex: isFullscreen ? 1300 : \"auto\",\n+            overflow: \"hidden\",\n+          }}\n+        >\n+          <GraphViewer\n+            data={graphData}\n+            graphType={graphType}\n+            isFullscreen={isFullscreen}\n+            onToggleFullscreen={toggleFullscreen}\n+            onToggleGraphType={toggleGraphType}\n+            includeDocuments={includeDocuments}\n+            includeTextUnits={includeTextUnits}\n+            onIncludeDocumentsChange={() =>\n+              setIncludeDocuments(!includeDocuments)\n+            }\n+            onIncludeTextUnitsChange={() =>\n+              setIncludeTextUnits(!includeTextUnits)\n+            }\n+            includeCommunities={includeCommunities}\n+            onIncludeCommunitiesChange={() =>\n+              setIncludeCommunities(!includeCommunities)\n+            }\n+            includeCovariates={includeCovariates}\n+            onIncludeCovariatesChange={() =>\n+              setIncludeCovariates(!includeCovariates)\n+            }\n+            hasDocuments={hasDocuments}\n+            hasTextUnits={hasTextUnits}\n+            hasCommunities={hasCommunities}\n+            hasCovariates={hasCovariates}\n+          />\n+        </Box>\n+      )}\n+\n+      {tabIndex === 2 && (\n+        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n+          <DataTableContainer\n+            selectedTable={selectedTable}\n+            setSelectedTable={setSelectedTable}\n+            entities={entities}\n+            relationships={relationships}\n+            documents={documents}\n+            textunits={textunits}\n+            communities={communities}\n+            communityReports={communityReports}\n+            covariates={covariates}\n+          />\n+        </Box>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default GraphDataHandler;\n"
                },
                {
                    "date": 1727236511109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,182 @@\n+import React, { useState, useEffect } from \"react\";\n+import GraphViewer from \"./GraphViewer\";\n+import { Box, Container, Tab, Tabs } from \"@mui/material\";\n+import { useDropzone } from \"react-dropzone\";\n+import DropZone from \"./DropZone\";\n+import Introduction from \"./Introduction\";\n+import useFileHandler from \"../hooks/useFileHandler\";\n+import useGraphData from \"../hooks/useGraphData\";\n+import DataTableContainer from \"./DataTableContainer\";\n+import ReactGA from \"react-ga4\";\n+import { useTranslation } from 'react-i18next';\n+\n+const GraphDataHandler: React.FC = () => {\n+  const { t } = useTranslation('layout');\n+  const [tabIndex, setTabIndex] = useState(0);\n+  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n+  const [isFullscreen, setIsFullscreen] = useState(false);\n+  const [selectedTable, setSelectedTable] = useState<\n+    | \"entities\"\n+    | \"relationships\"\n+    | \"documents\"\n+    | \"textunits\"\n+    | \"communities\"\n+    | \"communityReports\"\n+    | \"covariates\"\n+  >(\"entities\");\n+  const [includeDocuments, setIncludeDocuments] = useState(false);\n+  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n+  const [includeCommunities, setIncludeCommunities] = useState(false);\n+  const [includeCovariates, setIncludeCovariates] = useState(false);\n+\n+  const {\n+    entities,\n+    relationships,\n+    documents,\n+    textunits,\n+    communities,\n+    covariates,\n+    communityReports,\n+    handleFilesRead,\n+  } = useFileHandler();\n+\n+  const graphData = useGraphData(\n+    entities,\n+    relationships,\n+    documents,\n+    textunits,\n+    communities,\n+    communityReports,\n+    covariates,\n+    includeDocuments,\n+    includeTextUnits,\n+    includeCommunities,\n+    includeCovariates\n+  );\n+\n+  const hasDocuments = documents.length > 0;\n+  const hasTextUnits = textunits.length > 0;\n+  const hasCommunities = communities.length > 0;\n+  const hasCovariates = covariates.length > 0;\n+\n+  useEffect(() => {\n+    if (entities.length > 0) {\n+      setTabIndex(1);\n+    }\n+  }, [entities]);\n+\n+\n+  const onDrop = (acceptedFiles: File[]) => {\n+    handleFilesRead(acceptedFiles);\n+  };\n+\n+  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n+    onDrop,\n+    noClick: false,\n+    noKeyboard: true,\n+    accept: {\n+      \"application/x-parquet\": [\".parquet\"],\n+    },\n+  });\n+\n+  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n+    setTabIndex(newValue);\n+    ReactGA.send({\n+      hitType: \"event\",\n+      eventCategory: \"Tabs\",\n+      eventAction: \"click\",\n+      eventLabel: `Tab ${newValue}`,\n+    });\n+  };\n+\n+  const toggleGraphType = () => {\n+    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n+  };\n+\n+  const toggleFullscreen = () => {\n+    setIsFullscreen(!isFullscreen);\n+  };\n+\n+  return (\n+    <>\n+      <Tabs value={tabIndex} onChange={handleChange} centered>\n+        <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.graphVisualization')} />\n+        <Tab label={t('abs.dataTables')} />\n+      </Tabs>\n+      {tabIndex === 0 && (\n+        <Container\n+          maxWidth=\"md\"\n+          sx={{\n+            mt: 3,\n+            display: \"flex\",\n+            flexDirection: \"column\",\n+          }}\n+        >\n+          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n+          <Introduction />\n+        </Container>\n+      )}\n+      {tabIndex === 1 && (\n+        <Box\n+          p={3}\n+          sx={{\n+            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+            width: isFullscreen ? \"100vw\" : \"100%\",\n+            position: isFullscreen ? \"fixed\" : \"relative\",\n+            top: 0,\n+            left: 0,\n+            zIndex: isFullscreen ? 1300 : \"auto\",\n+            overflow: \"hidden\",\n+          }}\n+        >\n+          <GraphViewer\n+            data={graphData}\n+            graphType={graphType}\n+            isFullscreen={isFullscreen}\n+            onToggleFullscreen={toggleFullscreen}\n+            onToggleGraphType={toggleGraphType}\n+            includeDocuments={includeDocuments}\n+            includeTextUnits={includeTextUnits}\n+            onIncludeDocumentsChange={() =>\n+              setIncludeDocuments(!includeDocuments)\n+            }\n+            onIncludeTextUnitsChange={() =>\n+              setIncludeTextUnits(!includeTextUnits)\n+            }\n+            includeCommunities={includeCommunities}\n+            onIncludeCommunitiesChange={() =>\n+              setIncludeCommunities(!includeCommunities)\n+            }\n+            includeCovariates={includeCovariates}\n+            onIncludeCovariatesChange={() =>\n+              setIncludeCovariates(!includeCovariates)\n+            }\n+            hasDocuments={hasDocuments}\n+            hasTextUnits={hasTextUnits}\n+            hasCommunities={hasCommunities}\n+            hasCovariates={hasCovariates}\n+          />\n+        </Box>\n+      )}\n+\n+      {tabIndex === 2 && (\n+        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n+          <DataTableContainer\n+            selectedTable={selectedTable}\n+            setSelectedTable={setSelectedTable}\n+            entities={entities}\n+            relationships={relationships}\n+            documents={documents}\n+            textunits={textunits}\n+            communities={communities}\n+            communityReports={communityReports}\n+            covariates={covariates}\n+          />\n+        </Box>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default GraphDataHandler;\n"
                },
                {
                    "date": 1727236520357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n import Introduction from \"./Introduction\";\n import useFileHandler from \"../hooks/useFileHandler\";\n import useGraphData from \"../hooks/useGraphData\";\n import DataTableContainer from \"./DataTableContainer\";\n-import ReactGA from \"react-ga4\";\n import { useTranslation } from 'react-i18next';\n \n const GraphDataHandler: React.FC = () => {\n   const { t } = useTranslation('layout');\n@@ -64,9 +63,8 @@\n       setTabIndex(1);\n     }\n   }, [entities]);\n \n-\n   const onDrop = (acceptedFiles: File[]) => {\n     handleFilesRead(acceptedFiles);\n   };\n \n@@ -179,384 +177,4 @@\n   );\n };\n \n export default GraphDataHandler;\n-import React, { useState, useEffect } from \"react\";\n-import GraphViewer from \"./GraphViewer\";\n-import { Box, Container, Tab, Tabs } from \"@mui/material\";\n-import { useDropzone } from \"react-dropzone\";\n-import DropZone from \"./DropZone\";\n-import Introduction from \"./Introduction\";\n-import useFileHandler from \"../hooks/useFileHandler\";\n-import useGraphData from \"../hooks/useGraphData\";\n-import DataTableContainer from \"./DataTableContainer\";\n-import ReactGA from \"react-ga4\";\n-import { useTranslation } from 'react-i18next';\n-\n-const GraphDataHandler: React.FC = () => {\n-  const { t } = useTranslation('');\n-  const [tabIndex, setTabIndex] = useState(0);\n-  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [selectedTable, setSelectedTable] = useState<\n-    | \"entities\"\n-    | \"relationships\"\n-    | \"documents\"\n-    | \"textunits\"\n-    | \"communities\"\n-    | \"communityReports\"\n-    | \"covariates\"\n-  >(\"entities\");\n-  const [includeDocuments, setIncludeDocuments] = useState(false);\n-  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n-  const [includeCommunities, setIncludeCommunities] = useState(false);\n-  const [includeCovariates, setIncludeCovariates] = useState(false);\n-\n-  const {\n-    entities,\n-    relationships,\n-    documents,\n-    textunits,\n-    communities,\n-    covariates,\n-    communityReports,\n-    handleFilesRead,\n-  } = useFileHandler();\n-\n-  const graphData = useGraphData(\n-    entities,\n-    relationships,\n-    documents,\n-    textunits,\n-    communities,\n-    communityReports,\n-    covariates,\n-    includeDocuments,\n-    includeTextUnits,\n-    includeCommunities,\n-    includeCovariates\n-  );\n-\n-  const hasDocuments = documents.length > 0;\n-  const hasTextUnits = textunits.length > 0;\n-  const hasCommunities = communities.length > 0;\n-  const hasCovariates = covariates.length > 0;\n-\n-  useEffect(() => {\n-    if (entities.length > 0) {\n-      setTabIndex(1);\n-    }\n-  }, [entities]);\n-\n-  useEffect(() => {\n-    const measurementId = process.env.REACT_APP_GA_MEASUREMENT_ID;\n-    if (measurementId) {\n-      ReactGA.initialize(measurementId);\n-    } else {\n-      console.error(\"Google Analytics measurement ID not found\");\n-    }\n-  }, []);\n-\n-  const onDrop = (acceptedFiles: File[]) => {\n-    handleFilesRead(acceptedFiles);\n-  };\n-\n-  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n-    onDrop,\n-    noClick: false,\n-    noKeyboard: true,\n-    accept: {\n-      \"application/x-parquet\": [\".parquet\"],\n-    },\n-  });\n-\n-  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n-    setTabIndex(newValue);\n-    ReactGA.send({\n-      hitType: \"event\",\n-      eventCategory: \"Tabs\",\n-      eventAction: \"click\",\n-      eventLabel: `Tab ${newValue}`,\n-    });\n-  };\n-\n-  const toggleGraphType = () => {\n-    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n-  };\n-\n-  const toggleFullscreen = () => {\n-    setIsFullscreen(!isFullscreen);\n-  };\n-\n-  return (\n-    <>\n-      <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('tabs.uploadArtifacts')} />\n-        <Tab label={t('tabs.graphVisualization')} />\n-        <Tab label={t('abs.dataTables')} />\n-      </Tabs>\n-      {tabIndex === 0 && (\n-        <Container\n-          maxWidth=\"md\"\n-          sx={{\n-            mt: 3,\n-            display: \"flex\",\n-            flexDirection: \"column\",\n-          }}\n-        >\n-          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n-          <Introduction />\n-        </Container>\n-      )}\n-      {tabIndex === 1 && (\n-        <Box\n-          p={3}\n-          sx={{\n-            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-            width: isFullscreen ? \"100vw\" : \"100%\",\n-            position: isFullscreen ? \"fixed\" : \"relative\",\n-            top: 0,\n-            left: 0,\n-            zIndex: isFullscreen ? 1300 : \"auto\",\n-            overflow: \"hidden\",\n-          }}\n-        >\n-          <GraphViewer\n-            data={graphData}\n-            graphType={graphType}\n-            isFullscreen={isFullscreen}\n-            onToggleFullscreen={toggleFullscreen}\n-            onToggleGraphType={toggleGraphType}\n-            includeDocuments={includeDocuments}\n-            includeTextUnits={includeTextUnits}\n-            onIncludeDocumentsChange={() =>\n-              setIncludeDocuments(!includeDocuments)\n-            }\n-            onIncludeTextUnitsChange={() =>\n-              setIncludeTextUnits(!includeTextUnits)\n-            }\n-            includeCommunities={includeCommunities}\n-            onIncludeCommunitiesChange={() =>\n-              setIncludeCommunities(!includeCommunities)\n-            }\n-            includeCovariates={includeCovariates}\n-            onIncludeCovariatesChange={() =>\n-              setIncludeCovariates(!includeCovariates)\n-            }\n-            hasDocuments={hasDocuments}\n-            hasTextUnits={hasTextUnits}\n-            hasCommunities={hasCommunities}\n-            hasCovariates={hasCovariates}\n-          />\n-        </Box>\n-      )}\n-\n-      {tabIndex === 2 && (\n-        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n-          <DataTableContainer\n-            selectedTable={selectedTable}\n-            setSelectedTable={setSelectedTable}\n-            entities={entities}\n-            relationships={relationships}\n-            documents={documents}\n-            textunits={textunits}\n-            communities={communities}\n-            communityReports={communityReports}\n-            covariates={covariates}\n-          />\n-        </Box>\n-      )}\n-    </>\n-  );\n-};\n-\n-export default GraphDataHandler;\n-import React, { useState, useEffect } from \"react\";\n-import GraphViewer from \"./GraphViewer\";\n-import { Box, Container, Tab, Tabs } from \"@mui/material\";\n-import { useDropzone } from \"react-dropzone\";\n-import DropZone from \"./DropZone\";\n-import Introduction from \"./Introduction\";\n-import useFileHandler from \"../hooks/useFileHandler\";\n-import useGraphData from \"../hooks/useGraphData\";\n-import DataTableContainer from \"./DataTableContainer\";\n-import ReactGA from \"react-ga4\";\n-import { useTranslation } from 'react-i18next';\n-\n-const GraphDataHandler: React.FC = () => {\n-  const { t } = useTranslation();\n-  const [tabIndex, setTabIndex] = useState(0);\n-  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [selectedTable, setSelectedTable] = useState<\n-    | \"entities\"\n-    | \"relationships\"\n-    | \"documents\"\n-    | \"textunits\"\n-    | \"communities\"\n-    | \"communityReports\"\n-    | \"covariates\"\n-  >(\"entities\");\n-  const [includeDocuments, setIncludeDocuments] = useState(false);\n-  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n-  const [includeCommunities, setIncludeCommunities] = useState(false);\n-  const [includeCovariates, setIncludeCovariates] = useState(false);\n-\n-  const {\n-    entities,\n-    relationships,\n-    documents,\n-    textunits,\n-    communities,\n-    covariates,\n-    communityReports,\n-    handleFilesRead,\n-  } = useFileHandler();\n-\n-  const graphData = useGraphData(\n-    entities,\n-    relationships,\n-    documents,\n-    textunits,\n-    communities,\n-    communityReports,\n-    covariates,\n-    includeDocuments,\n-    includeTextUnits,\n-    includeCommunities,\n-    includeCovariates\n-  );\n-\n-  const hasDocuments = documents.length > 0;\n-  const hasTextUnits = textunits.length > 0;\n-  const hasCommunities = communities.length > 0;\n-  const hasCovariates = covariates.length > 0;\n-\n-  useEffect(() => {\n-    if (entities.length > 0) {\n-      setTabIndex(1);\n-    }\n-  }, [entities]);\n-\n-  useEffect(() => {\n-    const measurementId = process.env.REACT_APP_GA_MEASUREMENT_ID;\n-    if (measurementId) {\n-      ReactGA.initialize(measurementId);\n-    } else {\n-      console.error(\"Google Analytics measurement ID not found\");\n-    }\n-  }, []);\n-\n-  const onDrop = (acceptedFiles: File[]) => {\n-    handleFilesRead(acceptedFiles);\n-  };\n-\n-  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n-    onDrop,\n-    noClick: false,\n-    noKeyboard: true,\n-    accept: {\n-      \"application/x-parquet\": [\".parquet\"],\n-    },\n-  });\n-\n-  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n-    setTabIndex(newValue);\n-    ReactGA.send({\n-      hitType: \"event\",\n-      eventCategory: \"Tabs\",\n-      eventAction: \"click\",\n-      eventLabel: `Tab ${newValue}`,\n-    });\n-  };\n-\n-  const toggleGraphType = () => {\n-    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n-  };\n-\n-  const toggleFullscreen = () => {\n-    setIsFullscreen(!isFullscreen);\n-  };\n-\n-  return (\n-    <>\n-      <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('tabs.uploadArtifacts')} />\n-        <Tab label={t('tabs.graphVisualization')} />\n-        <Tab label={t('abs.dataTables')} />\n-      </Tabs>\n-      {tabIndex === 0 && (\n-        <Container\n-          maxWidth=\"md\"\n-          sx={{\n-            mt: 3,\n-            display: \"flex\",\n-            flexDirection: \"column\",\n-          }}\n-        >\n-          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n-          <Introduction />\n-        </Container>\n-      )}\n-      {tabIndex === 1 && (\n-        <Box\n-          p={3}\n-          sx={{\n-            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-            width: isFullscreen ? \"100vw\" : \"100%\",\n-            position: isFullscreen ? \"fixed\" : \"relative\",\n-            top: 0,\n-            left: 0,\n-            zIndex: isFullscreen ? 1300 : \"auto\",\n-            overflow: \"hidden\",\n-          }}\n-        >\n-          <GraphViewer\n-            data={graphData}\n-            graphType={graphType}\n-            isFullscreen={isFullscreen}\n-            onToggleFullscreen={toggleFullscreen}\n-            onToggleGraphType={toggleGraphType}\n-            includeDocuments={includeDocuments}\n-            includeTextUnits={includeTextUnits}\n-            onIncludeDocumentsChange={() =>\n-              setIncludeDocuments(!includeDocuments)\n-            }\n-            onIncludeTextUnitsChange={() =>\n-              setIncludeTextUnits(!includeTextUnits)\n-            }\n-            includeCommunities={includeCommunities}\n-            onIncludeCommunitiesChange={() =>\n-              setIncludeCommunities(!includeCommunities)\n-            }\n-            includeCovariates={includeCovariates}\n-            onIncludeCovariatesChange={() =>\n-              setIncludeCovariates(!includeCovariates)\n-            }\n-            hasDocuments={hasDocuments}\n-            hasTextUnits={hasTextUnits}\n-            hasCommunities={hasCommunities}\n-            hasCovariates={hasCovariates}\n-          />\n-        </Box>\n-      )}\n-\n-      {tabIndex === 2 && (\n-        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n-          <DataTableContainer\n-            selectedTable={selectedTable}\n-            setSelectedTable={setSelectedTable}\n-            entities={entities}\n-            relationships={relationships}\n-            documents={documents}\n-            textunits={textunits}\n-            communities={communities}\n-            communityReports={communityReports}\n-            covariates={covariates}\n-          />\n-        </Box>\n-      )}\n-    </>\n-  );\n-};\n-\n-export default GraphDataHandler;\n"
                },
                {
                    "date": 1727236600145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import React, { useState, useEffect } from \"react\";\n+import GraphViewer from \"./GraphViewer\";\n+import { Box, Container, Tab, Tabs } from \"@mui/material\";\n+import { useDropzone } from \"react-dropzone\";\n+import DropZone from \"./DropZone\";\n+import Introduction from \"./Introduction\";\n+import useFileHandler from \"../hooks/useFileHandler\";\n+import useGraphData from \"../hooks/useGraphData\";\n+import DataTableContainer from \"./DataTableContainer\";\n+import { useTranslation } from 'react-i18next';\n+\n+const GraphDataHandler: React.FC = () => {\n+  const { t } = useTranslation('layout');\n+  const [tabIndex, setTabIndex] = useState(0);\n+  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n+  const [isFullscreen, setIsFullscreen] = useState(false);\n+  const [selectedTable, setSelectedTable] = useState<\n+    | \"entities\"\n+    | \"relationships\"\n+    | \"documents\"\n+    | \"textunits\"\n+    | \"communities\"\n+    | \"communityReports\"\n+    | \"covariates\"\n+  >(\"entities\");\n+  const [includeDocuments, setIncludeDocuments] = useState(false);\n+  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n+  const [includeCommunities, setIncludeCommunities] = useState(false);\n+  const [includeCovariates, setIncludeCovariates] = useState(false);\n+\n+  const {\n+    entities,\n+    relationships,\n+    documents,\n+    textunits,\n+    communities,\n+    covariates,\n+    communityReports,\n+    handleFilesRead,\n+  } = useFileHandler();\n+\n+  const graphData = useGraphData(\n+    entities,\n+    relationships,\n+    documents,\n+    textunits,\n+    communities,\n+    communityReports,\n+    covariates,\n+    includeDocuments,\n+    includeTextUnits,\n+    includeCommunities,\n+    includeCovariates\n+  );\n+\n+  const hasDocuments = documents.length > 0;\n+  const hasTextUnits = textunits.length > 0;\n+  const hasCommunities = communities.length > 0;\n+  const hasCovariates = covariates.length > 0;\n+\n+  useEffect(() => {\n+    if (entities.length > 0) {\n+      setTabIndex(1);\n+    }\n+  }, [entities]);\n+\n+  const onDrop = (acceptedFiles: File[]) => {\n+    handleFilesRead(acceptedFiles);\n+  };\n+\n+  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n+    onDrop,\n+    noClick: false,\n+    noKeyboard: true,\n+    accept: {\n+      \"application/x-parquet\": [\".parquet\"],\n+    },\n+  });\n+\n+  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n+    setTabIndex(newValue);\n+  };\n+\n+  const toggleGraphType = () => {\n+    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n+  };\n+\n+  const toggleFullscreen = () => {\n+    setIsFullscreen(!isFullscreen);\n+  };\n+\n+  return (\n+    <>\n+      <Tabs value={tabIndex} onChange={handleChange} centered>\n+        <Tab label={t('tabs.uploadArtifacts')} />\n+        <Tab label={t('tabs.graphVisualization')} />\n+        <Tab label={t('abs.dataTables')} />\n+      </Tabs>\n+      {tabIndex === 0 && (\n+        <Container\n+          maxWidth=\"md\"\n+          sx={{\n+            mt: 3,\n+            display: \"flex\",\n+            flexDirection: \"column\",\n+          }}\n+        >\n+          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n+          <Introduction />\n+        </Container>\n+      )}\n+      {tabIndex === 1 && (\n+        <Box\n+          p={3}\n+          sx={{\n+            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+            width: isFullscreen ? \"100vw\" : \"100%\",\n+            position: isFullscreen ? \"fixed\" : \"relative\",\n+            top: 0,\n+            left: 0,\n+            zIndex: isFullscreen ? 1300 : \"auto\",\n+            overflow: \"hidden\",\n+          }}\n+        >\n+          <GraphViewer\n+            data={graphData}\n+            graphType={graphType}\n+            isFullscreen={isFullscreen}\n+            onToggleFullscreen={toggleFullscreen}\n+            onToggleGraphType={toggleGraphType}\n+            includeDocuments={includeDocuments}\n+            includeTextUnits={includeTextUnits}\n+            onIncludeDocumentsChange={() =>\n+              setIncludeDocuments(!includeDocuments)\n+            }\n+            onIncludeTextUnitsChange={() =>\n+              setIncludeTextUnits(!includeTextUnits)\n+            }\n+            includeCommunities={includeCommunities}\n+            onIncludeCommunitiesChange={() =>\n+              setIncludeCommunities(!includeCommunities)\n+            }\n+            includeCovariates={includeCovariates}\n+            onIncludeCovariatesChange={() =>\n+              setIncludeCovariates(!includeCovariates)\n+            }\n+            hasDocuments={hasDocuments}\n+            hasTextUnits={hasTextUnits}\n+            hasCommunities={hasCommunities}\n+            hasCovariates={hasCovariates}\n+          />\n+        </Box>\n+      )}\n+\n+      {tabIndex === 2 && (\n+        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n+          <DataTableContainer\n+            selectedTable={selectedTable}\n+            setSelectedTable={setSelectedTable}\n+            entities={entities}\n+            relationships={relationships}\n+            documents={documents}\n+            textunits={textunits}\n+            communities={communities}\n+            communityReports={communityReports}\n+            covariates={covariates}\n+          />\n+        </Box>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default GraphDataHandler;\n"
                },
                {
                    "date": 1727239718106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     <>\n       <Tabs value={tabIndex} onChange={handleChange} centered>\n         <Tab label={t('tabs.uploadArtifacts')} />\n         <Tab label={t('tabs.graphVisualization')} />\n-        <Tab label={t('abs.dataTables')} />\n+        <Tab label={t('tabs.dataTables')} />\n       </Tabs>\n       {tabIndex === 0 && (\n         <Container\n           maxWidth=\"md\"\n@@ -171,184 +171,4 @@\n   );\n };\n \n export default GraphDataHandler;\n-import React, { useState, useEffect } from \"react\";\n-import GraphViewer from \"./GraphViewer\";\n-import { Box, Container, Tab, Tabs } from \"@mui/material\";\n-import { useDropzone } from \"react-dropzone\";\n-import DropZone from \"./DropZone\";\n-import Introduction from \"./Introduction\";\n-import useFileHandler from \"../hooks/useFileHandler\";\n-import useGraphData from \"../hooks/useGraphData\";\n-import DataTableContainer from \"./DataTableContainer\";\n-import { useTranslation } from 'react-i18next';\n-\n-const GraphDataHandler: React.FC = () => {\n-  const { t } = useTranslation('layout');\n-  const [tabIndex, setTabIndex] = useState(0);\n-  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [selectedTable, setSelectedTable] = useState<\n-    | \"entities\"\n-    | \"relationships\"\n-    | \"documents\"\n-    | \"textunits\"\n-    | \"communities\"\n-    | \"communityReports\"\n-    | \"covariates\"\n-  >(\"entities\");\n-  const [includeDocuments, setIncludeDocuments] = useState(false);\n-  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n-  const [includeCommunities, setIncludeCommunities] = useState(false);\n-  const [includeCovariates, setIncludeCovariates] = useState(false);\n-\n-  const {\n-    entities,\n-    relationships,\n-    documents,\n-    textunits,\n-    communities,\n-    covariates,\n-    communityReports,\n-    handleFilesRead,\n-  } = useFileHandler();\n-\n-  const graphData = useGraphData(\n-    entities,\n-    relationships,\n-    documents,\n-    textunits,\n-    communities,\n-    communityReports,\n-    covariates,\n-    includeDocuments,\n-    includeTextUnits,\n-    includeCommunities,\n-    includeCovariates\n-  );\n-\n-  const hasDocuments = documents.length > 0;\n-  const hasTextUnits = textunits.length > 0;\n-  const hasCommunities = communities.length > 0;\n-  const hasCovariates = covariates.length > 0;\n-\n-  useEffect(() => {\n-    if (entities.length > 0) {\n-      setTabIndex(1);\n-    }\n-  }, [entities]);\n-\n-  const onDrop = (acceptedFiles: File[]) => {\n-    handleFilesRead(acceptedFiles);\n-  };\n-\n-  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n-    onDrop,\n-    noClick: false,\n-    noKeyboard: true,\n-    accept: {\n-      \"application/x-parquet\": [\".parquet\"],\n-    },\n-  });\n-\n-  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n-    setTabIndex(newValue);\n-    ReactGA.send({\n-      hitType: \"event\",\n-      eventCategory: \"Tabs\",\n-      eventAction: \"click\",\n-      eventLabel: `Tab ${newValue}`,\n-    });\n-  };\n-\n-  const toggleGraphType = () => {\n-    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n-  };\n-\n-  const toggleFullscreen = () => {\n-    setIsFullscreen(!isFullscreen);\n-  };\n-\n-  return (\n-    <>\n-      <Tabs value={tabIndex} onChange={handleChange} centered>\n-        <Tab label={t('tabs.uploadArtifacts')} />\n-        <Tab label={t('tabs.graphVisualization')} />\n-        <Tab label={t('abs.dataTables')} />\n-      </Tabs>\n-      {tabIndex === 0 && (\n-        <Container\n-          maxWidth=\"md\"\n-          sx={{\n-            mt: 3,\n-            display: \"flex\",\n-            flexDirection: \"column\",\n-          }}\n-        >\n-          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n-          <Introduction />\n-        </Container>\n-      )}\n-      {tabIndex === 1 && (\n-        <Box\n-          p={3}\n-          sx={{\n-            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-            width: isFullscreen ? \"100vw\" : \"100%\",\n-            position: isFullscreen ? \"fixed\" : \"relative\",\n-            top: 0,\n-            left: 0,\n-            zIndex: isFullscreen ? 1300 : \"auto\",\n-            overflow: \"hidden\",\n-          }}\n-        >\n-          <GraphViewer\n-            data={graphData}\n-            graphType={graphType}\n-            isFullscreen={isFullscreen}\n-            onToggleFullscreen={toggleFullscreen}\n-            onToggleGraphType={toggleGraphType}\n-            includeDocuments={includeDocuments}\n-            includeTextUnits={includeTextUnits}\n-            onIncludeDocumentsChange={() =>\n-              setIncludeDocuments(!includeDocuments)\n-            }\n-            onIncludeTextUnitsChange={() =>\n-              setIncludeTextUnits(!includeTextUnits)\n-            }\n-            includeCommunities={includeCommunities}\n-            onIncludeCommunitiesChange={() =>\n-              setIncludeCommunities(!includeCommunities)\n-            }\n-            includeCovariates={includeCovariates}\n-            onIncludeCovariatesChange={() =>\n-              setIncludeCovariates(!includeCovariates)\n-            }\n-            hasDocuments={hasDocuments}\n-            hasTextUnits={hasTextUnits}\n-            hasCommunities={hasCommunities}\n-            hasCovariates={hasCovariates}\n-          />\n-        </Box>\n-      )}\n-\n-      {tabIndex === 2 && (\n-        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n-          <DataTableContainer\n-            selectedTable={selectedTable}\n-            setSelectedTable={setSelectedTable}\n-            entities={entities}\n-            relationships={relationships}\n-            documents={documents}\n-            textunits={textunits}\n-            communities={communities}\n-            communityReports={communityReports}\n-            covariates={covariates}\n-          />\n-        </Box>\n-      )}\n-    </>\n-  );\n-};\n-\n-export default GraphDataHandler;\n"
                }
            ],
            "date": 1727235160816,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport GraphViewer from \"./GraphViewer\";\nimport { Box, Container, Tab, Tabs } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport DropZone from \"./DropZone\";\nimport Introduction from \"./Introduction\";\nimport useFileHandler from \"../hooks/useFileHandler\";\nimport useGraphData from \"../hooks/useGraphData\";\nimport DataTableContainer from \"./DataTableContainer\";\nimport ReactGA from \"react-ga4\";\nimport { useTranslation } from 'react-i18next';\n\nconst GraphDataHandler: React.FC = () => {\n  const [tabIndex, setTabIndex] = useState(0);\n  const [graphType, setGraphType] = useState<\"2d\" | \"3d\">(\"2d\");\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [selectedTable, setSelectedTable] = useState<\n    | \"entities\"\n    | \"relationships\"\n    | \"documents\"\n    | \"textunits\"\n    | \"communities\"\n    | \"communityReports\"\n    | \"covariates\"\n  >(\"entities\");\n  const [includeDocuments, setIncludeDocuments] = useState(false);\n  const [includeTextUnits, setIncludeTextUnits] = useState(false);\n  const [includeCommunities, setIncludeCommunities] = useState(false);\n  const [includeCovariates, setIncludeCovariates] = useState(false);\n\n  const {\n    entities,\n    relationships,\n    documents,\n    textunits,\n    communities,\n    covariates,\n    communityReports,\n    handleFilesRead,\n  } = useFileHandler();\n\n  const graphData = useGraphData(\n    entities,\n    relationships,\n    documents,\n    textunits,\n    communities,\n    communityReports,\n    covariates,\n    includeDocuments,\n    includeTextUnits,\n    includeCommunities,\n    includeCovariates\n  );\n\n  const hasDocuments = documents.length > 0;\n  const hasTextUnits = textunits.length > 0;\n  const hasCommunities = communities.length > 0;\n  const hasCovariates = covariates.length > 0;\n\n  useEffect(() => {\n    if (entities.length > 0) {\n      setTabIndex(1);\n    }\n  }, [entities]);\n\n  useEffect(() => {\n    const measurementId = process.env.REACT_APP_GA_MEASUREMENT_ID;\n    if (measurementId) {\n      ReactGA.initialize(measurementId);\n    } else {\n      console.error(\"Google Analytics measurement ID not found\");\n    }\n  }, []);\n\n  const onDrop = (acceptedFiles: File[]) => {\n    handleFilesRead(acceptedFiles);\n  };\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    noClick: false,\n    noKeyboard: true,\n    accept: {\n      \"application/x-parquet\": [\".parquet\"],\n    },\n  });\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabIndex(newValue);\n    ReactGA.send({\n      hitType: \"event\",\n      eventCategory: \"Tabs\",\n      eventAction: \"click\",\n      eventLabel: `Tab ${newValue}`,\n    });\n  };\n\n  const toggleGraphType = () => {\n    setGraphType((prevType) => (prevType === \"2d\" ? \"3d\" : \"2d\"));\n  };\n\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n  };\n\n  return (\n    <>\n      <Tabs value={tabIndex} onChange={handleChange} centered>\n        <Tab label=\"Upload Artifacts\" />\n        <Tab label=\"Graph Visualization\" />\n        <Tab label=\"Data Tables\" />\n      </Tabs>\n      {tabIndex === 0 && (\n        <Container\n          maxWidth=\"md\"\n          sx={{\n            mt: 3,\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          <DropZone {...{ getRootProps, getInputProps, isDragActive }} />\n          <Introduction />\n        </Container>\n      )}\n      {tabIndex === 1 && (\n        <Box\n          p={3}\n          sx={{\n            height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n            width: isFullscreen ? \"100vw\" : \"100%\",\n            position: isFullscreen ? \"fixed\" : \"relative\",\n            top: 0,\n            left: 0,\n            zIndex: isFullscreen ? 1300 : \"auto\",\n            overflow: \"hidden\",\n          }}\n        >\n          <GraphViewer\n            data={graphData}\n            graphType={graphType}\n            isFullscreen={isFullscreen}\n            onToggleFullscreen={toggleFullscreen}\n            onToggleGraphType={toggleGraphType}\n            includeDocuments={includeDocuments}\n            includeTextUnits={includeTextUnits}\n            onIncludeDocumentsChange={() =>\n              setIncludeDocuments(!includeDocuments)\n            }\n            onIncludeTextUnitsChange={() =>\n              setIncludeTextUnits(!includeTextUnits)\n            }\n            includeCommunities={includeCommunities}\n            onIncludeCommunitiesChange={() =>\n              setIncludeCommunities(!includeCommunities)\n            }\n            includeCovariates={includeCovariates}\n            onIncludeCovariatesChange={() =>\n              setIncludeCovariates(!includeCovariates)\n            }\n            hasDocuments={hasDocuments}\n            hasTextUnits={hasTextUnits}\n            hasCommunities={hasCommunities}\n            hasCovariates={hasCovariates}\n          />\n        </Box>\n      )}\n\n      {tabIndex === 2 && (\n        <Box sx={{ display: \"flex\", height: \"calc(100vh - 64px)\" }}>\n          <DataTableContainer\n            selectedTable={selectedTable}\n            setSelectedTable={setSelectedTable}\n            entities={entities}\n            relationships={relationships}\n            documents={documents}\n            textunits={textunits}\n            communities={communities}\n            communityReports={communityReports}\n            covariates={covariates}\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default GraphDataHandler;\n"
        }
    ]
}