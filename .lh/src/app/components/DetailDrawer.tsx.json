{
    "sourceFile": "src/app/components/DetailDrawer.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1727250670012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727250680122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,10 @@\n   selectedRelationship,\n   linkedNodes,\n   linkedRelationships,\n }) => {\n+  const { t } = useTranslation();\n+\n   const getNodeName = (node: string | CustomNode) => {\n     return typeof node === \"object\" ? node.name : node;\n   };\n \n"
                },
                {
                    "date": 1727250689730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   selectedRelationship,\n   linkedNodes,\n   linkedRelationships,\n }) => {\n-  const { t } = useTranslation();\n+  const { t } = useTranslation('dataview');\n \n   const getNodeName = (node: string | CustomNode) => {\n     return typeof node === \"object\" ? node.name : node;\n   };\n"
                },
                {
                    "date": 1727250921590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,179 +119,155 @@\n   const filteredColumns = getFilteredNodeColumns(linkedNodeTypes);\n \n   return (\n     <Drawer\n-      anchor=\"bottom\"\n-      open={bottomDrawerOpen}\n-      onClose={() => setBottomDrawerOpen(false)}\n-      sx={{ zIndex: 1500 }}\n-    >\n-      <Box sx={{ width: \"100%\", padding: 3 }}>\n-        <Box\n-          sx={{\n-            display: \"flex\",\n-            justifyContent: \"space-between\",\n-            alignItems: \"center\",\n-            marginBottom: 2,\n-          }}\n+    anchor=\"bottom\"\n+    open={bottomDrawerOpen}\n+    onClose={() => setBottomDrawerOpen(false)}\n+    sx={{ zIndex: 1500 }}\n+  >\n+    <Box sx={{ width: \"100%\", padding: 3 }}>\n+      <Box\n+        sx={{\n+          display: \"flex\",\n+          justifyContent: \"space-between\",\n+          alignItems: \"center\",\n+          marginBottom: 2,\n+        }}\n+      >\n+        {selectedNode ? (\n+          <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n+            {t('detailDrawer.nodeDetails', { name: selectedNode.name.toString() })}\n+          </Typography>\n+        ) : (\n+          <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n+            {selectedRelationship && t('detailDrawer.relationshipDetails', {\n+              sourceType: getNodeType(selectedRelationship.source),\n+              sourceName: getNodeName(selectedRelationship.source),\n+              relationshipType: selectedRelationship.type,\n+              targetType: getNodeType(selectedRelationship.target),\n+              targetName: getNodeName(selectedRelationship.target),\n+            })}\n+          </Typography>\n+        )}\n+        <IconButton\n+          onClick={() => setBottomDrawerOpen(false)}\n+          sx={{ marginLeft: \"auto\" }}\n         >\n-          {selectedNode ? (\n+          <CloseIcon />\n+        </IconButton>\n+      </Box>\n+      {selectedNode && (\n+        <Card sx={{ marginBottom: 3 }}>\n+          <CardContent>\n             <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n-              {/* Node Details: {selectedNode.id.toString()} */}\n-              Node Details: {selectedNode.name.toString()}\n+              {t('detailDrawer.nodeInformation')}\n             </Typography>\n-          ) : (\n-            <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n-              {\" \"}\n-              {selectedRelationship && (\n-                <>\n-                  {\"(:\"}\n-                  {getNodeType(selectedRelationship.source)} {\"{name: \"}\n-                  {\"'\"}\n-                  {getNodeName(selectedRelationship.source)}\n-                  {\"'\"}\n-                  {\"}\"}\n-                  {\")\"}\n-                  {\"-[:\"}\n-                  {selectedRelationship.type}\n-                  {\"]->\"}\n-                  {\"(:\"}\n-                  {getNodeType(selectedRelationship.target)} {\"{name: \"}\n-                  {\"'\"}\n-                  {getNodeName(selectedRelationship.target)}\n-                  {\"'\"}\n-                  {\"}\"}\n-                  {\")\"}\n-                </>\n-              )}\n-            </Typography>\n-          )}\n-          <IconButton\n-            onClick={() => setBottomDrawerOpen(false)}\n-            sx={{ marginLeft: \"auto\" }}\n-          >\n-            <CloseIcon />\n-          </IconButton>\n-        </Box>\n-        {selectedNode && (\n-          <Card sx={{ marginBottom: 3 }}>\n-            <CardContent>\n-              <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n-                Node Information\n+            <Typography>{t('detailDrawer.id')}: {selectedNode.uuid}</Typography>\n+            <Typography>{t('detailDrawer.name')}: {selectedNode.name}</Typography>\n+            {selectedNode.covariate_type && (\n+              <Typography>\n+                {t('detailDrawer.covariateType')}: {selectedNode.covariate_type}\n               </Typography>\n-              <Typography>ID: {selectedNode.uuid}</Typography>\n-              <Typography>Name: {selectedNode.name}</Typography>\n-              {selectedNode.covariate_type && (\n-                <Typography>\n-                  Covariate Type: {selectedNode.covariate_type}\n-                </Typography>\n-              )}\n-              <Typography>Type: {selectedNode.type}</Typography>\n-              {selectedNode.title && (\n-                <Typography>Title: {selectedNode.title}</Typography>\n-              )}\n-              {selectedNode.summary && (\n-                <Typography>Summary: {selectedNode.summary}</Typography>\n-              )}\n-              {selectedNode.n_tokens && (\n-                <Typography>\n-                  Number of Tokens: {selectedNode.n_tokens}\n-                </Typography>\n-              )}\n+            )}\n+            <Typography>{t('detailDrawer.type')}: {selectedNode.type}</Typography>\n+            {selectedNode.title && (\n+              <Typography>{t('detailDrawer.title')}: {selectedNode.title}</Typography>\n+            )}\n+            {selectedNode.summary && (\n+              <Typography>{t('detailDrawer.summary')}: {selectedNode.summary}</Typography>\n+            )}\n+            {selectedNode.n_tokens && (\n+              <Typography>\n+                {t('detailDrawer.numberOfTokens')}: {selectedNode.n_tokens}\n+              </Typography>\n+            )}\n \n-              {selectedNode.description && (\n-                <Typography>Description: {selectedNode.description}</Typography>\n-              )}\n-              {selectedNode.human_readable_id && (\n-                <Typography>\n-                  Human Readable ID: {selectedNode.human_readable_id}\n-                </Typography>\n-              )}\n-\n-              {/* {selectedNode.human_readable_id ||\n-                (selectedNode.human_readable_id === 0 && (\n-                  <Typography>\n-                    Human Readable ID: {selectedNode.human_readable_id}\n-                  </Typography>\n-                ))} */}\n-              {selectedNode.raw_content && (\n-                <Typography>Raw Content: {selectedNode.raw_content}</Typography>\n-              )}\n-            </CardContent>\n-          </Card>\n-        )}\n-        {selectedRelationship && (\n-          <Card sx={{ marginBottom: 3 }}>\n-            <CardContent>\n-              <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n-                Relationship Information:\n+            {selectedNode.description && (\n+              <Typography>{t('detailDrawer.description')}: {selectedNode.description}</Typography>\n+            )}\n+            {selectedNode.human_readable_id && (\n+              <Typography>\n+                {t('detailDrawer.humanReadableId')}: {selectedNode.human_readable_id}\n               </Typography>\n-              <Typography>ID: {selectedRelationship.id}</Typography>\n+            )}\n+            {selectedNode.raw_content && (\n+              <Typography>{t('detailDrawer.rawContent')}: {selectedNode.raw_content}</Typography>\n+            )}\n+          </CardContent>\n+        </Card>\n+      )}\n+      {selectedRelationship && (\n+        <Card sx={{ marginBottom: 3 }}>\n+          <CardContent>\n+            <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n+              {t('detailDrawer.relationshipInformation')}\n+            </Typography>\n+            <Typography>{t('detailDrawer.id')}: {selectedRelationship.id}</Typography>\n \n+            <Typography>\n+              {t('detailDrawer.source')}: {getNodeName(selectedRelationship.source)}\n+            </Typography>\n+            <Typography>\n+              {t('detailDrawer.target')}: {getNodeName(selectedRelationship.target)}\n+            </Typography>\n+            <Typography>{t('detailDrawer.type')}: {selectedRelationship.type}</Typography>\n+            {selectedRelationship.description && (\n               <Typography>\n-                Source: {getNodeName(selectedRelationship.source)}\n+                {t('detailDrawer.description')}: {selectedRelationship.description}\n               </Typography>\n+            )}\n+            {selectedRelationship.human_readable_id && (\n               <Typography>\n-                Target: {getNodeName(selectedRelationship.target)}\n+                {t('detailDrawer.humanReadableId')}: {selectedRelationship.human_readable_id}\n               </Typography>\n-              <Typography>Type: {selectedRelationship.type}</Typography>\n-              {selectedRelationship.description && (\n-                <Typography>\n-                  Description: {selectedRelationship.description}\n-                </Typography>\n-              )}\n-              {selectedRelationship.human_readable_id && (\n-                <Typography>\n-                  Human Readable ID: {selectedRelationship.human_readable_id}\n-                </Typography>\n-              )}\n-              {selectedRelationship.weight && (\n-                <Typography>Weight: {selectedRelationship.weight}</Typography>\n-              )}\n-              {selectedRelationship.source_degree && (\n-                <Typography>\n-                  Source Degree: {selectedRelationship.source_degree}\n-                </Typography>\n-              )}\n-              {selectedRelationship.target_degree && (\n-                <Typography>\n-                  Target Degree: {selectedRelationship.target_degree}\n-                </Typography>\n-              )}\n-              {selectedRelationship.rank && (\n-                <Typography>Rank: {selectedRelationship.rank}</Typography>\n-              )}\n-            </CardContent>\n-          </Card>\n-        )}\n-        <Box sx={{ marginBottom: 2 }}>\n+            )}\n+            {selectedRelationship.weight && (\n+              <Typography>{t('detailDrawer.weight')}: {selectedRelationship.weight}</Typography>\n+            )}\n+            {selectedRelationship.source_degree && (\n+              <Typography>\n+                {t('detailDrawer.sourceDegree')}: {selectedRelationship.source_degree}\n+              </Typography>\n+            )}\n+            {selectedRelationship.target_degree && (\n+              <Typography>\n+                {t('detailDrawer.targetDegree')}: {selectedRelationship.target_degree}\n+              </Typography>\n+            )}\n+            {selectedRelationship.rank && (\n+              <Typography>{t('detailDrawer.rank')}: {selectedRelationship.rank}</Typography>\n+            )}\n+          </CardContent>\n+        </Card>\n+      )}\n+      <Box sx={{ marginBottom: 2 }}>\n+        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\" }}>\n+          {t('detailDrawer.linkedNodes')}\n+        </Typography>\n+        <DataTable\n+          columns={filteredColumns}\n+          data={linkedNodes}\n+        />\n+      </Box>\n+      {selectedNode && (\n+        <Box>\n           <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\" }}>\n-            Linked Nodes\n+            {t('detailDrawer.linkedRelationships')}\n           </Typography>\n+\n           <DataTable\n-            // columns={customNodeColumns}\n-            columns={filteredColumns}\n-            data={linkedNodes}\n+            columns={customLinkColumns}\n+            data={linkedRelationships.map((link) => ({\n+              ...link,\n+              source: getNodeName(link.source),\n+              target: getNodeName(link.target),\n+            }))}\n           />\n         </Box>\n-        {selectedNode && (\n-          <Box>\n-            <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\" }}>\n-              Linked Relationships\n-            </Typography>\n-\n-            <DataTable\n-              columns={customLinkColumns}\n-              data={linkedRelationships.map((link) => ({\n-                ...link,\n-                source: getNodeName(link.source),\n-                target: getNodeName(link.target),\n-              }))}\n-            />\n-          </Box>\n-        )}\n-      </Box>\n-    </Drawer>\n+      )}\n+    </Box>\n+  </Drawer>\n   );\n };\n \n export default DetailDrawer;\n"
                }
            ],
            "date": 1727250670012,
            "name": "Commit-0",
            "content": "import React from \"react\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  Drawer,\n  IconButton,\n  Typography,\n} from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport DataTable from \"./DataTable\";\nimport {\n  CustomLink,\n  CustomNode,\n  customLinkColumns,\n  customNodeColumns,\n} from \"../models/custom-graph-data\";\nimport { textUnitColumns } from \"../models/text-unit\";\nimport { communityColumns } from \"../models/community\";\nimport {\n  communityReportColumns,\n  findingColumns,\n} from \"../models/community-report\";\nimport { documentColumns } from \"../models/document\";\nimport { covariateColumns } from \"../models/covariate\";\nimport { MRT_ColumnDef } from \"material-react-table\";\nimport { entityColumns } from \"../models/entity\";\nimport { useTranslation } from 'react-i18next';\n\ninterface DetailDrawerProps {\n  bottomDrawerOpen: boolean;\n  setBottomDrawerOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  selectedNode: CustomNode | null;\n  selectedRelationship: CustomLink | null;\n  linkedNodes: CustomNode[];\n  linkedRelationships: CustomLink[];\n}\n\nconst DetailDrawer: React.FC<DetailDrawerProps> = ({\n  bottomDrawerOpen,\n  setBottomDrawerOpen,\n  selectedNode,\n  selectedRelationship,\n  linkedNodes,\n  linkedRelationships,\n}) => {\n  const getNodeName = (node: string | CustomNode) => {\n    return typeof node === \"object\" ? node.name : node;\n  };\n\n  const getNodeType = (node: string | CustomNode) => {\n    return typeof node === \"object\" ? node.type : node;\n  };\n\n  const getFilteredNodeColumns = (\n    types: string[]\n  ): MRT_ColumnDef<CustomNode>[] => {\n    const validAccessorKeys = new Set<string>();\n    if (types.includes(\"CHUNK\")) {\n      textUnitColumns.forEach((tc) => {\n        if (tc.accessorKey) {\n          validAccessorKeys.add(tc.accessorKey);\n        }\n      });\n    }\n\n    if (types.includes(\"COMMUNITY\")) {\n      communityColumns.forEach((tc) => {\n        if (tc.accessorKey) {\n          validAccessorKeys.add(tc.accessorKey);\n        }\n      });\n      communityReportColumns.forEach((tc) => {\n        if (tc.accessorKey) {\n          validAccessorKeys.add(tc.accessorKey);\n        }\n      });\n    }\n\n    if (types.includes(\"RAW_DOCUMENT\")) {\n      documentColumns.forEach((tc) => {\n        if (tc.accessorKey) {\n          validAccessorKeys.add(tc.accessorKey);\n        }\n      });\n    }\n\n    if (types.includes(\"COVARIATE\")) {\n      covariateColumns.forEach((tc) => {\n        if (tc.accessorKey) {\n          validAccessorKeys.add(tc.accessorKey);\n        }\n      });\n    }\n\n    if (types.includes(\"FINDING\")) {\n      findingColumns.forEach((tc) => {\n        if (tc.accessorKey) {\n          validAccessorKeys.add(tc.accessorKey);\n        }\n      });\n    }\n\n    entityColumns.forEach((tc) => {\n      if (tc.accessorKey) {\n        validAccessorKeys.add(tc.accessorKey);\n      }\n    });\n    validAccessorKeys.add(\"uuid\");\n    return customNodeColumns.filter(\n      (column) =>\n        column.accessorKey && validAccessorKeys.has(column.accessorKey)\n    );\n  };\n\n  const linkedNodeTypes = [...new Set(linkedNodes.map((node) => node.type))];\n  const filteredColumns = getFilteredNodeColumns(linkedNodeTypes);\n\n  return (\n    <Drawer\n      anchor=\"bottom\"\n      open={bottomDrawerOpen}\n      onClose={() => setBottomDrawerOpen(false)}\n      sx={{ zIndex: 1500 }}\n    >\n      <Box sx={{ width: \"100%\", padding: 3 }}>\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            marginBottom: 2,\n          }}\n        >\n          {selectedNode ? (\n            <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n              {/* Node Details: {selectedNode.id.toString()} */}\n              Node Details: {selectedNode.name.toString()}\n            </Typography>\n          ) : (\n            <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n              {\" \"}\n              {selectedRelationship && (\n                <>\n                  {\"(:\"}\n                  {getNodeType(selectedRelationship.source)} {\"{name: \"}\n                  {\"'\"}\n                  {getNodeName(selectedRelationship.source)}\n                  {\"'\"}\n                  {\"}\"}\n                  {\")\"}\n                  {\"-[:\"}\n                  {selectedRelationship.type}\n                  {\"]->\"}\n                  {\"(:\"}\n                  {getNodeType(selectedRelationship.target)} {\"{name: \"}\n                  {\"'\"}\n                  {getNodeName(selectedRelationship.target)}\n                  {\"'\"}\n                  {\"}\"}\n                  {\")\"}\n                </>\n              )}\n            </Typography>\n          )}\n          <IconButton\n            onClick={() => setBottomDrawerOpen(false)}\n            sx={{ marginLeft: \"auto\" }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </Box>\n        {selectedNode && (\n          <Card sx={{ marginBottom: 3 }}>\n            <CardContent>\n              <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n                Node Information\n              </Typography>\n              <Typography>ID: {selectedNode.uuid}</Typography>\n              <Typography>Name: {selectedNode.name}</Typography>\n              {selectedNode.covariate_type && (\n                <Typography>\n                  Covariate Type: {selectedNode.covariate_type}\n                </Typography>\n              )}\n              <Typography>Type: {selectedNode.type}</Typography>\n              {selectedNode.title && (\n                <Typography>Title: {selectedNode.title}</Typography>\n              )}\n              {selectedNode.summary && (\n                <Typography>Summary: {selectedNode.summary}</Typography>\n              )}\n              {selectedNode.n_tokens && (\n                <Typography>\n                  Number of Tokens: {selectedNode.n_tokens}\n                </Typography>\n              )}\n\n              {selectedNode.description && (\n                <Typography>Description: {selectedNode.description}</Typography>\n              )}\n              {selectedNode.human_readable_id && (\n                <Typography>\n                  Human Readable ID: {selectedNode.human_readable_id}\n                </Typography>\n              )}\n\n              {/* {selectedNode.human_readable_id ||\n                (selectedNode.human_readable_id === 0 && (\n                  <Typography>\n                    Human Readable ID: {selectedNode.human_readable_id}\n                  </Typography>\n                ))} */}\n              {selectedNode.raw_content && (\n                <Typography>Raw Content: {selectedNode.raw_content}</Typography>\n              )}\n            </CardContent>\n          </Card>\n        )}\n        {selectedRelationship && (\n          <Card sx={{ marginBottom: 3 }}>\n            <CardContent>\n              <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n                Relationship Information:\n              </Typography>\n              <Typography>ID: {selectedRelationship.id}</Typography>\n\n              <Typography>\n                Source: {getNodeName(selectedRelationship.source)}\n              </Typography>\n              <Typography>\n                Target: {getNodeName(selectedRelationship.target)}\n              </Typography>\n              <Typography>Type: {selectedRelationship.type}</Typography>\n              {selectedRelationship.description && (\n                <Typography>\n                  Description: {selectedRelationship.description}\n                </Typography>\n              )}\n              {selectedRelationship.human_readable_id && (\n                <Typography>\n                  Human Readable ID: {selectedRelationship.human_readable_id}\n                </Typography>\n              )}\n              {selectedRelationship.weight && (\n                <Typography>Weight: {selectedRelationship.weight}</Typography>\n              )}\n              {selectedRelationship.source_degree && (\n                <Typography>\n                  Source Degree: {selectedRelationship.source_degree}\n                </Typography>\n              )}\n              {selectedRelationship.target_degree && (\n                <Typography>\n                  Target Degree: {selectedRelationship.target_degree}\n                </Typography>\n              )}\n              {selectedRelationship.rank && (\n                <Typography>Rank: {selectedRelationship.rank}</Typography>\n              )}\n            </CardContent>\n          </Card>\n        )}\n        <Box sx={{ marginBottom: 2 }}>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\" }}>\n            Linked Nodes\n          </Typography>\n          <DataTable\n            // columns={customNodeColumns}\n            columns={filteredColumns}\n            data={linkedNodes}\n          />\n        </Box>\n        {selectedNode && (\n          <Box>\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\" }}>\n              Linked Relationships\n            </Typography>\n\n            <DataTable\n              columns={customLinkColumns}\n              data={linkedRelationships.map((link) => ({\n                ...link,\n                source: getNodeName(link.source),\n                target: getNodeName(link.target),\n              }))}\n            />\n          </Box>\n        )}\n      </Box>\n    </Drawer>\n  );\n};\n\nexport default DetailDrawer;\n"
        }
    ]
}