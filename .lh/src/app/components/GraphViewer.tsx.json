{
    "sourceFile": "src/app/components/GraphViewer.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1727241223449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727241263549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -563,9 +563,8 @@\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n               {t('graphViewer.searchNodesLinks')}\n-\n           </Button>\n           {/* <FormControlLabel\n             control={\n               <Switch\n@@ -581,9 +580,10 @@\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label=\"Show Node Labels\"\n+            label=  label={t('graphViewer.view3D')}\n+\n           />\n           <FormControlLabel\n             control={\n               <Switch\n"
                },
                {
                    "date": 1727241269422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,10 +580,9 @@\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label=  label={t('graphViewer.view3D')}\n-\n+  label={t('graphViewer.view3D')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n"
                },
                {
                    "date": 1727241311185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,9 @@\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-  label={t('graphViewer.view3D')}\n+            label={t('graphViewer.view3D')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n@@ -600,9 +600,10 @@\n               />\n             }\n             label=\"Show Highlight\"\n           /> */}\n-          <Tooltip title={isFullscreen ? \"Exit Full Screen\" : \"Full Screen\"}>\n+          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n+\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n           </Tooltip>\n"
                },
                {
                    "date": 1727241343769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -571,9 +571,10 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label=\"3D View\"\n+            label={t('graphViewer.view3D')}\n+\n           /> */}\n           {/* <FormControlLabel\n             control={\n               <Switch\n@@ -601,9 +602,8 @@\n             }\n             label=\"Show Highlight\"\n           /> */}\n           <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n-\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n           </Tooltip>\n"
                },
                {
                    "date": 1727241374031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,549 +1,15 @@\n-import React, { useState, useCallback, useRef, useEffect } from \"react\";\n-import ForceGraph2D from \"react-force-graph-2d\";\n-import ForceGraph3D from \"react-force-graph-3d\";\n-import {\n-  CustomGraphData,\n-  CustomLink,\n-  CustomNode,\n-} from \"../models/custom-graph-data\";\n-import {\n-  Box,\n-  Button,\n-  Checkbox,\n-  FormControlLabel,\n-  FormGroup,\n-  IconButton,\n-  Switch,\n-  Tooltip,\n-  Typography,\n-  useTheme,\n-} from \"@mui/material\";\n-import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n-import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n-import SearchIcon from \"@mui/icons-material/Search\";\n-import DeleteIcon from \"@mui/icons-material/Delete\";\n-import Fuse from \"fuse.js\";\n-import {\n-  CSS2DRenderer,\n-  CSS2DObject,\n-} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n-import * as THREE from \"three\";\n-import { Renderer } from \"three\";\n-import SearchDrawer from \"./SearchDrawer\";\n-import DetailDrawer from \"./DetailDrawer\";\n-import { SearchResult } from \"../models/search-result\";\n-import agent from \"../api/agent\";\n-import APISearchDrawer from \"./APISearchDrawer\";\n-import SpriteText from \"three-spritetext\";\n+import { useTranslation } from 'react-i18next';\n \n-type Coords = {\n-  x: number;\n-  y: number;\n-  z: number;\n-};\n+const GraphViewer: React.FC<GraphViewerProps> = ({ ... }) => {\n+  const { t } = useTranslation();\n \n-interface GraphViewerProps {\n-  data: CustomGraphData;\n-  graphType: \"2d\" | \"3d\";\n-  isFullscreen: boolean;\n-  onToggleFullscreen: () => void;\n-  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n-  includeDocuments: boolean;\n-  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeTextUnits: boolean;\n-  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCommunities: boolean;\n-  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCovariates: boolean;\n-  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  hasDocuments: boolean;\n-  hasTextUnits: boolean;\n-  hasCommunities: boolean;\n-  hasCovariates: boolean;\n-}\n+  // 组件代码...\n \n-const NODE_R = 8;\n-\n-const GraphViewer: React.FC<GraphViewerProps> = ({\n-  data,\n-  graphType,\n-  isFullscreen,\n-  includeDocuments,\n-  onIncludeDocumentsChange,\n-  includeTextUnits,\n-  onIncludeTextUnitsChange,\n-  includeCommunities,\n-  onIncludeCommunitiesChange,\n-  includeCovariates,\n-  onIncludeCovariatesChange,\n-  onToggleFullscreen,\n-  onToggleGraphType,\n-  hasDocuments,\n-  hasTextUnits,\n-  hasCommunities,\n-  hasCovariates,\n-}) => {\n-  const theme = useTheme();\n-  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n-    new Set()\n-  );\n-  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n-    new Set()\n-  );\n-  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n-  const [searchTerm, setSearchTerm] = useState(\"\");\n-  const [searchResults, setSearchResults] = useState<\n-    (CustomNode | CustomLink)[]\n-  >([]);\n-  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n-  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n-  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n-  const [selectedRelationship, setSelectedRelationship] =\n-    useState<CustomLink | null>(null);\n-  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n-  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n-    []\n-  );\n-  const [showLabels, setShowLabels] = useState(false);\n-  const [showLinkLabels, setShowLinkLabels] = useState(false);\n-  const [showHighlight, setShowHighlight] = useState(true);\n-  const graphRef = useRef<any>();\n-  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n-  const nodeCount = data.nodes.length;\n-  const linkCount = data.links.length;\n-\n-  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n-  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n-    null\n-  );\n-  const [serverUp, setServerUp] = useState<boolean>(false);\n-\n-  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n-\n-  const initialGraphData = useRef<CustomGraphData>(data);\n-\n-  useEffect(() => {\n-    setGraphData(data);\n-    initialGraphData.current = data;\n-  }, [data]);\n-\n-  useEffect(() => {\n-    checkServerStatus();\n-  }, []);\n-\n-  const toggleApiDrawer = (open: boolean) => () => {\n-    setApiDrawerOpen(open);\n-  };\n-\n-  const handleApiSearch = async (\n-    query: string,\n-    searchType: \"local\" | \"global\"\n-  ) => {\n-    try {\n-      const data: SearchResult =\n-        searchType === \"local\"\n-          ? await agent.Search.local(query)\n-          : await agent.Search.global(query);\n-\n-      setApiSearchResults(data);\n-      // Process the search result to update the graph data\n-      updateGraphData(data.context_data);\n-    } catch (err) {\n-      console.error(\"An error occurred during the API search.\", err);\n-    } finally {\n-    }\n-  };\n-\n-  const checkServerStatus = async () => {\n-    try {\n-      const response = await agent.Status.check();\n-      if (response.status === \"Server is up and running\") {\n-        setServerUp(true);\n-      } else {\n-        setServerUp(false);\n-      }\n-    } catch (error) {\n-      setServerUp(false);\n-    }\n-  };\n-\n-  const updateGraphData = (contextData: any) => {\n-    if (!contextData) return;\n-\n-    const newNodes: CustomNode[] = [];\n-    const newLinks: CustomLink[] = [];\n-\n-    const baseGraphData = initialGraphData.current;\n-\n-    // Assuming contextData has keys like entities, reports, relationships, sources\n-    Object.entries(contextData).forEach(([key, items]) => {\n-      if (Array.isArray(items)) {\n-        items.forEach((item) => {\n-          if (key === \"relationships\") {\n-            // Handle links\n-            const existingLink = baseGraphData.links.find(\n-              (link) =>\n-                link.human_readable_id?.toString() === item.id.toString()\n-            );\n-\n-            if (existingLink) {\n-              newLinks.push(existingLink);\n-            }\n-          } else if (key === \"entities\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                !node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"reports\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.uuid === item.id.toString()\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"sources\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.text?.toString() === item.text\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"covariates\" || key === \"claims\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          }\n-        });\n-      }\n-    });\n-\n-    // Update the graph data with the new nodes and links\n-    const updatedGraphData: CustomGraphData = {\n-      nodes: [...newNodes],\n-      links: [...newLinks],\n-    };\n-\n-    // Set the updated data to trigger re-render\n-    setGraphData(updatedGraphData);\n-  };\n-\n-  const fuse = new Fuse([...data.nodes, ...data.links], {\n-    keys: [\n-      \"uuid\",\n-      \"id\",\n-      \"name\",\n-      \"type\",\n-      \"description\",\n-      \"source\",\n-      \"target\",\n-      \"title\",\n-      \"summary\",\n-    ],\n-    threshold: 0.3,\n-  });\n-\n-  const handleNodeHover = useCallback((node: CustomNode | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (node) {\n-      newHighlightNodes.add(node);\n-      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-      node.links?.forEach((link) => newHighlightLinks.add(link));\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-    setHoverNode(node);\n-  }, []);\n-\n-  const handleLinkHover = useCallback((link: CustomLink | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (link) {\n-      newHighlightLinks.add(link);\n-      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n-      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-  }, []);\n-\n-  const paintRing = useCallback(\n-    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-      ctx.beginPath();\n-      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n-      if (highlightNodes.has(node)) {\n-        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n-        ctx.globalAlpha = 1; // full opacity\n-      } else {\n-        ctx.fillStyle = \"gray\";\n-        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n-      }\n-      ctx.fill();\n-      ctx.globalAlpha = 1; // reset alpha for other drawings\n-    },\n-    [hoverNode, highlightNodes]\n-  );\n-\n-  const handleSearch = () => {\n-    const results = fuse.search(searchTerm).map((result) => result.item);\n-    const nodeResults = results.filter((item) => \"neighbors\" in item);\n-    const linkResults = results.filter(\n-      (item) => \"source\" in item && \"target\" in item\n-    );\n-    setSearchResults([...nodeResults, ...linkResults]);\n-    setRightDrawerOpen(true);\n-  };\n-\n-  const toggleDrawer = (open: boolean) => () => {\n-    setRightDrawerOpen(open);\n-  };\n-\n-  const handleFocusButtonClick = (node: CustomNode) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    newHighlightNodes.add(node);\n-    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-    node.links?.forEach((link) => highlightLinks.add(link));\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHoverNode(node);\n-\n-    if (graphRef.current) {\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(node.x, node.y, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: node.x, y: node.y, z: 300 }, // new position\n-          { x: node.x, y: node.y, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused node\n-    setTimeout(() => {\n-      handleNodeHover(node);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleFocusLinkClick = (link: CustomLink) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    newHighlightLinks.add(link);\n-    let sourceNode: CustomNode | undefined;\n-    let targetNode: CustomNode | undefined;\n-\n-    if (typeof link.source !== \"string\") {\n-      newHighlightNodes.add(link.source);\n-      sourceNode = link.source;\n-    }\n-\n-    if (typeof link.target !== \"string\") {\n-      newHighlightNodes.add(link.target);\n-      targetNode = link.target;\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-\n-    if (\n-      graphRef.current &&\n-      sourceNode &&\n-      targetNode &&\n-      sourceNode.x &&\n-      targetNode.x &&\n-      sourceNode.y &&\n-      targetNode.y\n-    ) {\n-      const midX = (sourceNode.x + targetNode.x) / 2;\n-      const midY = (sourceNode.y + targetNode.y) / 2;\n-\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(midX, midY, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: midX, y: midY, z: 300 }, // new position\n-          { x: midX, y: midY, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused link\n-    setTimeout(() => {\n-      handleLinkHover(link);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleNodeClick = (node: CustomNode) => {\n-    setSelectedRelationship(null);\n-    setSelectedNode(node);\n-    setLinkedNodes(node.neighbors || []);\n-    setLinkedRelationships(node.links || []);\n-    setBottomDrawerOpen(true);\n-  };\n-\n-  const handleLinkClick = (link: CustomLink) => {\n-    setSelectedNode(null);\n-    setSelectedRelationship(link);\n-    const linkSource =\n-      typeof link.source === \"object\"\n-        ? (link.source as CustomNode).id\n-        : link.source;\n-    const linkTarget =\n-      typeof link.target === \"object\"\n-        ? (link.target as CustomNode).id\n-        : link.target;\n-    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n-    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n-    if (sourceNode && targetNode) {\n-      const linkedNodes = [sourceNode, targetNode];\n-      setLinkedNodes(linkedNodes);\n-      const linkedRelationships = [link];\n-      setLinkedRelationships(linkedRelationships);\n-      setBottomDrawerOpen(true);\n-    }\n-  };\n-\n-  const getBackgroundColor = () =>\n-    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n-\n-  const getLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n-\n-  const get3DLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-    if (!showLabels) return; // Only render the label if showLabels is true\n-\n-    const label = node.name || \"\";\n-    const fontSize = 4;\n-    const padding = 2;\n-    ctx.font = `${fontSize}px Sans-Serif`;\n-\n-    // Set the styles based on the theme mode\n-    const backgroundColor =\n-      theme.palette.mode === \"dark\"\n-        ? \"rgba(0, 0, 0, 0.6)\"\n-        : \"rgba(255, 255, 255, 0.6)\";\n-\n-    // Calculate label dimensions\n-    const textWidth = ctx.measureText(label).width;\n-    const boxWidth = textWidth + padding * 2;\n-    const boxHeight = fontSize + padding * 2;\n-\n-    if (node.x && node.y) {\n-      // Draw the background rectangle with rounded corners\n-      ctx.fillStyle = backgroundColor;\n-      ctx.beginPath();\n-      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n-      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2 + 5\n-      );\n-      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x + boxWidth / 2 - 5,\n-        node.y + boxHeight / 2\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2 - 5\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x - boxWidth / 2 + 5,\n-        node.y - boxHeight / 2\n-      );\n-      ctx.closePath();\n-      ctx.fill();\n-\n-      // Draw the text in the center of the node\n-      // ctx.fillStyle = textColor;\n-      ctx.fillStyle = node.color;\n-      ctx.textAlign = \"center\";\n-      ctx.textBaseline = \"middle\";\n-      ctx.fillText(label, node.x, node.y);\n-    }\n-  };\n-\n-  const nodeThreeObject = (node: CustomNode) => {\n-    if (!showLabels) {\n-      return new THREE.Object3D();\n-    }\n-\n-    try {\n-      const nodeEl = document.createElement(\"div\");\n-      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n-      nodeEl.style.color = node.color;\n-      nodeEl.style.padding = \"2px 4px\";\n-      nodeEl.style.borderRadius = \"4px\";\n-      nodeEl.style.fontSize = \"10px\";\n-      nodeEl.className = \"node-label\";\n-\n-      return new CSS2DObject(nodeEl);\n-    } catch (error) {\n-      console.error(\"Error creating 3D object:\", error);\n-      return new THREE.Object3D(); // Fallback in case of error\n-    }\n-  };\n-\n-  const localSearchEnabled = hasCovariates\n-    ? includeTextUnits && includeCommunities && includeCovariates\n-    : includeTextUnits && includeCommunities;\n-\n-  const clearSearchResults = () => {\n-    setGraphData(initialGraphData.current);\n-    setApiSearchResults(null);\n-  };\n-\n   return (\n     <Box\n       sx={{\n-        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-        width: isFullscreen ? \"100vw\" : \"100%\",\n-        position: isFullscreen ? \"fixed\" : \"relative\",\n-        top: 0,\n-        left: 0,\n-        zIndex: isFullscreen ? 1300 : \"auto\",\n-        overflow: \"hidden\",\n-        margin: 0,\n-        padding: 0,\n-        backgroundColor: getBackgroundColor(),\n+        // 样式代码...\n       }}\n     >\n       <Box\n         sx={{\n@@ -562,47 +28,11 @@\n             variant=\"contained\"\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n-              {t('graphViewer.searchNodesLinks')}\n+            {t('graphViewer.searchNodesLinks')}\n           </Button>\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n \n-          /> */}\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label=\"Show Relationship Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label=\"Show Highlight\"\n-          /> */}\n           <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n@@ -623,36 +53,36 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label=\"3D View\"\n+            label={t('graphViewer.view3D')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label=\"Show Node Labels\"\n+            label={t('graphViewer.showNodeLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLinkLabels}\n                 onChange={() => setShowLinkLabels(!showLinkLabels)}\n               />\n             }\n-            label=\"Show Link Labels\"\n+            label={t('graphViewer.showLinkLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showHighlight}\n                 onChange={() => setShowHighlight(!showHighlight)}\n               />\n             }\n-            label=\"Show Highlight\"\n+            label={t('graphViewer.showHighlight')}\n           />\n         </Box>\n \n         <FormGroup>\n@@ -663,29 +93,28 @@\n                 onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                 disabled={!hasDocuments || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Documents\"\n+            label={t('graphViewer.includeDocuments')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n                 checked={includeTextUnits}\n-                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n                 onChange={() => {\n                   if (!includeTextUnits) {\n                     onIncludeTextUnitsChange(true);\n                   } else if (includeTextUnits && !includeCovariates) {\n                     onIncludeTextUnitsChange(false);\n                   } else {\n                     onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n+                    onIncludeCovariatesChange(false);\n                   }\n                 }}\n                 disabled={!hasTextUnits || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Text Units\"\n+            label={t('graphViewer.includeTextUnits')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n@@ -693,9 +122,9 @@\n                 onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n                 disabled={!hasCommunities || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Communities\"\n+            label={t('graphViewer.includeCommunities')}\n           />\n \n           <FormControlLabel\n             control={\n@@ -713,162 +142,15 @@\n                 }}\n                 disabled={!hasCovariates || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Covariates\"\n+            label={t('graphViewer.includeCovariates')}\n           />\n         </FormGroup>\n       </Box>\n \n-      <APISearchDrawer\n-        apiDrawerOpen={apiDrawerOpen}\n-        toggleDrawer={toggleApiDrawer}\n-        handleApiSearch={handleApiSearch}\n-        apiSearchResults={apiSearchResults}\n-        localSearchEnabled={localSearchEnabled}\n-        globalSearchEnabled={includeCommunities}\n-        hasCovariates={hasCovariates}\n-        serverUp={serverUp}\n-      />\n+      {/* 其他代码... */}\n \n-      <SearchDrawer\n-        searchTerm={searchTerm}\n-        setSearchTerm={setSearchTerm}\n-        handleSearch={handleSearch}\n-        searchResults={searchResults}\n-        rightDrawerOpen={rightDrawerOpen}\n-        toggleDrawer={toggleDrawer}\n-        handleFocusButtonClick={handleFocusButtonClick}\n-        handleNodeClick={handleNodeClick}\n-        handleFocusLinkClick={handleFocusLinkClick}\n-        handleLinkClick={handleLinkClick}\n-      />\n-\n-      <DetailDrawer\n-        bottomDrawerOpen={bottomDrawerOpen}\n-        setBottomDrawerOpen={setBottomDrawerOpen}\n-        selectedNode={selectedNode}\n-        selectedRelationship={selectedRelationship}\n-        linkedNodes={linkedNodes}\n-        linkedRelationships={linkedRelationships}\n-      />\n-\n-      {graphType === \"2d\" ? (\n-        <ForceGraph2D\n-          ref={graphRef}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          autoPauseRedraw={false}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          linkDirectionalParticleColor={\n-            showHighlight ? getlinkDirectionalParticleColor : undefined\n-          }\n-          nodeCanvasObjectMode={(node) =>\n-            showHighlight && highlightNodes.has(node)\n-              ? \"before\"\n-              : showLabels\n-              ? \"after\"\n-              : undefined\n-          }\n-          nodeCanvasObject={(node, ctx) => {\n-            if (showHighlight && highlightNodes.has(node)) {\n-              paintRing(node as CustomNode, ctx);\n-            }\n-            if (showLabels) {\n-              renderNodeLabel(node as CustomNode, ctx);\n-            }\n-          }}\n-          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n-          linkCanvasObject={(link, ctx) => {\n-            if (showLinkLabels) {\n-              const label = link.type || \"\";\n-              const fontSize = 4;\n-              ctx.font = `${fontSize}px Sans-Serif`;\n-              ctx.fillStyle =\n-                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n-              const source =\n-                typeof link.source !== \"string\"\n-                  ? (link.source as CustomNode)\n-                  : null;\n-              const target =\n-                typeof link.target !== \"string\"\n-                  ? (link.target as CustomNode)\n-                  : null;\n-\n-              if (\n-                source &&\n-                target &&\n-                source.x !== undefined &&\n-                target.x !== undefined &&\n-                source.y !== undefined &&\n-                target.y !== undefined\n-              ) {\n-                const textWidth = ctx.measureText(label).width;\n-                const posX = (source.x + target.x) / 2 - textWidth / 2;\n-                const posY = (source.y + target.y) / 2;\n-                ctx.fillText(label, posX, posY);\n-              }\n-            }\n-          }}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={getLinkColor}\n-        />\n-      ) : (\n-        <ForceGraph3D\n-          ref={graphRef}\n-          extraRenderers={extraRenderers}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          nodeThreeObject={nodeThreeObject}\n-          nodeThreeObjectExtend={true}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={get3DLinkColor}\n-          linkThreeObjectExtend={true}\n-          linkThreeObject={(link) => {\n-            if (!showLinkLabels) new THREE.Object3D();\n-            const sprite = new SpriteText(`${link.type}`);\n-            sprite.color = \"lightgrey\";\n-            sprite.textHeight = 1.5;\n-            return sprite;\n-          }}\n-          linkPositionUpdate={(sprite, { start, end }) => {\n-            if (!showLinkLabels) return;\n-\n-            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n-              acc[c as keyof Coords] =\n-                start[c as keyof Coords] +\n-                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n-              return acc;\n-            }, {} as Coords);\n-\n-            // Position sprite\n-            Object.assign(sprite.position, middlePos);\n-          }}\n-        />\n-      )}\n       <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n@@ -879,28 +161,30 @@\n           alignItems: \"flex-start\",\n           gap: 1,\n         }}\n       >\n-        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n-        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Typography variant=\"body2\">\n+          {t('graphViewer.nodes')}: {nodeCount}\n+        </Typography>\n+        <Typography variant=\"body2\">\n+          {t('graphViewer.relationships')}: {linkCount}\n+        </Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n         >\n-          Ask Query (Local/Global Search)\n+          {t('graphViewer.askQuery')}\n         </Button>\n         <Button\n           variant=\"contained\"\n           onClick={clearSearchResults}\n           startIcon={<DeleteIcon />}\n           color=\"warning\"\n           disabled={apiSearchResults === null}\n         >\n-          Clear Query Results\n+          {t('graphViewer.clearQueryResults')}\n         </Button>\n       </Box>\n     </Box>\n   );\n };\n-\n-export default GraphViewer;\n"
                },
                {
                    "date": 1727241383845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,905 @@\n+import React, { useState, useCallback, useRef, useEffect } from \"react\";\n+import ForceGraph2D from \"react-force-graph-2d\";\n+import ForceGraph3D from \"react-force-graph-3d\";\n+import {\n+  CustomGraphData,\n+  CustomLink,\n+  CustomNode,\n+} from \"../models/custom-graph-data\";\n+import {\n+  Box,\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  FormGroup,\n+  IconButton,\n+  Switch,\n+  Tooltip,\n+  Typography,\n+  useTheme,\n+} from \"@mui/material\";\n+import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n+import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n+import SearchIcon from \"@mui/icons-material/Search\";\n+import DeleteIcon from \"@mui/icons-material/Delete\";\n+import Fuse from \"fuse.js\";\n+import {\n+  CSS2DRenderer,\n+  CSS2DObject,\n+} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n+import * as THREE from \"three\";\n+import { Renderer } from \"three\";\n+import SearchDrawer from \"./SearchDrawer\";\n+import DetailDrawer from \"./DetailDrawer\";\n+import { SearchResult } from \"../models/search-result\";\n+import agent from \"../api/agent\";\n+import APISearchDrawer from \"./APISearchDrawer\";\n+import SpriteText from \"three-spritetext\";\n+\n+type Coords = {\n+  x: number;\n+  y: number;\n+  z: number;\n+};\n+\n+interface GraphViewerProps {\n+  data: CustomGraphData;\n+  graphType: \"2d\" | \"3d\";\n+  isFullscreen: boolean;\n+  onToggleFullscreen: () => void;\n+  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n+  includeDocuments: boolean;\n+  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeTextUnits: boolean;\n+  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCommunities: boolean;\n+  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCovariates: boolean;\n+  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  hasDocuments: boolean;\n+  hasTextUnits: boolean;\n+  hasCommunities: boolean;\n+  hasCovariates: boolean;\n+}\n+\n+const NODE_R = 8;\n+\n+const GraphViewer: React.FC<GraphViewerProps> = ({\n+  data,\n+  graphType,\n+  isFullscreen,\n+  includeDocuments,\n+  onIncludeDocumentsChange,\n+  includeTextUnits,\n+  onIncludeTextUnitsChange,\n+  includeCommunities,\n+  onIncludeCommunitiesChange,\n+  includeCovariates,\n+  onIncludeCovariatesChange,\n+  onToggleFullscreen,\n+  onToggleGraphType,\n+  hasDocuments,\n+  hasTextUnits,\n+  hasCommunities,\n+  hasCovariates,\n+}) => {\n+  const theme = useTheme();\n+  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n+    new Set()\n+  );\n+  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n+    new Set()\n+  );\n+  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n+  const [searchTerm, setSearchTerm] = useState(\"\");\n+  const [searchResults, setSearchResults] = useState<\n+    (CustomNode | CustomLink)[]\n+  >([]);\n+  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n+  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n+  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n+  const [selectedRelationship, setSelectedRelationship] =\n+    useState<CustomLink | null>(null);\n+  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n+  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n+    []\n+  );\n+  const [showLabels, setShowLabels] = useState(false);\n+  const [showLinkLabels, setShowLinkLabels] = useState(false);\n+  const [showHighlight, setShowHighlight] = useState(true);\n+  const graphRef = useRef<any>();\n+  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n+  const nodeCount = data.nodes.length;\n+  const linkCount = data.links.length;\n+\n+  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n+  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n+    null\n+  );\n+  const [serverUp, setServerUp] = useState<boolean>(false);\n+\n+  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n+\n+  const initialGraphData = useRef<CustomGraphData>(data);\n+\n+  useEffect(() => {\n+    setGraphData(data);\n+    initialGraphData.current = data;\n+  }, [data]);\n+\n+  useEffect(() => {\n+    checkServerStatus();\n+  }, []);\n+\n+  const toggleApiDrawer = (open: boolean) => () => {\n+    setApiDrawerOpen(open);\n+  };\n+\n+  const handleApiSearch = async (\n+    query: string,\n+    searchType: \"local\" | \"global\"\n+  ) => {\n+    try {\n+      const data: SearchResult =\n+        searchType === \"local\"\n+          ? await agent.Search.local(query)\n+          : await agent.Search.global(query);\n+\n+      setApiSearchResults(data);\n+      // Process the search result to update the graph data\n+      updateGraphData(data.context_data);\n+    } catch (err) {\n+      console.error(\"An error occurred during the API search.\", err);\n+    } finally {\n+    }\n+  };\n+\n+  const checkServerStatus = async () => {\n+    try {\n+      const response = await agent.Status.check();\n+      if (response.status === \"Server is up and running\") {\n+        setServerUp(true);\n+      } else {\n+        setServerUp(false);\n+      }\n+    } catch (error) {\n+      setServerUp(false);\n+    }\n+  };\n+\n+  const updateGraphData = (contextData: any) => {\n+    if (!contextData) return;\n+\n+    const newNodes: CustomNode[] = [];\n+    const newLinks: CustomLink[] = [];\n+\n+    const baseGraphData = initialGraphData.current;\n+\n+    // Assuming contextData has keys like entities, reports, relationships, sources\n+    Object.entries(contextData).forEach(([key, items]) => {\n+      if (Array.isArray(items)) {\n+        items.forEach((item) => {\n+          if (key === \"relationships\") {\n+            // Handle links\n+            const existingLink = baseGraphData.links.find(\n+              (link) =>\n+                link.human_readable_id?.toString() === item.id.toString()\n+            );\n+\n+            if (existingLink) {\n+              newLinks.push(existingLink);\n+            }\n+          } else if (key === \"entities\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                !node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"reports\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.uuid === item.id.toString()\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"sources\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.text?.toString() === item.text\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"covariates\" || key === \"claims\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          }\n+        });\n+      }\n+    });\n+\n+    // Update the graph data with the new nodes and links\n+    const updatedGraphData: CustomGraphData = {\n+      nodes: [...newNodes],\n+      links: [...newLinks],\n+    };\n+\n+    // Set the updated data to trigger re-render\n+    setGraphData(updatedGraphData);\n+  };\n+\n+  const fuse = new Fuse([...data.nodes, ...data.links], {\n+    keys: [\n+      \"uuid\",\n+      \"id\",\n+      \"name\",\n+      \"type\",\n+      \"description\",\n+      \"source\",\n+      \"target\",\n+      \"title\",\n+      \"summary\",\n+    ],\n+    threshold: 0.3,\n+  });\n+\n+  const handleNodeHover = useCallback((node: CustomNode | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (node) {\n+      newHighlightNodes.add(node);\n+      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+      node.links?.forEach((link) => newHighlightLinks.add(link));\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+    setHoverNode(node);\n+  }, []);\n+\n+  const handleLinkHover = useCallback((link: CustomLink | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (link) {\n+      newHighlightLinks.add(link);\n+      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n+      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+  }, []);\n+\n+  const paintRing = useCallback(\n+    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+      ctx.beginPath();\n+      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n+      if (highlightNodes.has(node)) {\n+        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n+        ctx.globalAlpha = 1; // full opacity\n+      } else {\n+        ctx.fillStyle = \"gray\";\n+        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n+      }\n+      ctx.fill();\n+      ctx.globalAlpha = 1; // reset alpha for other drawings\n+    },\n+    [hoverNode, highlightNodes]\n+  );\n+\n+  const handleSearch = () => {\n+    const results = fuse.search(searchTerm).map((result) => result.item);\n+    const nodeResults = results.filter((item) => \"neighbors\" in item);\n+    const linkResults = results.filter(\n+      (item) => \"source\" in item && \"target\" in item\n+    );\n+    setSearchResults([...nodeResults, ...linkResults]);\n+    setRightDrawerOpen(true);\n+  };\n+\n+  const toggleDrawer = (open: boolean) => () => {\n+    setRightDrawerOpen(open);\n+  };\n+\n+  const handleFocusButtonClick = (node: CustomNode) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    newHighlightNodes.add(node);\n+    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+    node.links?.forEach((link) => highlightLinks.add(link));\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHoverNode(node);\n+\n+    if (graphRef.current) {\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(node.x, node.y, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: node.x, y: node.y, z: 300 }, // new position\n+          { x: node.x, y: node.y, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused node\n+    setTimeout(() => {\n+      handleNodeHover(node);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleFocusLinkClick = (link: CustomLink) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    newHighlightLinks.add(link);\n+    let sourceNode: CustomNode | undefined;\n+    let targetNode: CustomNode | undefined;\n+\n+    if (typeof link.source !== \"string\") {\n+      newHighlightNodes.add(link.source);\n+      sourceNode = link.source;\n+    }\n+\n+    if (typeof link.target !== \"string\") {\n+      newHighlightNodes.add(link.target);\n+      targetNode = link.target;\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+\n+    if (\n+      graphRef.current &&\n+      sourceNode &&\n+      targetNode &&\n+      sourceNode.x &&\n+      targetNode.x &&\n+      sourceNode.y &&\n+      targetNode.y\n+    ) {\n+      const midX = (sourceNode.x + targetNode.x) / 2;\n+      const midY = (sourceNode.y + targetNode.y) / 2;\n+\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(midX, midY, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: midX, y: midY, z: 300 }, // new position\n+          { x: midX, y: midY, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused link\n+    setTimeout(() => {\n+      handleLinkHover(link);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleNodeClick = (node: CustomNode) => {\n+    setSelectedRelationship(null);\n+    setSelectedNode(node);\n+    setLinkedNodes(node.neighbors || []);\n+    setLinkedRelationships(node.links || []);\n+    setBottomDrawerOpen(true);\n+  };\n+\n+  const handleLinkClick = (link: CustomLink) => {\n+    setSelectedNode(null);\n+    setSelectedRelationship(link);\n+    const linkSource =\n+      typeof link.source === \"object\"\n+        ? (link.source as CustomNode).id\n+        : link.source;\n+    const linkTarget =\n+      typeof link.target === \"object\"\n+        ? (link.target as CustomNode).id\n+        : link.target;\n+    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n+    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n+    if (sourceNode && targetNode) {\n+      const linkedNodes = [sourceNode, targetNode];\n+      setLinkedNodes(linkedNodes);\n+      const linkedRelationships = [link];\n+      setLinkedRelationships(linkedRelationships);\n+      setBottomDrawerOpen(true);\n+    }\n+  };\n+\n+  const getBackgroundColor = () =>\n+    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n+\n+  const getLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n+\n+  const get3DLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+    if (!showLabels) return; // Only render the label if showLabels is true\n+\n+    const label = node.name || \"\";\n+    const fontSize = 4;\n+    const padding = 2;\n+    ctx.font = `${fontSize}px Sans-Serif`;\n+\n+    // Set the styles based on the theme mode\n+    const backgroundColor =\n+      theme.palette.mode === \"dark\"\n+        ? \"rgba(0, 0, 0, 0.6)\"\n+        : \"rgba(255, 255, 255, 0.6)\";\n+\n+    // Calculate label dimensions\n+    const textWidth = ctx.measureText(label).width;\n+    const boxWidth = textWidth + padding * 2;\n+    const boxHeight = fontSize + padding * 2;\n+\n+    if (node.x && node.y) {\n+      // Draw the background rectangle with rounded corners\n+      ctx.fillStyle = backgroundColor;\n+      ctx.beginPath();\n+      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n+      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2 + 5\n+      );\n+      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x + boxWidth / 2 - 5,\n+        node.y + boxHeight / 2\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2 - 5\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x - boxWidth / 2 + 5,\n+        node.y - boxHeight / 2\n+      );\n+      ctx.closePath();\n+      ctx.fill();\n+\n+      // Draw the text in the center of the node\n+      // ctx.fillStyle = textColor;\n+      ctx.fillStyle = node.color;\n+      ctx.textAlign = \"center\";\n+      ctx.textBaseline = \"middle\";\n+      ctx.fillText(label, node.x, node.y);\n+    }\n+  };\n+\n+  const nodeThreeObject = (node: CustomNode) => {\n+    if (!showLabels) {\n+      return new THREE.Object3D();\n+    }\n+\n+    try {\n+      const nodeEl = document.createElement(\"div\");\n+      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n+      nodeEl.style.color = node.color;\n+      nodeEl.style.padding = \"2px 4px\";\n+      nodeEl.style.borderRadius = \"4px\";\n+      nodeEl.style.fontSize = \"10px\";\n+      nodeEl.className = \"node-label\";\n+\n+      return new CSS2DObject(nodeEl);\n+    } catch (error) {\n+      console.error(\"Error creating 3D object:\", error);\n+      return new THREE.Object3D(); // Fallback in case of error\n+    }\n+  };\n+\n+  const localSearchEnabled = hasCovariates\n+    ? includeTextUnits && includeCommunities && includeCovariates\n+    : includeTextUnits && includeCommunities;\n+\n+  const clearSearchResults = () => {\n+    setGraphData(initialGraphData.current);\n+    setApiSearchResults(null);\n+  };\n+\n+  return (\n+    <Box\n+      sx={{\n+        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+        width: isFullscreen ? \"100vw\" : \"100%\",\n+        position: isFullscreen ? \"fixed\" : \"relative\",\n+        top: 0,\n+        left: 0,\n+        zIndex: isFullscreen ? 1300 : \"auto\",\n+        overflow: \"hidden\",\n+        margin: 0,\n+        padding: 0,\n+        backgroundColor: getBackgroundColor(),\n+      }}\n+    >\n+      <Box\n+        sx={{\n+          position: \"absolute\",\n+          top: 10,\n+          right: 10,\n+          zIndex: 1400,\n+          display: \"flex\",\n+          flexDirection: \"column\",\n+          gap: 2,\n+          alignItems: \"flex-end\",\n+        }}\n+      >\n+        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n+          <Button\n+            variant=\"contained\"\n+            onClick={toggleDrawer(true)}\n+            startIcon={<SearchIcon />}\n+          >\n+              {t('graphViewer.searchNodesLinks')}\n+          </Button>\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label={t('graphViewer.view3D')}\n+          /> */}\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label={t('graphViewer.view3D')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label=\"Show Relationship Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label=\"Show Highlight\"\n+          /> */}\n+          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n+            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n+              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n+            </IconButton>\n+          </Tooltip>\n+        </Box>\n+\n+        <Box\n+          sx={{\n+            display: \"flex\",\n+            flexDirection: \"column\",\n+            gap: 1,\n+            alignItems: \"flex-start\",\n+          }}\n+        >\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label=\"3D View\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label=\"Show Node Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label=\"Show Link Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label=\"Show Highlight\"\n+          />\n+        </Box>\n+\n+        <FormGroup>\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeDocuments}\n+                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n+                disabled={!hasDocuments || apiSearchResults !== null}\n+              />\n+            }\n+            label=\"Include Documents\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeTextUnits}\n+                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n+                onChange={() => {\n+                  if (!includeTextUnits) {\n+                    onIncludeTextUnitsChange(true);\n+                  } else if (includeTextUnits && !includeCovariates) {\n+                    onIncludeTextUnitsChange(false);\n+                  } else {\n+                    onIncludeTextUnitsChange(false);\n+                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n+                  }\n+                }}\n+                disabled={!hasTextUnits || apiSearchResults !== null}\n+              />\n+            }\n+            label=\"Include Text Units\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeCommunities}\n+                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n+                disabled={!hasCommunities || apiSearchResults !== null}\n+              />\n+            }\n+            label=\"Include Communities\"\n+          />\n+\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeCovariates}\n+                onChange={() => {\n+                  if (!includeCovariates) {\n+                    if (!includeTextUnits) {\n+                      onIncludeTextUnitsChange(true);\n+                    }\n+                    onIncludeCovariatesChange(true);\n+                  } else {\n+                    onIncludeCovariatesChange(false);\n+                  }\n+                }}\n+                disabled={!hasCovariates || apiSearchResults !== null}\n+              />\n+            }\n+            label=\"Include Covariates\"\n+          />\n+        </FormGroup>\n+      </Box>\n+\n+      <APISearchDrawer\n+        apiDrawerOpen={apiDrawerOpen}\n+        toggleDrawer={toggleApiDrawer}\n+        handleApiSearch={handleApiSearch}\n+        apiSearchResults={apiSearchResults}\n+        localSearchEnabled={localSearchEnabled}\n+        globalSearchEnabled={includeCommunities}\n+        hasCovariates={hasCovariates}\n+        serverUp={serverUp}\n+      />\n+\n+      <SearchDrawer\n+        searchTerm={searchTerm}\n+        setSearchTerm={setSearchTerm}\n+        handleSearch={handleSearch}\n+        searchResults={searchResults}\n+        rightDrawerOpen={rightDrawerOpen}\n+        toggleDrawer={toggleDrawer}\n+        handleFocusButtonClick={handleFocusButtonClick}\n+        handleNodeClick={handleNodeClick}\n+        handleFocusLinkClick={handleFocusLinkClick}\n+        handleLinkClick={handleLinkClick}\n+      />\n+\n+      <DetailDrawer\n+        bottomDrawerOpen={bottomDrawerOpen}\n+        setBottomDrawerOpen={setBottomDrawerOpen}\n+        selectedNode={selectedNode}\n+        selectedRelationship={selectedRelationship}\n+        linkedNodes={linkedNodes}\n+        linkedRelationships={linkedRelationships}\n+      />\n+\n+      {graphType === \"2d\" ? (\n+        <ForceGraph2D\n+          ref={graphRef}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          autoPauseRedraw={false}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          linkDirectionalParticleColor={\n+            showHighlight ? getlinkDirectionalParticleColor : undefined\n+          }\n+          nodeCanvasObjectMode={(node) =>\n+            showHighlight && highlightNodes.has(node)\n+              ? \"before\"\n+              : showLabels\n+              ? \"after\"\n+              : undefined\n+          }\n+          nodeCanvasObject={(node, ctx) => {\n+            if (showHighlight && highlightNodes.has(node)) {\n+              paintRing(node as CustomNode, ctx);\n+            }\n+            if (showLabels) {\n+              renderNodeLabel(node as CustomNode, ctx);\n+            }\n+          }}\n+          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n+          linkCanvasObject={(link, ctx) => {\n+            if (showLinkLabels) {\n+              const label = link.type || \"\";\n+              const fontSize = 4;\n+              ctx.font = `${fontSize}px Sans-Serif`;\n+              ctx.fillStyle =\n+                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n+              const source =\n+                typeof link.source !== \"string\"\n+                  ? (link.source as CustomNode)\n+                  : null;\n+              const target =\n+                typeof link.target !== \"string\"\n+                  ? (link.target as CustomNode)\n+                  : null;\n+\n+              if (\n+                source &&\n+                target &&\n+                source.x !== undefined &&\n+                target.x !== undefined &&\n+                source.y !== undefined &&\n+                target.y !== undefined\n+              ) {\n+                const textWidth = ctx.measureText(label).width;\n+                const posX = (source.x + target.x) / 2 - textWidth / 2;\n+                const posY = (source.y + target.y) / 2;\n+                ctx.fillText(label, posX, posY);\n+              }\n+            }\n+          }}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={getLinkColor}\n+        />\n+      ) : (\n+        <ForceGraph3D\n+          ref={graphRef}\n+          extraRenderers={extraRenderers}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          nodeThreeObject={nodeThreeObject}\n+          nodeThreeObjectExtend={true}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={get3DLinkColor}\n+          linkThreeObjectExtend={true}\n+          linkThreeObject={(link) => {\n+            if (!showLinkLabels) new THREE.Object3D();\n+            const sprite = new SpriteText(`${link.type}`);\n+            sprite.color = \"lightgrey\";\n+            sprite.textHeight = 1.5;\n+            return sprite;\n+          }}\n+          linkPositionUpdate={(sprite, { start, end }) => {\n+            if (!showLinkLabels) return;\n+\n+            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n+              acc[c as keyof Coords] =\n+                start[c as keyof Coords] +\n+                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n+              return acc;\n+            }, {} as Coords);\n+\n+            // Position sprite\n+            Object.assign(sprite.position, middlePos);\n+          }}\n+        />\n+      )}\n+      <Box\n+        sx={{\n+          position: \"absolute\",\n+          top: 10,\n+          left: 10,\n+          zIndex: 1400,\n+          display: \"flex\",\n+          flexDirection: \"column\",\n+          alignItems: \"flex-start\",\n+          gap: 1,\n+        }}\n+      >\n+        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n+        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Button\n+          variant=\"contained\"\n+          onClick={toggleApiDrawer(true)}\n+          startIcon={<SearchIcon />}\n+        >\n+          Ask Query (Local/Global Search)\n+        </Button>\n+        <Button\n+          variant=\"contained\"\n+          onClick={clearSearchResults}\n+          startIcon={<DeleteIcon />}\n+          color=\"warning\"\n+          disabled={apiSearchResults === null}\n+        >\n+          Clear Query Results\n+        </Button>\n+      </Box>\n+    </Box>\n+  );\n+};\n+\n+export default GraphViewer;\n"
                },
                {
                    "date": 1727241469668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n import { SearchResult } from \"../models/search-result\";\n import agent from \"../api/agent\";\n import APISearchDrawer from \"./APISearchDrawer\";\n import SpriteText from \"three-spritetext\";\n+import { useTranslation } from 'react-i18next';\n \n type Coords = {\n   x: number;\n   y: number;\n@@ -902,194 +903,4 @@\n   );\n };\n \n export default GraphViewer;\n-import { useTranslation } from 'react-i18next';\n-\n-const GraphViewer: React.FC<GraphViewerProps> = ({ ... }) => {\n-  const { t } = useTranslation();\n-\n-  // 组件代码...\n-\n-  return (\n-    <Box\n-      sx={{\n-        // 样式代码...\n-      }}\n-    >\n-      <Box\n-        sx={{\n-          position: \"absolute\",\n-          top: 10,\n-          right: 10,\n-          zIndex: 1400,\n-          display: \"flex\",\n-          flexDirection: \"column\",\n-          gap: 2,\n-          alignItems: \"flex-end\",\n-        }}\n-      >\n-        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n-          <Button\n-            variant=\"contained\"\n-            onClick={toggleDrawer(true)}\n-            startIcon={<SearchIcon />}\n-          >\n-            {t('graphViewer.searchNodesLinks')}\n-          </Button>\n-\n-          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n-            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n-              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n-            </IconButton>\n-          </Tooltip>\n-        </Box>\n-\n-        <Box\n-          sx={{\n-            display: \"flex\",\n-            flexDirection: \"column\",\n-            gap: 1,\n-            alignItems: \"flex-start\",\n-          }}\n-        >\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label={t('graphViewer.showNodeLabels')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label={t('graphViewer.showLinkLabels')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label={t('graphViewer.showHighlight')}\n-          />\n-        </Box>\n-\n-        <FormGroup>\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeDocuments}\n-                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n-                disabled={!hasDocuments || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeDocuments')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeTextUnits}\n-                onChange={() => {\n-                  if (!includeTextUnits) {\n-                    onIncludeTextUnitsChange(true);\n-                  } else if (includeTextUnits && !includeCovariates) {\n-                    onIncludeTextUnitsChange(false);\n-                  } else {\n-                    onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false);\n-                  }\n-                }}\n-                disabled={!hasTextUnits || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeTextUnits')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeCommunities}\n-                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n-                disabled={!hasCommunities || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeCommunities')}\n-          />\n-\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeCovariates}\n-                onChange={() => {\n-                  if (!includeCovariates) {\n-                    if (!includeTextUnits) {\n-                      onIncludeTextUnitsChange(true);\n-                    }\n-                    onIncludeCovariatesChange(true);\n-                  } else {\n-                    onIncludeCovariatesChange(false);\n-                  }\n-                }}\n-                disabled={!hasCovariates || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeCovariates')}\n-          />\n-        </FormGroup>\n-      </Box>\n-\n-      {/* 其他代码... */}\n-\n-      <Box\n-        sx={{\n-          position: \"absolute\",\n-          top: 10,\n-          left: 10,\n-          zIndex: 1400,\n-          display: \"flex\",\n-          flexDirection: \"column\",\n-          alignItems: \"flex-start\",\n-          gap: 1,\n-        }}\n-      >\n-        <Typography variant=\"body2\">\n-          {t('graphViewer.nodes')}: {nodeCount}\n-        </Typography>\n-        <Typography variant=\"body2\">\n-          {t('graphViewer.relationships')}: {linkCount}\n-        </Typography>\n-        <Button\n-          variant=\"contained\"\n-          onClick={toggleApiDrawer(true)}\n-          startIcon={<SearchIcon />}\n-        >\n-          {t('graphViewer.askQuery')}\n-        </Button>\n-        <Button\n-          variant=\"contained\"\n-          onClick={clearSearchResults}\n-          startIcon={<DeleteIcon />}\n-          color=\"warning\"\n-          disabled={apiSearchResults === null}\n-        >\n-          {t('graphViewer.clearQueryResults')}\n-        </Button>\n-      </Box>\n-    </Box>\n-  );\n-};\n"
                },
                {
                    "date": 1727241483258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n+  const { t } = useTranslation();\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727241496741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation();\n+  const { t } = useTranslation('graphViewer');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727241526546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -534,18 +534,9 @@\n \n   return (\n     <Box\n       sx={{\n-        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-        width: isFullscreen ? \"100vw\" : \"100%\",\n-        position: isFullscreen ? \"fixed\" : \"relative\",\n-        top: 0,\n-        left: 0,\n-        zIndex: isFullscreen ? 1300 : \"auto\",\n-        overflow: \"hidden\",\n-        margin: 0,\n-        padding: 0,\n-        backgroundColor: getBackgroundColor(),\n+        // 样式代码...\n       }}\n     >\n       <Box\n         sx={{\n@@ -564,46 +555,11 @@\n             variant=\"contained\"\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n-              {t('graphViewer.searchNodesLinks')}\n+            {t('graphViewer.searchNodesLinks')}\n           </Button>\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          /> */}\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label=\"Show Relationship Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label=\"Show Highlight\"\n-          /> */}\n+\n           <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n@@ -624,36 +580,36 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label=\"3D View\"\n+            label={t('graphViewer.view3D')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label=\"Show Node Labels\"\n+            label={t('graphViewer.showNodeLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLinkLabels}\n                 onChange={() => setShowLinkLabels(!showLinkLabels)}\n               />\n             }\n-            label=\"Show Link Labels\"\n+            label={t('graphViewer.showLinkLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showHighlight}\n                 onChange={() => setShowHighlight(!showHighlight)}\n               />\n             }\n-            label=\"Show Highlight\"\n+            label={t('graphViewer.showHighlight')}\n           />\n         </Box>\n \n         <FormGroup>\n@@ -664,29 +620,28 @@\n                 onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                 disabled={!hasDocuments || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Documents\"\n+            label={t('graphViewer.includeDocuments')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n                 checked={includeTextUnits}\n-                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n                 onChange={() => {\n                   if (!includeTextUnits) {\n                     onIncludeTextUnitsChange(true);\n                   } else if (includeTextUnits && !includeCovariates) {\n                     onIncludeTextUnitsChange(false);\n                   } else {\n                     onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n+                    onIncludeCovariatesChange(false);\n                   }\n                 }}\n                 disabled={!hasTextUnits || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Text Units\"\n+            label={t('graphViewer.includeTextUnits')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n@@ -694,9 +649,9 @@\n                 onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n                 disabled={!hasCommunities || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Communities\"\n+            label={t('graphViewer.includeCommunities')}\n           />\n \n           <FormControlLabel\n             control={\n@@ -714,162 +669,15 @@\n                 }}\n                 disabled={!hasCovariates || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Covariates\"\n+            label={t('graphViewer.includeCovariates')}\n           />\n         </FormGroup>\n       </Box>\n \n-      <APISearchDrawer\n-        apiDrawerOpen={apiDrawerOpen}\n-        toggleDrawer={toggleApiDrawer}\n-        handleApiSearch={handleApiSearch}\n-        apiSearchResults={apiSearchResults}\n-        localSearchEnabled={localSearchEnabled}\n-        globalSearchEnabled={includeCommunities}\n-        hasCovariates={hasCovariates}\n-        serverUp={serverUp}\n-      />\n+      {/* 其他代码... */}\n \n-      <SearchDrawer\n-        searchTerm={searchTerm}\n-        setSearchTerm={setSearchTerm}\n-        handleSearch={handleSearch}\n-        searchResults={searchResults}\n-        rightDrawerOpen={rightDrawerOpen}\n-        toggleDrawer={toggleDrawer}\n-        handleFocusButtonClick={handleFocusButtonClick}\n-        handleNodeClick={handleNodeClick}\n-        handleFocusLinkClick={handleFocusLinkClick}\n-        handleLinkClick={handleLinkClick}\n-      />\n-\n-      <DetailDrawer\n-        bottomDrawerOpen={bottomDrawerOpen}\n-        setBottomDrawerOpen={setBottomDrawerOpen}\n-        selectedNode={selectedNode}\n-        selectedRelationship={selectedRelationship}\n-        linkedNodes={linkedNodes}\n-        linkedRelationships={linkedRelationships}\n-      />\n-\n-      {graphType === \"2d\" ? (\n-        <ForceGraph2D\n-          ref={graphRef}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          autoPauseRedraw={false}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          linkDirectionalParticleColor={\n-            showHighlight ? getlinkDirectionalParticleColor : undefined\n-          }\n-          nodeCanvasObjectMode={(node) =>\n-            showHighlight && highlightNodes.has(node)\n-              ? \"before\"\n-              : showLabels\n-              ? \"after\"\n-              : undefined\n-          }\n-          nodeCanvasObject={(node, ctx) => {\n-            if (showHighlight && highlightNodes.has(node)) {\n-              paintRing(node as CustomNode, ctx);\n-            }\n-            if (showLabels) {\n-              renderNodeLabel(node as CustomNode, ctx);\n-            }\n-          }}\n-          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n-          linkCanvasObject={(link, ctx) => {\n-            if (showLinkLabels) {\n-              const label = link.type || \"\";\n-              const fontSize = 4;\n-              ctx.font = `${fontSize}px Sans-Serif`;\n-              ctx.fillStyle =\n-                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n-              const source =\n-                typeof link.source !== \"string\"\n-                  ? (link.source as CustomNode)\n-                  : null;\n-              const target =\n-                typeof link.target !== \"string\"\n-                  ? (link.target as CustomNode)\n-                  : null;\n-\n-              if (\n-                source &&\n-                target &&\n-                source.x !== undefined &&\n-                target.x !== undefined &&\n-                source.y !== undefined &&\n-                target.y !== undefined\n-              ) {\n-                const textWidth = ctx.measureText(label).width;\n-                const posX = (source.x + target.x) / 2 - textWidth / 2;\n-                const posY = (source.y + target.y) / 2;\n-                ctx.fillText(label, posX, posY);\n-              }\n-            }\n-          }}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={getLinkColor}\n-        />\n-      ) : (\n-        <ForceGraph3D\n-          ref={graphRef}\n-          extraRenderers={extraRenderers}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          nodeThreeObject={nodeThreeObject}\n-          nodeThreeObjectExtend={true}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={get3DLinkColor}\n-          linkThreeObjectExtend={true}\n-          linkThreeObject={(link) => {\n-            if (!showLinkLabels) new THREE.Object3D();\n-            const sprite = new SpriteText(`${link.type}`);\n-            sprite.color = \"lightgrey\";\n-            sprite.textHeight = 1.5;\n-            return sprite;\n-          }}\n-          linkPositionUpdate={(sprite, { start, end }) => {\n-            if (!showLinkLabels) return;\n-\n-            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n-              acc[c as keyof Coords] =\n-                start[c as keyof Coords] +\n-                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n-              return acc;\n-            }, {} as Coords);\n-\n-            // Position sprite\n-            Object.assign(sprite.position, middlePos);\n-          }}\n-        />\n-      )}\n       <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n@@ -880,28 +688,30 @@\n           alignItems: \"flex-start\",\n           gap: 1,\n         }}\n       >\n-        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n-        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Typography variant=\"body2\">\n+          {t('graphViewer.nodes')}: {nodeCount}\n+        </Typography>\n+        <Typography variant=\"body2\">\n+          {t('graphViewer.relationships')}: {linkCount}\n+        </Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n         >\n-          Ask Query (Local/Global Search)\n+          {t('graphViewer.askQuery')}\n         </Button>\n         <Button\n           variant=\"contained\"\n           onClick={clearSearchResults}\n           startIcon={<DeleteIcon />}\n           color=\"warning\"\n           disabled={apiSearchResults === null}\n         >\n-          Clear Query Results\n+          {t('graphViewer.clearQueryResults')}\n         </Button>\n       </Box>\n     </Box>\n   );\n };\n-\n-export default GraphViewer;\n"
                },
                {
                    "date": 1727241540576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -534,9 +534,18 @@\n \n   return (\n     <Box\n       sx={{\n-        // 样式代码...\n+        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+        width: isFullscreen ? \"100vw\" : \"100%\",\n+        position: isFullscreen ? \"fixed\" : \"relative\",\n+        top: 0,\n+        left: 0,\n+        zIndex: isFullscreen ? 1300 : \"auto\",\n+        overflow: \"hidden\",\n+        margin: 0,\n+        padding: 0,\n+        backgroundColor: getBackgroundColor(),\n       }}\n     >\n       <Box\n         sx={{\n@@ -555,11 +564,46 @@\n             variant=\"contained\"\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n-            {t('graphViewer.searchNodesLinks')}\n+              {t('graphViewer.searchNodesLinks')}\n           </Button>\n-\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label={t('graphViewer.view3D')}\n+          /> */}\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label={t('graphViewer.view3D')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label=\"Show Relationship Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label=\"Show Highlight\"\n+          /> */}\n           <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n@@ -580,36 +624,36 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label={t('graphViewer.view3D')}\n+            label=\"3D View\"\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label={t('graphViewer.showNodeLabels')}\n+            label=\"Show Node Labels\"\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLinkLabels}\n                 onChange={() => setShowLinkLabels(!showLinkLabels)}\n               />\n             }\n-            label={t('graphViewer.showLinkLabels')}\n+            label=\"Show Link Labels\"\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showHighlight}\n                 onChange={() => setShowHighlight(!showHighlight)}\n               />\n             }\n-            label={t('graphViewer.showHighlight')}\n+            label=\"Show Highlight\"\n           />\n         </Box>\n \n         <FormGroup>\n@@ -620,28 +664,29 @@\n                 onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                 disabled={!hasDocuments || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeDocuments')}\n+            label=\"Include Documents\"\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n                 checked={includeTextUnits}\n+                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n                 onChange={() => {\n                   if (!includeTextUnits) {\n                     onIncludeTextUnitsChange(true);\n                   } else if (includeTextUnits && !includeCovariates) {\n                     onIncludeTextUnitsChange(false);\n                   } else {\n                     onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false);\n+                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n                   }\n                 }}\n                 disabled={!hasTextUnits || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeTextUnits')}\n+            label=\"Include Text Units\"\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n@@ -649,9 +694,9 @@\n                 onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n                 disabled={!hasCommunities || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeCommunities')}\n+            label=\"Include Communities\"\n           />\n \n           <FormControlLabel\n             control={\n@@ -669,15 +714,162 @@\n                 }}\n                 disabled={!hasCovariates || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeCovariates')}\n+            label=\"Include Covariates\"\n           />\n         </FormGroup>\n       </Box>\n \n-      {/* 其他代码... */}\n+      <APISearchDrawer\n+        apiDrawerOpen={apiDrawerOpen}\n+        toggleDrawer={toggleApiDrawer}\n+        handleApiSearch={handleApiSearch}\n+        apiSearchResults={apiSearchResults}\n+        localSearchEnabled={localSearchEnabled}\n+        globalSearchEnabled={includeCommunities}\n+        hasCovariates={hasCovariates}\n+        serverUp={serverUp}\n+      />\n \n+      <SearchDrawer\n+        searchTerm={searchTerm}\n+        setSearchTerm={setSearchTerm}\n+        handleSearch={handleSearch}\n+        searchResults={searchResults}\n+        rightDrawerOpen={rightDrawerOpen}\n+        toggleDrawer={toggleDrawer}\n+        handleFocusButtonClick={handleFocusButtonClick}\n+        handleNodeClick={handleNodeClick}\n+        handleFocusLinkClick={handleFocusLinkClick}\n+        handleLinkClick={handleLinkClick}\n+      />\n+\n+      <DetailDrawer\n+        bottomDrawerOpen={bottomDrawerOpen}\n+        setBottomDrawerOpen={setBottomDrawerOpen}\n+        selectedNode={selectedNode}\n+        selectedRelationship={selectedRelationship}\n+        linkedNodes={linkedNodes}\n+        linkedRelationships={linkedRelationships}\n+      />\n+\n+      {graphType === \"2d\" ? (\n+        <ForceGraph2D\n+          ref={graphRef}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          autoPauseRedraw={false}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          linkDirectionalParticleColor={\n+            showHighlight ? getlinkDirectionalParticleColor : undefined\n+          }\n+          nodeCanvasObjectMode={(node) =>\n+            showHighlight && highlightNodes.has(node)\n+              ? \"before\"\n+              : showLabels\n+              ? \"after\"\n+              : undefined\n+          }\n+          nodeCanvasObject={(node, ctx) => {\n+            if (showHighlight && highlightNodes.has(node)) {\n+              paintRing(node as CustomNode, ctx);\n+            }\n+            if (showLabels) {\n+              renderNodeLabel(node as CustomNode, ctx);\n+            }\n+          }}\n+          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n+          linkCanvasObject={(link, ctx) => {\n+            if (showLinkLabels) {\n+              const label = link.type || \"\";\n+              const fontSize = 4;\n+              ctx.font = `${fontSize}px Sans-Serif`;\n+              ctx.fillStyle =\n+                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n+              const source =\n+                typeof link.source !== \"string\"\n+                  ? (link.source as CustomNode)\n+                  : null;\n+              const target =\n+                typeof link.target !== \"string\"\n+                  ? (link.target as CustomNode)\n+                  : null;\n+\n+              if (\n+                source &&\n+                target &&\n+                source.x !== undefined &&\n+                target.x !== undefined &&\n+                source.y !== undefined &&\n+                target.y !== undefined\n+              ) {\n+                const textWidth = ctx.measureText(label).width;\n+                const posX = (source.x + target.x) / 2 - textWidth / 2;\n+                const posY = (source.y + target.y) / 2;\n+                ctx.fillText(label, posX, posY);\n+              }\n+            }\n+          }}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={getLinkColor}\n+        />\n+      ) : (\n+        <ForceGraph3D\n+          ref={graphRef}\n+          extraRenderers={extraRenderers}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          nodeThreeObject={nodeThreeObject}\n+          nodeThreeObjectExtend={true}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={get3DLinkColor}\n+          linkThreeObjectExtend={true}\n+          linkThreeObject={(link) => {\n+            if (!showLinkLabels) new THREE.Object3D();\n+            const sprite = new SpriteText(`${link.type}`);\n+            sprite.color = \"lightgrey\";\n+            sprite.textHeight = 1.5;\n+            return sprite;\n+          }}\n+          linkPositionUpdate={(sprite, { start, end }) => {\n+            if (!showLinkLabels) return;\n+\n+            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n+              acc[c as keyof Coords] =\n+                start[c as keyof Coords] +\n+                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n+              return acc;\n+            }, {} as Coords);\n+\n+            // Position sprite\n+            Object.assign(sprite.position, middlePos);\n+          }}\n+        />\n+      )}\n       <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n@@ -688,30 +880,28 @@\n           alignItems: \"flex-start\",\n           gap: 1,\n         }}\n       >\n-        <Typography variant=\"body2\">\n-          {t('graphViewer.nodes')}: {nodeCount}\n-        </Typography>\n-        <Typography variant=\"body2\">\n-          {t('graphViewer.relationships')}: {linkCount}\n-        </Typography>\n+        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n+        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n         >\n-          {t('graphViewer.askQuery')}\n+          Ask Query (Local/Global Search)\n         </Button>\n         <Button\n           variant=\"contained\"\n           onClick={clearSearchResults}\n           startIcon={<DeleteIcon />}\n           color=\"warning\"\n           disabled={apiSearchResults === null}\n         >\n-          {t('graphViewer.clearQueryResults')}\n+          Clear Query Results\n         </Button>\n       </Box>\n     </Box>\n   );\n };\n+\n+export default GraphViewer;\n"
                },
                {
                    "date": 1727241564940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation('graphViewer');\n+  const { t } = useTranslation('');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727241570670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation('');\n+  const { t } = useTranslation('graphViewer');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n@@ -531,21 +531,12 @@\n     setGraphData(initialGraphData.current);\n     setApiSearchResults(null);\n   };\n \n-  return (\n+    return (\n     <Box\n       sx={{\n-        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-        width: isFullscreen ? \"100vw\" : \"100%\",\n-        position: isFullscreen ? \"fixed\" : \"relative\",\n-        top: 0,\n-        left: 0,\n-        zIndex: isFullscreen ? 1300 : \"auto\",\n-        overflow: \"hidden\",\n-        margin: 0,\n-        padding: 0,\n-        backgroundColor: getBackgroundColor(),\n+        // 样式代码...\n       }}\n     >\n       <Box\n         sx={{\n@@ -564,46 +555,11 @@\n             variant=\"contained\"\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n-              {t('graphViewer.searchNodesLinks')}\n+            {t('graphViewer.searchNodesLinks')}\n           </Button>\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          /> */}\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label=\"Show Relationship Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label=\"Show Highlight\"\n-          /> */}\n+\n           <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n@@ -624,36 +580,36 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label=\"3D View\"\n+            label={t('graphViewer.view3D')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label=\"Show Node Labels\"\n+            label={t('graphViewer.showNodeLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLinkLabels}\n                 onChange={() => setShowLinkLabels(!showLinkLabels)}\n               />\n             }\n-            label=\"Show Link Labels\"\n+            label={t('graphViewer.showLinkLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showHighlight}\n                 onChange={() => setShowHighlight(!showHighlight)}\n               />\n             }\n-            label=\"Show Highlight\"\n+            label={t('graphViewer.showHighlight')}\n           />\n         </Box>\n \n         <FormGroup>\n@@ -664,29 +620,28 @@\n                 onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                 disabled={!hasDocuments || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Documents\"\n+            label={t('graphViewer.includeDocuments')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n                 checked={includeTextUnits}\n-                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n                 onChange={() => {\n                   if (!includeTextUnits) {\n                     onIncludeTextUnitsChange(true);\n                   } else if (includeTextUnits && !includeCovariates) {\n                     onIncludeTextUnitsChange(false);\n                   } else {\n                     onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n+                    onIncludeCovariatesChange(false);\n                   }\n                 }}\n                 disabled={!hasTextUnits || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Text Units\"\n+            label={t('graphViewer.includeTextUnits')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n@@ -694,9 +649,9 @@\n                 onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n                 disabled={!hasCommunities || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Communities\"\n+            label={t('graphViewer.includeCommunities')}\n           />\n \n           <FormControlLabel\n             control={\n@@ -714,162 +669,15 @@\n                 }}\n                 disabled={!hasCovariates || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Covariates\"\n+            label={t('graphViewer.includeCovariates')}\n           />\n         </FormGroup>\n       </Box>\n \n-      <APISearchDrawer\n-        apiDrawerOpen={apiDrawerOpen}\n-        toggleDrawer={toggleApiDrawer}\n-        handleApiSearch={handleApiSearch}\n-        apiSearchResults={apiSearchResults}\n-        localSearchEnabled={localSearchEnabled}\n-        globalSearchEnabled={includeCommunities}\n-        hasCovariates={hasCovariates}\n-        serverUp={serverUp}\n-      />\n+      {/* 其他代码... */}\n \n-      <SearchDrawer\n-        searchTerm={searchTerm}\n-        setSearchTerm={setSearchTerm}\n-        handleSearch={handleSearch}\n-        searchResults={searchResults}\n-        rightDrawerOpen={rightDrawerOpen}\n-        toggleDrawer={toggleDrawer}\n-        handleFocusButtonClick={handleFocusButtonClick}\n-        handleNodeClick={handleNodeClick}\n-        handleFocusLinkClick={handleFocusLinkClick}\n-        handleLinkClick={handleLinkClick}\n-      />\n-\n-      <DetailDrawer\n-        bottomDrawerOpen={bottomDrawerOpen}\n-        setBottomDrawerOpen={setBottomDrawerOpen}\n-        selectedNode={selectedNode}\n-        selectedRelationship={selectedRelationship}\n-        linkedNodes={linkedNodes}\n-        linkedRelationships={linkedRelationships}\n-      />\n-\n-      {graphType === \"2d\" ? (\n-        <ForceGraph2D\n-          ref={graphRef}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          autoPauseRedraw={false}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          linkDirectionalParticleColor={\n-            showHighlight ? getlinkDirectionalParticleColor : undefined\n-          }\n-          nodeCanvasObjectMode={(node) =>\n-            showHighlight && highlightNodes.has(node)\n-              ? \"before\"\n-              : showLabels\n-              ? \"after\"\n-              : undefined\n-          }\n-          nodeCanvasObject={(node, ctx) => {\n-            if (showHighlight && highlightNodes.has(node)) {\n-              paintRing(node as CustomNode, ctx);\n-            }\n-            if (showLabels) {\n-              renderNodeLabel(node as CustomNode, ctx);\n-            }\n-          }}\n-          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n-          linkCanvasObject={(link, ctx) => {\n-            if (showLinkLabels) {\n-              const label = link.type || \"\";\n-              const fontSize = 4;\n-              ctx.font = `${fontSize}px Sans-Serif`;\n-              ctx.fillStyle =\n-                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n-              const source =\n-                typeof link.source !== \"string\"\n-                  ? (link.source as CustomNode)\n-                  : null;\n-              const target =\n-                typeof link.target !== \"string\"\n-                  ? (link.target as CustomNode)\n-                  : null;\n-\n-              if (\n-                source &&\n-                target &&\n-                source.x !== undefined &&\n-                target.x !== undefined &&\n-                source.y !== undefined &&\n-                target.y !== undefined\n-              ) {\n-                const textWidth = ctx.measureText(label).width;\n-                const posX = (source.x + target.x) / 2 - textWidth / 2;\n-                const posY = (source.y + target.y) / 2;\n-                ctx.fillText(label, posX, posY);\n-              }\n-            }\n-          }}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={getLinkColor}\n-        />\n-      ) : (\n-        <ForceGraph3D\n-          ref={graphRef}\n-          extraRenderers={extraRenderers}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          nodeThreeObject={nodeThreeObject}\n-          nodeThreeObjectExtend={true}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={get3DLinkColor}\n-          linkThreeObjectExtend={true}\n-          linkThreeObject={(link) => {\n-            if (!showLinkLabels) new THREE.Object3D();\n-            const sprite = new SpriteText(`${link.type}`);\n-            sprite.color = \"lightgrey\";\n-            sprite.textHeight = 1.5;\n-            return sprite;\n-          }}\n-          linkPositionUpdate={(sprite, { start, end }) => {\n-            if (!showLinkLabels) return;\n-\n-            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n-              acc[c as keyof Coords] =\n-                start[c as keyof Coords] +\n-                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n-              return acc;\n-            }, {} as Coords);\n-\n-            // Position sprite\n-            Object.assign(sprite.position, middlePos);\n-          }}\n-        />\n-      )}\n       <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n@@ -880,28 +688,31 @@\n           alignItems: \"flex-start\",\n           gap: 1,\n         }}\n       >\n-        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n-        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Typography variant=\"body2\">\n+          {t('graphViewer.nodes')}: {nodeCount}\n+        </Typography>\n+        <Typography variant=\"body2\">\n+          {t('graphViewer.relationships')}: {linkCount}\n+        </Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n         >\n-          Ask Query (Local/Global Search)\n+          {t('graphViewer.askQuery')}\n         </Button>\n         <Button\n           variant=\"contained\"\n           onClick={clearSearchResults}\n           startIcon={<DeleteIcon />}\n           color=\"warning\"\n           disabled={apiSearchResults === null}\n         >\n-          Clear Query Results\n+          {t('graphViewer.clearQueryResults')}\n         </Button>\n       </Box>\n     </Box>\n   );\n };\n-\n export default GraphViewer;\n"
                },
                {
                    "date": 1727242778910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -531,15 +531,27 @@\n     setGraphData(initialGraphData.current);\n     setApiSearchResults(null);\n   };\n \n-    return (\n-    <Box\n-      sx={{\n-        // 样式代码...\n-      }}\n+  return (\n+    <Drawer\n+      anchor=\"left\"\n+      open={apiDrawerOpen}\n+      onClose={toggleDrawer(false)}\n+      sx={{ zIndex: 1500 }}\n     >\n       <Box\n+        sx={{ width: \"60vw\", padding: 2, paddingTop: 6, position: \"relative\" }}\n+      >\n+        {/* Close Button at the top-right corner */}\n+        <IconButton\n+          onClick={toggleDrawer(false)}\n+          sx={{ position: \"absolute\", top: 8, right: 8 }}\n+        >\n+          <CloseIcon />\n+        </IconButton>\n+\n+      <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n           right: 10,\n@@ -714,5 +726,6 @@\n       </Box>\n     </Box>\n   );\n };\n+\n export default GraphViewer;\n"
                },
                {
                    "date": 1727242786099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -531,9 +531,9 @@\n     setGraphData(initialGraphData.current);\n     setApiSearchResults(null);\n   };\n \n-  return (\n+    return (\n     <Drawer\n       anchor=\"left\"\n       open={apiDrawerOpen}\n       onClose={toggleDrawer(false)}\n"
                },
                {
                    "date": 1727242795395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -531,27 +531,10 @@\n     setGraphData(initialGraphData.current);\n     setApiSearchResults(null);\n   };\n \n-    return (\n-    <Drawer\n-      anchor=\"left\"\n-      open={apiDrawerOpen}\n-      onClose={toggleDrawer(false)}\n-      sx={{ zIndex: 1500 }}\n-    >\n+  \n       <Box\n-        sx={{ width: \"60vw\", padding: 2, paddingTop: 6, position: \"relative\" }}\n-      >\n-        {/* Close Button at the top-right corner */}\n-        <IconButton\n-          onClick={toggleDrawer(false)}\n-          sx={{ position: \"absolute\", top: 8, right: 8 }}\n-        >\n-          <CloseIcon />\n-        </IconButton>\n-\n-      <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n           right: 10,\n"
                },
                {
                    "date": 1727242838394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,730 @@\n+import React, { useState, useCallback, useRef, useEffect } from \"react\";\n+import ForceGraph2D from \"react-force-graph-2d\";\n+import ForceGraph3D from \"react-force-graph-3d\";\n+import {\n+  CustomGraphData,\n+  CustomLink,\n+  CustomNode,\n+} from \"../models/custom-graph-data\";\n+import {\n+  Box,\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  FormGroup,\n+  IconButton,\n+  Switch,\n+  Tooltip,\n+  Typography,\n+  useTheme,\n+} from \"@mui/material\";\n+import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n+import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n+import SearchIcon from \"@mui/icons-material/Search\";\n+import DeleteIcon from \"@mui/icons-material/Delete\";\n+import Fuse from \"fuse.js\";\n+import {\n+  CSS2DRenderer,\n+  CSS2DObject,\n+} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n+import * as THREE from \"three\";\n+import { Renderer } from \"three\";\n+import SearchDrawer from \"./SearchDrawer\";\n+import DetailDrawer from \"./DetailDrawer\";\n+import { SearchResult } from \"../models/search-result\";\n+import agent from \"../api/agent\";\n+import APISearchDrawer from \"./APISearchDrawer\";\n+import SpriteText from \"three-spritetext\";\n+import { useTranslation } from 'react-i18next';\n+\n+type Coords = {\n+  x: number;\n+  y: number;\n+  z: number;\n+};\n+\n+interface GraphViewerProps {\n+  data: CustomGraphData;\n+  graphType: \"2d\" | \"3d\";\n+  isFullscreen: boolean;\n+  onToggleFullscreen: () => void;\n+  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n+  includeDocuments: boolean;\n+  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeTextUnits: boolean;\n+  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCommunities: boolean;\n+  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCovariates: boolean;\n+  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  hasDocuments: boolean;\n+  hasTextUnits: boolean;\n+  hasCommunities: boolean;\n+  hasCovariates: boolean;\n+}\n+\n+const NODE_R = 8;\n+\n+const GraphViewer: React.FC<GraphViewerProps> = ({\n+  data,\n+  graphType,\n+  isFullscreen,\n+  includeDocuments,\n+  onIncludeDocumentsChange,\n+  includeTextUnits,\n+  onIncludeTextUnitsChange,\n+  includeCommunities,\n+  onIncludeCommunitiesChange,\n+  includeCovariates,\n+  onIncludeCovariatesChange,\n+  onToggleFullscreen,\n+  onToggleGraphType,\n+  hasDocuments,\n+  hasTextUnits,\n+  hasCommunities,\n+  hasCovariates,\n+}) => {\n+  const { t } = useTranslation('graphViewer');\n+  const theme = useTheme();\n+  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n+    new Set()\n+  );\n+  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n+    new Set()\n+  );\n+  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n+  const [searchTerm, setSearchTerm] = useState(\"\");\n+  const [searchResults, setSearchResults] = useState<\n+    (CustomNode | CustomLink)[]\n+  >([]);\n+  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n+  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n+  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n+  const [selectedRelationship, setSelectedRelationship] =\n+    useState<CustomLink | null>(null);\n+  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n+  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n+    []\n+  );\n+  const [showLabels, setShowLabels] = useState(false);\n+  const [showLinkLabels, setShowLinkLabels] = useState(false);\n+  const [showHighlight, setShowHighlight] = useState(true);\n+  const graphRef = useRef<any>();\n+  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n+  const nodeCount = data.nodes.length;\n+  const linkCount = data.links.length;\n+\n+  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n+  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n+    null\n+  );\n+  const [serverUp, setServerUp] = useState<boolean>(false);\n+\n+  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n+\n+  const initialGraphData = useRef<CustomGraphData>(data);\n+\n+  useEffect(() => {\n+    setGraphData(data);\n+    initialGraphData.current = data;\n+  }, [data]);\n+\n+  useEffect(() => {\n+    checkServerStatus();\n+  }, []);\n+\n+  const toggleApiDrawer = (open: boolean) => () => {\n+    setApiDrawerOpen(open);\n+  };\n+\n+  const handleApiSearch = async (\n+    query: string,\n+    searchType: \"local\" | \"global\"\n+  ) => {\n+    try {\n+      const data: SearchResult =\n+        searchType === \"local\"\n+          ? await agent.Search.local(query)\n+          : await agent.Search.global(query);\n+\n+      setApiSearchResults(data);\n+      // Process the search result to update the graph data\n+      updateGraphData(data.context_data);\n+    } catch (err) {\n+      console.error(\"An error occurred during the API search.\", err);\n+    } finally {\n+    }\n+  };\n+\n+  const checkServerStatus = async () => {\n+    try {\n+      const response = await agent.Status.check();\n+      if (response.status === \"Server is up and running\") {\n+        setServerUp(true);\n+      } else {\n+        setServerUp(false);\n+      }\n+    } catch (error) {\n+      setServerUp(false);\n+    }\n+  };\n+\n+  const updateGraphData = (contextData: any) => {\n+    if (!contextData) return;\n+\n+    const newNodes: CustomNode[] = [];\n+    const newLinks: CustomLink[] = [];\n+\n+    const baseGraphData = initialGraphData.current;\n+\n+    // Assuming contextData has keys like entities, reports, relationships, sources\n+    Object.entries(contextData).forEach(([key, items]) => {\n+      if (Array.isArray(items)) {\n+        items.forEach((item) => {\n+          if (key === \"relationships\") {\n+            // Handle links\n+            const existingLink = baseGraphData.links.find(\n+              (link) =>\n+                link.human_readable_id?.toString() === item.id.toString()\n+            );\n+\n+            if (existingLink) {\n+              newLinks.push(existingLink);\n+            }\n+          } else if (key === \"entities\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                !node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"reports\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.uuid === item.id.toString()\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"sources\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.text?.toString() === item.text\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"covariates\" || key === \"claims\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          }\n+        });\n+      }\n+    });\n+\n+    // Update the graph data with the new nodes and links\n+    const updatedGraphData: CustomGraphData = {\n+      nodes: [...newNodes],\n+      links: [...newLinks],\n+    };\n+\n+    // Set the updated data to trigger re-render\n+    setGraphData(updatedGraphData);\n+  };\n+\n+  const fuse = new Fuse([...data.nodes, ...data.links], {\n+    keys: [\n+      \"uuid\",\n+      \"id\",\n+      \"name\",\n+      \"type\",\n+      \"description\",\n+      \"source\",\n+      \"target\",\n+      \"title\",\n+      \"summary\",\n+    ],\n+    threshold: 0.3,\n+  });\n+\n+  const handleNodeHover = useCallback((node: CustomNode | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (node) {\n+      newHighlightNodes.add(node);\n+      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+      node.links?.forEach((link) => newHighlightLinks.add(link));\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+    setHoverNode(node);\n+  }, []);\n+\n+  const handleLinkHover = useCallback((link: CustomLink | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (link) {\n+      newHighlightLinks.add(link);\n+      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n+      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+  }, []);\n+\n+  const paintRing = useCallback(\n+    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+      ctx.beginPath();\n+      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n+      if (highlightNodes.has(node)) {\n+        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n+        ctx.globalAlpha = 1; // full opacity\n+      } else {\n+        ctx.fillStyle = \"gray\";\n+        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n+      }\n+      ctx.fill();\n+      ctx.globalAlpha = 1; // reset alpha for other drawings\n+    },\n+    [hoverNode, highlightNodes]\n+  );\n+\n+  const handleSearch = () => {\n+    const results = fuse.search(searchTerm).map((result) => result.item);\n+    const nodeResults = results.filter((item) => \"neighbors\" in item);\n+    const linkResults = results.filter(\n+      (item) => \"source\" in item && \"target\" in item\n+    );\n+    setSearchResults([...nodeResults, ...linkResults]);\n+    setRightDrawerOpen(true);\n+  };\n+\n+  const toggleDrawer = (open: boolean) => () => {\n+    setRightDrawerOpen(open);\n+  };\n+\n+  const handleFocusButtonClick = (node: CustomNode) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    newHighlightNodes.add(node);\n+    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+    node.links?.forEach((link) => highlightLinks.add(link));\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHoverNode(node);\n+\n+    if (graphRef.current) {\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(node.x, node.y, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: node.x, y: node.y, z: 300 }, // new position\n+          { x: node.x, y: node.y, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused node\n+    setTimeout(() => {\n+      handleNodeHover(node);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleFocusLinkClick = (link: CustomLink) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    newHighlightLinks.add(link);\n+    let sourceNode: CustomNode | undefined;\n+    let targetNode: CustomNode | undefined;\n+\n+    if (typeof link.source !== \"string\") {\n+      newHighlightNodes.add(link.source);\n+      sourceNode = link.source;\n+    }\n+\n+    if (typeof link.target !== \"string\") {\n+      newHighlightNodes.add(link.target);\n+      targetNode = link.target;\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+\n+    if (\n+      graphRef.current &&\n+      sourceNode &&\n+      targetNode &&\n+      sourceNode.x &&\n+      targetNode.x &&\n+      sourceNode.y &&\n+      targetNode.y\n+    ) {\n+      const midX = (sourceNode.x + targetNode.x) / 2;\n+      const midY = (sourceNode.y + targetNode.y) / 2;\n+\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(midX, midY, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: midX, y: midY, z: 300 }, // new position\n+          { x: midX, y: midY, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused link\n+    setTimeout(() => {\n+      handleLinkHover(link);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleNodeClick = (node: CustomNode) => {\n+    setSelectedRelationship(null);\n+    setSelectedNode(node);\n+    setLinkedNodes(node.neighbors || []);\n+    setLinkedRelationships(node.links || []);\n+    setBottomDrawerOpen(true);\n+  };\n+\n+  const handleLinkClick = (link: CustomLink) => {\n+    setSelectedNode(null);\n+    setSelectedRelationship(link);\n+    const linkSource =\n+      typeof link.source === \"object\"\n+        ? (link.source as CustomNode).id\n+        : link.source;\n+    const linkTarget =\n+      typeof link.target === \"object\"\n+        ? (link.target as CustomNode).id\n+        : link.target;\n+    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n+    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n+    if (sourceNode && targetNode) {\n+      const linkedNodes = [sourceNode, targetNode];\n+      setLinkedNodes(linkedNodes);\n+      const linkedRelationships = [link];\n+      setLinkedRelationships(linkedRelationships);\n+      setBottomDrawerOpen(true);\n+    }\n+  };\n+\n+  const getBackgroundColor = () =>\n+    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n+\n+  const getLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n+\n+  const get3DLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+    if (!showLabels) return; // Only render the label if showLabels is true\n+\n+    const label = node.name || \"\";\n+    const fontSize = 4;\n+    const padding = 2;\n+    ctx.font = `${fontSize}px Sans-Serif`;\n+\n+    // Set the styles based on the theme mode\n+    const backgroundColor =\n+      theme.palette.mode === \"dark\"\n+        ? \"rgba(0, 0, 0, 0.6)\"\n+        : \"rgba(255, 255, 255, 0.6)\";\n+\n+    // Calculate label dimensions\n+    const textWidth = ctx.measureText(label).width;\n+    const boxWidth = textWidth + padding * 2;\n+    const boxHeight = fontSize + padding * 2;\n+\n+    if (node.x && node.y) {\n+      // Draw the background rectangle with rounded corners\n+      ctx.fillStyle = backgroundColor;\n+      ctx.beginPath();\n+      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n+      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2 + 5\n+      );\n+      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x + boxWidth / 2 - 5,\n+        node.y + boxHeight / 2\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2 - 5\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x - boxWidth / 2 + 5,\n+        node.y - boxHeight / 2\n+      );\n+      ctx.closePath();\n+      ctx.fill();\n+\n+      // Draw the text in the center of the node\n+      // ctx.fillStyle = textColor;\n+      ctx.fillStyle = node.color;\n+      ctx.textAlign = \"center\";\n+      ctx.textBaseline = \"middle\";\n+      ctx.fillText(label, node.x, node.y);\n+    }\n+  };\n+\n+  const nodeThreeObject = (node: CustomNode) => {\n+    if (!showLabels) {\n+      return new THREE.Object3D();\n+    }\n+\n+    try {\n+      const nodeEl = document.createElement(\"div\");\n+      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n+      nodeEl.style.color = node.color;\n+      nodeEl.style.padding = \"2px 4px\";\n+      nodeEl.style.borderRadius = \"4px\";\n+      nodeEl.style.fontSize = \"10px\";\n+      nodeEl.className = \"node-label\";\n+\n+      return new CSS2DObject(nodeEl);\n+    } catch (error) {\n+      console.error(\"Error creating 3D object:\", error);\n+      return new THREE.Object3D(); // Fallback in case of error\n+    }\n+  };\n+\n+  const localSearchEnabled = hasCovariates\n+    ? includeTextUnits && includeCommunities && includeCovariates\n+    : includeTextUnits && includeCommunities;\n+\n+  const clearSearchResults = () => {\n+    setGraphData(initialGraphData.current);\n+    setApiSearchResults(null);\n+  };\n+\n+  return (\n+    <Drawer\n+      anchor=\"left\"\n+      open={apiDrawerOpen}\n+      onClose={toggleDrawer(false)}\n+      sx={{ zIndex: 1500 }}\n+    >\n+      <Box\n+        sx={{ width: \"60vw\", padding: 2, paddingTop: 6, position: \"relative\" }}\n+      >\n+        {/* Close Button at the top-right corner */}\n+        <IconButton\n+          onClick={toggleDrawer(false)}\n+          sx={{ position: \"absolute\", top: 8, right: 8 }}\n+        >\n+          <CloseIcon />\n+        </IconButton>\n+\n+        {/* First Row: TextField */}\n+        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n+          <TextField\n+            value={query}\n+            onChange={(e) => setQuery(e.target.value)}\n+            // onKeyDown={async (e) => {\n+            //   if (e.key === \"Enter\" && !loadingLocal) {\n+            //     await handleSearch(\"local\"); // Default to global search on enter\n+            //   }\n+            // }}\n+            placeholder=\"Enter search query for API\"\n+            fullWidth\n+            margin=\"normal\"\n+          />\n+\n+          {/* Second Row: Buttons */}\n+          <Box sx={{ display: \"flex\", gap: 2 }}>\n+            <Button\n+              variant=\"contained\"\n+              sx={{ flex: 1, whiteSpace: \"normal\", textAlign: \"center\" }}\n+              onClick={() => handleSearch(\"local\")}\n+              disabled={\n+                !serverUp ||\n+                !localSearchEnabled ||\n+                loadingLocal ||\n+                loadingGlobal\n+              }\n+            >\n+              {loadingLocal ? <CircularProgress size={24} /> : \"Local Search\"}\n+            </Button>\n+            <Button\n+              variant=\"contained\"\n+              color=\"success\"\n+              sx={{ flex: 1, whiteSpace: \"normal\", textAlign: \"center\" }}\n+              onClick={() => handleSearch(\"global\")}\n+              disabled={\n+                !serverUp ||\n+                !globalSearchEnabled ||\n+                loadingLocal ||\n+                loadingGlobal\n+              }\n+            >\n+              {loadingGlobal ? <CircularProgress size={24} /> : \"Global Search\"}\n+            </Button>\n+          </Box>\n+\n+          {!serverUp && (\n+            <Alert severity=\"error\" sx={{ mt: 1 }}>\n+              Server is not running. Please start the server to use the API.\n+              Follow the instructions at{\" \"}\n+              <Link\n+                href=\"https://github.com/noworneverev/graphrag-api\"\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+              >\n+                graphrag-api\n+              </Link>\n+              .\n+            </Alert>\n+          )}\n+          {!localSearchEnabled && (\n+            <Alert severity=\"warning\" sx={{ mt: 1 }}>\n+              Please enable \"Include Text Unit\" and \"Include Communities\"\n+              {hasCovariates && ', and \"Include Covariates\"'} to use Local\n+              Search.\n+            </Alert>\n+          )}\n+          {!globalSearchEnabled && (\n+            <Alert severity=\"warning\" sx={{ mt: 1 }}>\n+              Please enable \"Include Communities\" to use Global Search.\n+            </Alert>\n+          )}\n+        </Box>\n+\n+        {apiSearchResults && (\n+          <>\n+            {/* Search Results Card */}\n+            <Card sx={{ marginTop: 2 }}>\n+              <CardHeader title=\"Search Results\" />\n+              <CardContent>\n+                <Typography variant=\"body1\" sx={{ whiteSpace: \"pre-wrap\" }}>\n+                  {apiSearchResults.response}\n+                </Typography>\n+              </CardContent>\n+            </Card>\n+\n+            {/* Metadata Card */}\n+            <Card sx={{ marginTop: 2 }}>\n+              <CardHeader title=\"Metadata\" />\n+              <CardContent>\n+                <Typography variant=\"body2\">\n+                  <strong>Completion Time:</strong>{\" \"}\n+                  {apiSearchResults.completion_time} ms\n+                </Typography>\n+                <Typography variant=\"body2\">\n+                  <strong>LLM Calls:</strong> {apiSearchResults.llm_calls}\n+                </Typography>\n+                <Typography variant=\"body2\">\n+                  <strong>Prompt Tokens:</strong>{\" \"}\n+                  {apiSearchResults.prompt_tokens}\n+                </Typography>\n+              </CardContent>\n+            </Card>\n+\n+            {/* Context Data Tables */}\n+            {apiSearchResults &&\n+              apiSearchResults.context_data &&\n+              Object.entries(apiSearchResults.context_data).map(\n+                ([key, data], index) => (\n+                  <Card sx={{ marginTop: 2 }} key={index}>\n+                    <CardHeader\n+                      title={key.charAt(0).toUpperCase() + key.slice(1)}\n+                      action={\n+                        <IconButton onClick={() => toggleTable(key)}>\n+                          {expandedTables[key] ? (\n+                            <ExpandLessIcon />\n+                          ) : (\n+                            <ExpandMoreIcon />\n+                          )}\n+                        </IconButton>\n+                      }\n+                    />\n+                    <Collapse\n+                      in={expandedTables[key]}\n+                      timeout=\"auto\"\n+                      unmountOnExit\n+                    >\n+                      <CardContent>\n+                        {Array.isArray(data) && data.length > 0 ? (\n+                          <TableContainer component={Paper}>\n+                            <Table size=\"small\">\n+                              <TableHead>\n+                                <TableRow>\n+                                  {Object.keys(data[0]).map(\n+                                    (columnName, idx) => (\n+                                      <TableCell key={idx}>\n+                                        {columnName.charAt(0).toUpperCase() +\n+                                          columnName.slice(1)}\n+                                      </TableCell>\n+                                    )\n+                                  )}\n+                                </TableRow>\n+                              </TableHead>\n+                              <TableBody>\n+                                {data.map((row, rowIndex) => (\n+                                  <TableRow key={rowIndex}>\n+                                    {Object.values(row).map(\n+                                      (value, cellIndex) => (\n+                                        <TableCell key={cellIndex}>\n+                                          {typeof value === \"string\"\n+                                            ? value\n+                                            : JSON.stringify(value, null, 2)}\n+                                        </TableCell>\n+                                      )\n+                                    )}\n+                                  </TableRow>\n+                                ))}\n+                              </TableBody>\n+                            </Table>\n+                          </TableContainer>\n+                        ) : (\n+                          <Typography variant=\"body2\" color=\"textSecondary\">\n+                            No data available\n+                          </Typography>\n+                        )}\n+                      </CardContent>\n+                    </Collapse>\n+                  </Card>\n+                )\n+              )}\n+          </>\n+        )}\n+      </Box>\n+    </Drawer>\n+  );\n+};\n+\n+export default GraphViewer;\n"
                },
                {
                    "date": 1727242915988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n import { SearchResult } from \"../models/search-result\";\n import agent from \"../api/agent\";\n import APISearchDrawer from \"./APISearchDrawer\";\n import SpriteText from \"three-spritetext\";\n-import { useTranslation } from 'react-i18next';\n \n type Coords = {\n   x: number;\n   y: number;\n@@ -83,9 +82,8 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation('graphViewer');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n@@ -532,739 +530,23 @@\n     setApiSearchResults(null);\n   };\n \n   return (\n-    <Drawer\n-      anchor=\"left\"\n-      open={apiDrawerOpen}\n-      onClose={toggleDrawer(false)}\n-      sx={{ zIndex: 1500 }}\n+    <Box\n+      sx={{\n+        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+        width: isFullscreen ? \"100vw\" : \"100%\",\n+        position: isFullscreen ? \"fixed\" : \"relative\",\n+        top: 0,\n+        left: 0,\n+        zIndex: isFullscreen ? 1300 : \"auto\",\n+        overflow: \"hidden\",\n+        margin: 0,\n+        padding: 0,\n+        backgroundColor: getBackgroundColor(),\n+      }}\n     >\n       <Box\n-        sx={{ width: \"60vw\", padding: 2, paddingTop: 6, position: \"relative\" }}\n-      >\n-        {/* Close Button at the top-right corner */}\n-        <IconButton\n-          onClick={toggleDrawer(false)}\n-          sx={{ position: \"absolute\", top: 8, right: 8 }}\n-        >\n-          <CloseIcon />\n-        </IconButton>\n-\n-        {/* First Row: TextField */}\n-        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n-          <TextField\n-            value={query}\n-            onChange={(e) => setQuery(e.target.value)}\n-            // onKeyDown={async (e) => {\n-            //   if (e.key === \"Enter\" && !loadingLocal) {\n-            //     await handleSearch(\"local\"); // Default to global search on enter\n-            //   }\n-            // }}\n-            placeholder=\"Enter search query for API\"\n-            fullWidth\n-            margin=\"normal\"\n-          />\n-\n-          {/* Second Row: Buttons */}\n-          <Box sx={{ display: \"flex\", gap: 2 }}>\n-            <Button\n-              variant=\"contained\"\n-              sx={{ flex: 1, whiteSpace: \"normal\", textAlign: \"center\" }}\n-              onClick={() => handleSearch(\"local\")}\n-              disabled={\n-                !serverUp ||\n-                !localSearchEnabled ||\n-                loadingLocal ||\n-                loadingGlobal\n-              }\n-            >\n-              {loadingLocal ? <CircularProgress size={24} /> : \"Local Search\"}\n-            </Button>\n-            <Button\n-              variant=\"contained\"\n-              color=\"success\"\n-              sx={{ flex: 1, whiteSpace: \"normal\", textAlign: \"center\" }}\n-              onClick={() => handleSearch(\"global\")}\n-              disabled={\n-                !serverUp ||\n-                !globalSearchEnabled ||\n-                loadingLocal ||\n-                loadingGlobal\n-              }\n-            >\n-              {loadingGlobal ? <CircularProgress size={24} /> : \"Global Search\"}\n-            </Button>\n-          </Box>\n-\n-          {!serverUp && (\n-            <Alert severity=\"error\" sx={{ mt: 1 }}>\n-              Server is not running. Please start the server to use the API.\n-              Follow the instructions at{\" \"}\n-              <Link\n-                href=\"https://github.com/noworneverev/graphrag-api\"\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-              >\n-                graphrag-api\n-              </Link>\n-              .\n-            </Alert>\n-          )}\n-          {!localSearchEnabled && (\n-            <Alert severity=\"warning\" sx={{ mt: 1 }}>\n-              Please enable \"Include Text Unit\" and \"Include Communities\"\n-              {hasCovariates && ', and \"Include Covariates\"'} to use Local\n-              Search.\n-            </Alert>\n-          )}\n-          {!globalSearchEnabled && (\n-            <Alert severity=\"warning\" sx={{ mt: 1 }}>\n-              Please enable \"Include Communities\" to use Global Search.\n-            </Alert>\n-          )}\n-        </Box>\n-\n-        {apiSearchResults && (\n-          <>\n-            {/* Search Results Card */}\n-            <Card sx={{ marginTop: 2 }}>\n-              <CardHeader title=\"Search Results\" />\n-              <CardContent>\n-                <Typography variant=\"body1\" sx={{ whiteSpace: \"pre-wrap\" }}>\n-                  {apiSearchResults.response}\n-                </Typography>\n-              </CardContent>\n-            </Card>\n-\n-            {/* Metadata Card */}\n-            <Card sx={{ marginTop: 2 }}>\n-              <CardHeader title=\"Metadata\" />\n-              <CardContent>\n-                <Typography variant=\"body2\">\n-                  <strong>Completion Time:</strong>{\" \"}\n-                  {apiSearchResults.completion_time} ms\n-                </Typography>\n-                <Typography variant=\"body2\">\n-                  <strong>LLM Calls:</strong> {apiSearchResults.llm_calls}\n-                </Typography>\n-                <Typography variant=\"body2\">\n-                  <strong>Prompt Tokens:</strong>{\" \"}\n-                  {apiSearchResults.prompt_tokens}\n-                </Typography>\n-              </CardContent>\n-            </Card>\n-\n-            {/* Context Data Tables */}\n-            {apiSearchResults &&\n-              apiSearchResults.context_data &&\n-              Object.entries(apiSearchResults.context_data).map(\n-                ([key, data], index) => (\n-                  <Card sx={{ marginTop: 2 }} key={index}>\n-                    <CardHeader\n-                      title={key.charAt(0).toUpperCase() + key.slice(1)}\n-                      action={\n-                        <IconButton onClick={() => toggleTable(key)}>\n-                          {expandedTables[key] ? (\n-                            <ExpandLessIcon />\n-                          ) : (\n-                            <ExpandMoreIcon />\n-                          )}\n-                        </IconButton>\n-                      }\n-                    />\n-                    <Collapse\n-                      in={expandedTables[key]}\n-                      timeout=\"auto\"\n-                      unmountOnExit\n-                    >\n-                      <CardContent>\n-                        {Array.isArray(data) && data.length > 0 ? (\n-                          <TableContainer component={Paper}>\n-                            <Table size=\"small\">\n-                              <TableHead>\n-                                <TableRow>\n-                                  {Object.keys(data[0]).map(\n-                                    (columnName, idx) => (\n-                                      <TableCell key={idx}>\n-                                        {columnName.charAt(0).toUpperCase() +\n-                                          columnName.slice(1)}\n-                                      </TableCell>\n-                                    )\n-                                  )}\n-                                </TableRow>\n-                              </TableHead>\n-                              <TableBody>\n-                                {data.map((row, rowIndex) => (\n-                                  <TableRow key={rowIndex}>\n-                                    {Object.values(row).map(\n-                                      (value, cellIndex) => (\n-                                        <TableCell key={cellIndex}>\n-                                          {typeof value === \"string\"\n-                                            ? value\n-                                            : JSON.stringify(value, null, 2)}\n-                                        </TableCell>\n-                                      )\n-                                    )}\n-                                  </TableRow>\n-                                ))}\n-                              </TableBody>\n-                            </Table>\n-                          </TableContainer>\n-                        ) : (\n-                          <Typography variant=\"body2\" color=\"textSecondary\">\n-                            No data available\n-                          </Typography>\n-                        )}\n-                      </CardContent>\n-                    </Collapse>\n-                  </Card>\n-                )\n-              )}\n-          </>\n-        )}\n-      </Box>\n-    </Drawer>\n-  );\n-};\n-\n-export default GraphViewer;\n-import React, { useState, useCallback, useRef, useEffect } from \"react\";\n-import ForceGraph2D from \"react-force-graph-2d\";\n-import ForceGraph3D from \"react-force-graph-3d\";\n-import {\n-  CustomGraphData,\n-  CustomLink,\n-  CustomNode,\n-} from \"../models/custom-graph-data\";\n-import {\n-  Box,\n-  Button,\n-  Checkbox,\n-  FormControlLabel,\n-  FormGroup,\n-  IconButton,\n-  Switch,\n-  Tooltip,\n-  Typography,\n-  useTheme,\n-} from \"@mui/material\";\n-import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n-import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n-import SearchIcon from \"@mui/icons-material/Search\";\n-import DeleteIcon from \"@mui/icons-material/Delete\";\n-import Fuse from \"fuse.js\";\n-import {\n-  CSS2DRenderer,\n-  CSS2DObject,\n-} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n-import * as THREE from \"three\";\n-import { Renderer } from \"three\";\n-import SearchDrawer from \"./SearchDrawer\";\n-import DetailDrawer from \"./DetailDrawer\";\n-import { SearchResult } from \"../models/search-result\";\n-import agent from \"../api/agent\";\n-import APISearchDrawer from \"./APISearchDrawer\";\n-import SpriteText from \"three-spritetext\";\n-import { useTranslation } from 'react-i18next';\n-\n-type Coords = {\n-  x: number;\n-  y: number;\n-  z: number;\n-};\n-\n-interface GraphViewerProps {\n-  data: CustomGraphData;\n-  graphType: \"2d\" | \"3d\";\n-  isFullscreen: boolean;\n-  onToggleFullscreen: () => void;\n-  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n-  includeDocuments: boolean;\n-  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeTextUnits: boolean;\n-  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCommunities: boolean;\n-  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCovariates: boolean;\n-  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  hasDocuments: boolean;\n-  hasTextUnits: boolean;\n-  hasCommunities: boolean;\n-  hasCovariates: boolean;\n-}\n-\n-const NODE_R = 8;\n-\n-const GraphViewer: React.FC<GraphViewerProps> = ({\n-  data,\n-  graphType,\n-  isFullscreen,\n-  includeDocuments,\n-  onIncludeDocumentsChange,\n-  includeTextUnits,\n-  onIncludeTextUnitsChange,\n-  includeCommunities,\n-  onIncludeCommunitiesChange,\n-  includeCovariates,\n-  onIncludeCovariatesChange,\n-  onToggleFullscreen,\n-  onToggleGraphType,\n-  hasDocuments,\n-  hasTextUnits,\n-  hasCommunities,\n-  hasCovariates,\n-}) => {\n-  const { t } = useTranslation('graphViewer');\n-  const theme = useTheme();\n-  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n-    new Set()\n-  );\n-  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n-    new Set()\n-  );\n-  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n-  const [searchTerm, setSearchTerm] = useState(\"\");\n-  const [searchResults, setSearchResults] = useState<\n-    (CustomNode | CustomLink)[]\n-  >([]);\n-  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n-  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n-  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n-  const [selectedRelationship, setSelectedRelationship] =\n-    useState<CustomLink | null>(null);\n-  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n-  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n-    []\n-  );\n-  const [showLabels, setShowLabels] = useState(false);\n-  const [showLinkLabels, setShowLinkLabels] = useState(false);\n-  const [showHighlight, setShowHighlight] = useState(true);\n-  const graphRef = useRef<any>();\n-  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n-  const nodeCount = data.nodes.length;\n-  const linkCount = data.links.length;\n-\n-  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n-  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n-    null\n-  );\n-  const [serverUp, setServerUp] = useState<boolean>(false);\n-\n-  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n-\n-  const initialGraphData = useRef<CustomGraphData>(data);\n-\n-  useEffect(() => {\n-    setGraphData(data);\n-    initialGraphData.current = data;\n-  }, [data]);\n-\n-  useEffect(() => {\n-    checkServerStatus();\n-  }, []);\n-\n-  const toggleApiDrawer = (open: boolean) => () => {\n-    setApiDrawerOpen(open);\n-  };\n-\n-  const handleApiSearch = async (\n-    query: string,\n-    searchType: \"local\" | \"global\"\n-  ) => {\n-    try {\n-      const data: SearchResult =\n-        searchType === \"local\"\n-          ? await agent.Search.local(query)\n-          : await agent.Search.global(query);\n-\n-      setApiSearchResults(data);\n-      // Process the search result to update the graph data\n-      updateGraphData(data.context_data);\n-    } catch (err) {\n-      console.error(\"An error occurred during the API search.\", err);\n-    } finally {\n-    }\n-  };\n-\n-  const checkServerStatus = async () => {\n-    try {\n-      const response = await agent.Status.check();\n-      if (response.status === \"Server is up and running\") {\n-        setServerUp(true);\n-      } else {\n-        setServerUp(false);\n-      }\n-    } catch (error) {\n-      setServerUp(false);\n-    }\n-  };\n-\n-  const updateGraphData = (contextData: any) => {\n-    if (!contextData) return;\n-\n-    const newNodes: CustomNode[] = [];\n-    const newLinks: CustomLink[] = [];\n-\n-    const baseGraphData = initialGraphData.current;\n-\n-    // Assuming contextData has keys like entities, reports, relationships, sources\n-    Object.entries(contextData).forEach(([key, items]) => {\n-      if (Array.isArray(items)) {\n-        items.forEach((item) => {\n-          if (key === \"relationships\") {\n-            // Handle links\n-            const existingLink = baseGraphData.links.find(\n-              (link) =>\n-                link.human_readable_id?.toString() === item.id.toString()\n-            );\n-\n-            if (existingLink) {\n-              newLinks.push(existingLink);\n-            }\n-          } else if (key === \"entities\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                !node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"reports\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.uuid === item.id.toString()\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"sources\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.text?.toString() === item.text\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"covariates\" || key === \"claims\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          }\n-        });\n-      }\n-    });\n-\n-    // Update the graph data with the new nodes and links\n-    const updatedGraphData: CustomGraphData = {\n-      nodes: [...newNodes],\n-      links: [...newLinks],\n-    };\n-\n-    // Set the updated data to trigger re-render\n-    setGraphData(updatedGraphData);\n-  };\n-\n-  const fuse = new Fuse([...data.nodes, ...data.links], {\n-    keys: [\n-      \"uuid\",\n-      \"id\",\n-      \"name\",\n-      \"type\",\n-      \"description\",\n-      \"source\",\n-      \"target\",\n-      \"title\",\n-      \"summary\",\n-    ],\n-    threshold: 0.3,\n-  });\n-\n-  const handleNodeHover = useCallback((node: CustomNode | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (node) {\n-      newHighlightNodes.add(node);\n-      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-      node.links?.forEach((link) => newHighlightLinks.add(link));\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-    setHoverNode(node);\n-  }, []);\n-\n-  const handleLinkHover = useCallback((link: CustomLink | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (link) {\n-      newHighlightLinks.add(link);\n-      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n-      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-  }, []);\n-\n-  const paintRing = useCallback(\n-    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-      ctx.beginPath();\n-      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n-      if (highlightNodes.has(node)) {\n-        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n-        ctx.globalAlpha = 1; // full opacity\n-      } else {\n-        ctx.fillStyle = \"gray\";\n-        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n-      }\n-      ctx.fill();\n-      ctx.globalAlpha = 1; // reset alpha for other drawings\n-    },\n-    [hoverNode, highlightNodes]\n-  );\n-\n-  const handleSearch = () => {\n-    const results = fuse.search(searchTerm).map((result) => result.item);\n-    const nodeResults = results.filter((item) => \"neighbors\" in item);\n-    const linkResults = results.filter(\n-      (item) => \"source\" in item && \"target\" in item\n-    );\n-    setSearchResults([...nodeResults, ...linkResults]);\n-    setRightDrawerOpen(true);\n-  };\n-\n-  const toggleDrawer = (open: boolean) => () => {\n-    setRightDrawerOpen(open);\n-  };\n-\n-  const handleFocusButtonClick = (node: CustomNode) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    newHighlightNodes.add(node);\n-    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-    node.links?.forEach((link) => highlightLinks.add(link));\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHoverNode(node);\n-\n-    if (graphRef.current) {\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(node.x, node.y, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: node.x, y: node.y, z: 300 }, // new position\n-          { x: node.x, y: node.y, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused node\n-    setTimeout(() => {\n-      handleNodeHover(node);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleFocusLinkClick = (link: CustomLink) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    newHighlightLinks.add(link);\n-    let sourceNode: CustomNode | undefined;\n-    let targetNode: CustomNode | undefined;\n-\n-    if (typeof link.source !== \"string\") {\n-      newHighlightNodes.add(link.source);\n-      sourceNode = link.source;\n-    }\n-\n-    if (typeof link.target !== \"string\") {\n-      newHighlightNodes.add(link.target);\n-      targetNode = link.target;\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-\n-    if (\n-      graphRef.current &&\n-      sourceNode &&\n-      targetNode &&\n-      sourceNode.x &&\n-      targetNode.x &&\n-      sourceNode.y &&\n-      targetNode.y\n-    ) {\n-      const midX = (sourceNode.x + targetNode.x) / 2;\n-      const midY = (sourceNode.y + targetNode.y) / 2;\n-\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(midX, midY, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: midX, y: midY, z: 300 }, // new position\n-          { x: midX, y: midY, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused link\n-    setTimeout(() => {\n-      handleLinkHover(link);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleNodeClick = (node: CustomNode) => {\n-    setSelectedRelationship(null);\n-    setSelectedNode(node);\n-    setLinkedNodes(node.neighbors || []);\n-    setLinkedRelationships(node.links || []);\n-    setBottomDrawerOpen(true);\n-  };\n-\n-  const handleLinkClick = (link: CustomLink) => {\n-    setSelectedNode(null);\n-    setSelectedRelationship(link);\n-    const linkSource =\n-      typeof link.source === \"object\"\n-        ? (link.source as CustomNode).id\n-        : link.source;\n-    const linkTarget =\n-      typeof link.target === \"object\"\n-        ? (link.target as CustomNode).id\n-        : link.target;\n-    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n-    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n-    if (sourceNode && targetNode) {\n-      const linkedNodes = [sourceNode, targetNode];\n-      setLinkedNodes(linkedNodes);\n-      const linkedRelationships = [link];\n-      setLinkedRelationships(linkedRelationships);\n-      setBottomDrawerOpen(true);\n-    }\n-  };\n-\n-  const getBackgroundColor = () =>\n-    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n-\n-  const getLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n-\n-  const get3DLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-    if (!showLabels) return; // Only render the label if showLabels is true\n-\n-    const label = node.name || \"\";\n-    const fontSize = 4;\n-    const padding = 2;\n-    ctx.font = `${fontSize}px Sans-Serif`;\n-\n-    // Set the styles based on the theme mode\n-    const backgroundColor =\n-      theme.palette.mode === \"dark\"\n-        ? \"rgba(0, 0, 0, 0.6)\"\n-        : \"rgba(255, 255, 255, 0.6)\";\n-\n-    // Calculate label dimensions\n-    const textWidth = ctx.measureText(label).width;\n-    const boxWidth = textWidth + padding * 2;\n-    const boxHeight = fontSize + padding * 2;\n-\n-    if (node.x && node.y) {\n-      // Draw the background rectangle with rounded corners\n-      ctx.fillStyle = backgroundColor;\n-      ctx.beginPath();\n-      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n-      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2 + 5\n-      );\n-      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x + boxWidth / 2 - 5,\n-        node.y + boxHeight / 2\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2 - 5\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x - boxWidth / 2 + 5,\n-        node.y - boxHeight / 2\n-      );\n-      ctx.closePath();\n-      ctx.fill();\n-\n-      // Draw the text in the center of the node\n-      // ctx.fillStyle = textColor;\n-      ctx.fillStyle = node.color;\n-      ctx.textAlign = \"center\";\n-      ctx.textBaseline = \"middle\";\n-      ctx.fillText(label, node.x, node.y);\n-    }\n-  };\n-\n-  const nodeThreeObject = (node: CustomNode) => {\n-    if (!showLabels) {\n-      return new THREE.Object3D();\n-    }\n-\n-    try {\n-      const nodeEl = document.createElement(\"div\");\n-      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n-      nodeEl.style.color = node.color;\n-      nodeEl.style.padding = \"2px 4px\";\n-      nodeEl.style.borderRadius = \"4px\";\n-      nodeEl.style.fontSize = \"10px\";\n-      nodeEl.className = \"node-label\";\n-\n-      return new CSS2DObject(nodeEl);\n-    } catch (error) {\n-      console.error(\"Error creating 3D object:\", error);\n-      return new THREE.Object3D(); // Fallback in case of error\n-    }\n-  };\n-\n-  const localSearchEnabled = hasCovariates\n-    ? includeTextUnits && includeCommunities && includeCovariates\n-    : includeTextUnits && includeCommunities;\n-\n-  const clearSearchResults = () => {\n-    setGraphData(initialGraphData.current);\n-    setApiSearchResults(null);\n-  };\n-\n-  \n-      <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n           right: 10,\n@@ -1280,12 +562,47 @@\n             variant=\"contained\"\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n-            {t('graphViewer.searchNodesLinks')}\n+            Search Nodes/Links\n           </Button>\n-\n-          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label=\"3D View\"\n+          /> */}\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label=\"Show Node Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label=\"Show Relationship Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label=\"Show Highlight\"\n+          /> */}\n+          <Tooltip title={isFullscreen ? \"Exit Full Screen\" : \"Full Screen\"}>\n             <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n           </Tooltip>\n@@ -1305,36 +622,36 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label={t('graphViewer.view3D')}\n+            label=\"3D View\"\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label={t('graphViewer.showNodeLabels')}\n+            label=\"Show Node Labels\"\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showLinkLabels}\n                 onChange={() => setShowLinkLabels(!showLinkLabels)}\n               />\n             }\n-            label={t('graphViewer.showLinkLabels')}\n+            label=\"Show Link Labels\"\n           />\n           <FormControlLabel\n             control={\n               <Switch\n                 checked={showHighlight}\n                 onChange={() => setShowHighlight(!showHighlight)}\n               />\n             }\n-            label={t('graphViewer.showHighlight')}\n+            label=\"Show Highlight\"\n           />\n         </Box>\n \n         <FormGroup>\n@@ -1345,28 +662,29 @@\n                 onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                 disabled={!hasDocuments || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeDocuments')}\n+            label=\"Include Documents\"\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n                 checked={includeTextUnits}\n+                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n                 onChange={() => {\n                   if (!includeTextUnits) {\n                     onIncludeTextUnitsChange(true);\n                   } else if (includeTextUnits && !includeCovariates) {\n                     onIncludeTextUnitsChange(false);\n                   } else {\n                     onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false);\n+                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n                   }\n                 }}\n                 disabled={!hasTextUnits || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeTextUnits')}\n+            label=\"Include Text Units\"\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n@@ -1374,9 +692,9 @@\n                 onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n                 disabled={!hasCommunities || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeCommunities')}\n+            label=\"Include Communities\"\n           />\n \n           <FormControlLabel\n             control={\n@@ -1394,15 +712,162 @@\n                 }}\n                 disabled={!hasCovariates || apiSearchResults !== null}\n               />\n             }\n-            label={t('graphViewer.includeCovariates')}\n+            label=\"Include Covariates\"\n           />\n         </FormGroup>\n       </Box>\n \n-      {/* 其他代码... */}\n+      <APISearchDrawer\n+        apiDrawerOpen={apiDrawerOpen}\n+        toggleDrawer={toggleApiDrawer}\n+        handleApiSearch={handleApiSearch}\n+        apiSearchResults={apiSearchResults}\n+        localSearchEnabled={localSearchEnabled}\n+        globalSearchEnabled={includeCommunities}\n+        hasCovariates={hasCovariates}\n+        serverUp={serverUp}\n+      />\n \n+      <SearchDrawer\n+        searchTerm={searchTerm}\n+        setSearchTerm={setSearchTerm}\n+        handleSearch={handleSearch}\n+        searchResults={searchResults}\n+        rightDrawerOpen={rightDrawerOpen}\n+        toggleDrawer={toggleDrawer}\n+        handleFocusButtonClick={handleFocusButtonClick}\n+        handleNodeClick={handleNodeClick}\n+        handleFocusLinkClick={handleFocusLinkClick}\n+        handleLinkClick={handleLinkClick}\n+      />\n+\n+      <DetailDrawer\n+        bottomDrawerOpen={bottomDrawerOpen}\n+        setBottomDrawerOpen={setBottomDrawerOpen}\n+        selectedNode={selectedNode}\n+        selectedRelationship={selectedRelationship}\n+        linkedNodes={linkedNodes}\n+        linkedRelationships={linkedRelationships}\n+      />\n+\n+      {graphType === \"2d\" ? (\n+        <ForceGraph2D\n+          ref={graphRef}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          autoPauseRedraw={false}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          linkDirectionalParticleColor={\n+            showHighlight ? getlinkDirectionalParticleColor : undefined\n+          }\n+          nodeCanvasObjectMode={(node) =>\n+            showHighlight && highlightNodes.has(node)\n+              ? \"before\"\n+              : showLabels\n+              ? \"after\"\n+              : undefined\n+          }\n+          nodeCanvasObject={(node, ctx) => {\n+            if (showHighlight && highlightNodes.has(node)) {\n+              paintRing(node as CustomNode, ctx);\n+            }\n+            if (showLabels) {\n+              renderNodeLabel(node as CustomNode, ctx);\n+            }\n+          }}\n+          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n+          linkCanvasObject={(link, ctx) => {\n+            if (showLinkLabels) {\n+              const label = link.type || \"\";\n+              const fontSize = 4;\n+              ctx.font = `${fontSize}px Sans-Serif`;\n+              ctx.fillStyle =\n+                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n+              const source =\n+                typeof link.source !== \"string\"\n+                  ? (link.source as CustomNode)\n+                  : null;\n+              const target =\n+                typeof link.target !== \"string\"\n+                  ? (link.target as CustomNode)\n+                  : null;\n+\n+              if (\n+                source &&\n+                target &&\n+                source.x !== undefined &&\n+                target.x !== undefined &&\n+                source.y !== undefined &&\n+                target.y !== undefined\n+              ) {\n+                const textWidth = ctx.measureText(label).width;\n+                const posX = (source.x + target.x) / 2 - textWidth / 2;\n+                const posY = (source.y + target.y) / 2;\n+                ctx.fillText(label, posX, posY);\n+              }\n+            }\n+          }}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={getLinkColor}\n+        />\n+      ) : (\n+        <ForceGraph3D\n+          ref={graphRef}\n+          extraRenderers={extraRenderers}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          nodeThreeObject={nodeThreeObject}\n+          nodeThreeObjectExtend={true}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={get3DLinkColor}\n+          linkThreeObjectExtend={true}\n+          linkThreeObject={(link) => {\n+            if (!showLinkLabels) new THREE.Object3D();\n+            const sprite = new SpriteText(`${link.type}`);\n+            sprite.color = \"lightgrey\";\n+            sprite.textHeight = 1.5;\n+            return sprite;\n+          }}\n+          linkPositionUpdate={(sprite, { start, end }) => {\n+            if (!showLinkLabels) return;\n+\n+            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n+              acc[c as keyof Coords] =\n+                start[c as keyof Coords] +\n+                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n+              return acc;\n+            }, {} as Coords);\n+\n+            // Position sprite\n+            Object.assign(sprite.position, middlePos);\n+          }}\n+        />\n+      )}\n       <Box\n         sx={{\n           position: \"absolute\",\n           top: 10,\n@@ -1413,32 +878,28 @@\n           alignItems: \"flex-start\",\n           gap: 1,\n         }}\n       >\n-        <Typography variant=\"body2\">\n-          {t('graphViewer.nodes')}: {nodeCount}\n-        </Typography>\n-        <Typography variant=\"body2\">\n-          {t('graphViewer.relationships')}: {linkCount}\n-        </Typography>\n+        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n+        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n         >\n-          {t('graphViewer.askQuery')}\n+          Ask Query (Local/Global Search)\n         </Button>\n         <Button\n           variant=\"contained\"\n           onClick={clearSearchResults}\n           startIcon={<DeleteIcon />}\n           color=\"warning\"\n           disabled={apiSearchResults === null}\n         >\n-          {t('graphViewer.clearQueryResults')}\n+          Clear Query Results\n         </Button>\n       </Box>\n     </Box>\n   );\n };\n \n-export default GraphViewer;\n+export default GraphViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727242986268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -714,8 +714,9 @@\n               />\n             }\n             label=\"Include Covariates\"\n           />\n+          \n         </FormGroup>\n       </Box>\n \n       <APISearchDrawer\n"
                },
                {
                    "date": 1727243316216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,9 +562,9 @@\n             variant=\"contained\"\n             onClick={toggleDrawer(true)}\n             startIcon={<SearchIcon />}\n           >\n-            Search Nodes/Links\n+            {t('graphViewer.searchNodesLinks')}\n           </Button>\n           {/* <FormControlLabel\n             control={\n               <Switch\n@@ -714,9 +714,8 @@\n               />\n             }\n             label=\"Include Covariates\"\n           />\n-          \n         </FormGroup>\n       </Box>\n \n       <APISearchDrawer\n"
                },
                {
                    "date": 1727243330683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n import { SearchResult } from \"../models/search-result\";\n import agent from \"../api/agent\";\n import APISearchDrawer from \"./APISearchDrawer\";\n import SpriteText from \"three-spritetext\";\n+import { useTranslation } from 'react-i18next';\n \n type Coords = {\n   x: number;\n   y: number;\n"
                },
                {
                    "date": 1727243346825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n+  const { t } = useTranslation();\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727243352524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation();\n+  const { t } = useTranslation('');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727243369855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation('');\n+  const { t } = useTranslation('gra');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727243379397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   hasTextUnits,\n   hasCommunities,\n   hasCovariates,\n }) => {\n-  const { t } = useTranslation('gra');\n+  const { t } = useTranslation('graphViewer');\n   const theme = useTheme();\n   const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n     new Set()\n   );\n"
                },
                {
                    "date": 1727243423870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,10 +602,10 @@\n               />\n             }\n             label=\"Show Highlight\"\n           /> */}\n-          <Tooltip title={isFullscreen ? \"Exit Full Screen\" : \"Full Screen\"}>\n-            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n+          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n+          <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n           </Tooltip>\n         </Box>\n"
                },
                {
                    "date": 1727243467606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -603,9 +603,9 @@\n             }\n             label=\"Show Highlight\"\n           /> */}\n           <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n-          <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n+            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n               {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n             </IconButton>\n           </Tooltip>\n         </Box>\n@@ -624,9 +624,9 @@\n                 checked={graphType === \"3d\"}\n                 onChange={onToggleGraphType}\n               />\n             }\n-            label=\"3D View\"\n+            label={t('graphViewer.view3D')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n"
                },
                {
                    "date": 1727243487272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -633,9 +633,9 @@\n                 checked={showLabels}\n                 onChange={() => setShowLabels(!showLabels)}\n               />\n             }\n-            label=\"Show Node Labels\"\n+            label={t('graphViewer.showNodeLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n"
                },
                {
                    "date": 1727243500665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -642,9 +642,9 @@\n                 checked={showLinkLabels}\n                 onChange={() => setShowLinkLabels(!showLinkLabels)}\n               />\n             }\n-            label=\"Show Link Labels\"\n+            label={t('graphViewer.showLinkLabels')}\n           />\n           <FormControlLabel\n             control={\n               <Switch\n"
                },
                {
                    "date": 1727243512980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -651,9 +651,9 @@\n                 checked={showHighlight}\n                 onChange={() => setShowHighlight(!showHighlight)}\n               />\n             }\n-            label=\"Show Highlight\"\n+            label={t('graphViewer.showHighlight')}\n           />\n         </Box>\n \n         <FormGroup>\n"
                },
                {
                    "date": 1727243525279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -664,9 +664,9 @@\n                 onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                 disabled={!hasDocuments || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Documents\"\n+            label={t('graphViewer.includeDocuments')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n"
                },
                {
                    "date": 1727243541915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -684,9 +684,9 @@\n                 }}\n                 disabled={!hasTextUnits || apiSearchResults !== null}\n               />\n             }\n-            label=\"Include Text Units\"\n+            label={t('graphViewer.includeTextUnits')}\n           />\n           <FormControlLabel\n             control={\n               <Checkbox\n"
                },
                {
                    "date": 1727243553602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,907 @@\n+import React, { useState, useCallback, useRef, useEffect } from \"react\";\n+import ForceGraph2D from \"react-force-graph-2d\";\n+import ForceGraph3D from \"react-force-graph-3d\";\n+import {\n+  CustomGraphData,\n+  CustomLink,\n+  CustomNode,\n+} from \"../models/custom-graph-data\";\n+import {\n+  Box,\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  FormGroup,\n+  IconButton,\n+  Switch,\n+  Tooltip,\n+  Typography,\n+  useTheme,\n+} from \"@mui/material\";\n+import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n+import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n+import SearchIcon from \"@mui/icons-material/Search\";\n+import DeleteIcon from \"@mui/icons-material/Delete\";\n+import Fuse from \"fuse.js\";\n+import {\n+  CSS2DRenderer,\n+  CSS2DObject,\n+} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n+import * as THREE from \"three\";\n+import { Renderer } from \"three\";\n+import SearchDrawer from \"./SearchDrawer\";\n+import DetailDrawer from \"./DetailDrawer\";\n+import { SearchResult } from \"../models/search-result\";\n+import agent from \"../api/agent\";\n+import APISearchDrawer from \"./APISearchDrawer\";\n+import SpriteText from \"three-spritetext\";\n+import { useTranslation } from 'react-i18next';\n+\n+type Coords = {\n+  x: number;\n+  y: number;\n+  z: number;\n+};\n+\n+interface GraphViewerProps {\n+  data: CustomGraphData;\n+  graphType: \"2d\" | \"3d\";\n+  isFullscreen: boolean;\n+  onToggleFullscreen: () => void;\n+  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n+  includeDocuments: boolean;\n+  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeTextUnits: boolean;\n+  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCommunities: boolean;\n+  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCovariates: boolean;\n+  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  hasDocuments: boolean;\n+  hasTextUnits: boolean;\n+  hasCommunities: boolean;\n+  hasCovariates: boolean;\n+}\n+\n+const NODE_R = 8;\n+\n+const GraphViewer: React.FC<GraphViewerProps> = ({\n+  data,\n+  graphType,\n+  isFullscreen,\n+  includeDocuments,\n+  onIncludeDocumentsChange,\n+  includeTextUnits,\n+  onIncludeTextUnitsChange,\n+  includeCommunities,\n+  onIncludeCommunitiesChange,\n+  includeCovariates,\n+  onIncludeCovariatesChange,\n+  onToggleFullscreen,\n+  onToggleGraphType,\n+  hasDocuments,\n+  hasTextUnits,\n+  hasCommunities,\n+  hasCovariates,\n+}) => {\n+  const { t } = useTranslation('graphViewer');\n+  const theme = useTheme();\n+  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n+    new Set()\n+  );\n+  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n+    new Set()\n+  );\n+  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n+  const [searchTerm, setSearchTerm] = useState(\"\");\n+  const [searchResults, setSearchResults] = useState<\n+    (CustomNode | CustomLink)[]\n+  >([]);\n+  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n+  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n+  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n+  const [selectedRelationship, setSelectedRelationship] =\n+    useState<CustomLink | null>(null);\n+  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n+  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n+    []\n+  );\n+  const [showLabels, setShowLabels] = useState(false);\n+  const [showLinkLabels, setShowLinkLabels] = useState(false);\n+  const [showHighlight, setShowHighlight] = useState(true);\n+  const graphRef = useRef<any>();\n+  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n+  const nodeCount = data.nodes.length;\n+  const linkCount = data.links.length;\n+\n+  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n+  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n+    null\n+  );\n+  const [serverUp, setServerUp] = useState<boolean>(false);\n+\n+  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n+\n+  const initialGraphData = useRef<CustomGraphData>(data);\n+\n+  useEffect(() => {\n+    setGraphData(data);\n+    initialGraphData.current = data;\n+  }, [data]);\n+\n+  useEffect(() => {\n+    checkServerStatus();\n+  }, []);\n+\n+  const toggleApiDrawer = (open: boolean) => () => {\n+    setApiDrawerOpen(open);\n+  };\n+\n+  const handleApiSearch = async (\n+    query: string,\n+    searchType: \"local\" | \"global\"\n+  ) => {\n+    try {\n+      const data: SearchResult =\n+        searchType === \"local\"\n+          ? await agent.Search.local(query)\n+          : await agent.Search.global(query);\n+\n+      setApiSearchResults(data);\n+      // Process the search result to update the graph data\n+      updateGraphData(data.context_data);\n+    } catch (err) {\n+      console.error(\"An error occurred during the API search.\", err);\n+    } finally {\n+    }\n+  };\n+\n+  const checkServerStatus = async () => {\n+    try {\n+      const response = await agent.Status.check();\n+      if (response.status === \"Server is up and running\") {\n+        setServerUp(true);\n+      } else {\n+        setServerUp(false);\n+      }\n+    } catch (error) {\n+      setServerUp(false);\n+    }\n+  };\n+\n+  const updateGraphData = (contextData: any) => {\n+    if (!contextData) return;\n+\n+    const newNodes: CustomNode[] = [];\n+    const newLinks: CustomLink[] = [];\n+\n+    const baseGraphData = initialGraphData.current;\n+\n+    // Assuming contextData has keys like entities, reports, relationships, sources\n+    Object.entries(contextData).forEach(([key, items]) => {\n+      if (Array.isArray(items)) {\n+        items.forEach((item) => {\n+          if (key === \"relationships\") {\n+            // Handle links\n+            const existingLink = baseGraphData.links.find(\n+              (link) =>\n+                link.human_readable_id?.toString() === item.id.toString()\n+            );\n+\n+            if (existingLink) {\n+              newLinks.push(existingLink);\n+            }\n+          } else if (key === \"entities\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                !node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"reports\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.uuid === item.id.toString()\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"sources\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.text?.toString() === item.text\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"covariates\" || key === \"claims\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          }\n+        });\n+      }\n+    });\n+\n+    // Update the graph data with the new nodes and links\n+    const updatedGraphData: CustomGraphData = {\n+      nodes: [...newNodes],\n+      links: [...newLinks],\n+    };\n+\n+    // Set the updated data to trigger re-render\n+    setGraphData(updatedGraphData);\n+  };\n+\n+  const fuse = new Fuse([...data.nodes, ...data.links], {\n+    keys: [\n+      \"uuid\",\n+      \"id\",\n+      \"name\",\n+      \"type\",\n+      \"description\",\n+      \"source\",\n+      \"target\",\n+      \"title\",\n+      \"summary\",\n+    ],\n+    threshold: 0.3,\n+  });\n+\n+  const handleNodeHover = useCallback((node: CustomNode | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (node) {\n+      newHighlightNodes.add(node);\n+      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+      node.links?.forEach((link) => newHighlightLinks.add(link));\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+    setHoverNode(node);\n+  }, []);\n+\n+  const handleLinkHover = useCallback((link: CustomLink | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (link) {\n+      newHighlightLinks.add(link);\n+      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n+      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+  }, []);\n+\n+  const paintRing = useCallback(\n+    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+      ctx.beginPath();\n+      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n+      if (highlightNodes.has(node)) {\n+        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n+        ctx.globalAlpha = 1; // full opacity\n+      } else {\n+        ctx.fillStyle = \"gray\";\n+        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n+      }\n+      ctx.fill();\n+      ctx.globalAlpha = 1; // reset alpha for other drawings\n+    },\n+    [hoverNode, highlightNodes]\n+  );\n+\n+  const handleSearch = () => {\n+    const results = fuse.search(searchTerm).map((result) => result.item);\n+    const nodeResults = results.filter((item) => \"neighbors\" in item);\n+    const linkResults = results.filter(\n+      (item) => \"source\" in item && \"target\" in item\n+    );\n+    setSearchResults([...nodeResults, ...linkResults]);\n+    setRightDrawerOpen(true);\n+  };\n+\n+  const toggleDrawer = (open: boolean) => () => {\n+    setRightDrawerOpen(open);\n+  };\n+\n+  const handleFocusButtonClick = (node: CustomNode) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    newHighlightNodes.add(node);\n+    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+    node.links?.forEach((link) => highlightLinks.add(link));\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHoverNode(node);\n+\n+    if (graphRef.current) {\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(node.x, node.y, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: node.x, y: node.y, z: 300 }, // new position\n+          { x: node.x, y: node.y, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused node\n+    setTimeout(() => {\n+      handleNodeHover(node);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleFocusLinkClick = (link: CustomLink) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    newHighlightLinks.add(link);\n+    let sourceNode: CustomNode | undefined;\n+    let targetNode: CustomNode | undefined;\n+\n+    if (typeof link.source !== \"string\") {\n+      newHighlightNodes.add(link.source);\n+      sourceNode = link.source;\n+    }\n+\n+    if (typeof link.target !== \"string\") {\n+      newHighlightNodes.add(link.target);\n+      targetNode = link.target;\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+\n+    if (\n+      graphRef.current &&\n+      sourceNode &&\n+      targetNode &&\n+      sourceNode.x &&\n+      targetNode.x &&\n+      sourceNode.y &&\n+      targetNode.y\n+    ) {\n+      const midX = (sourceNode.x + targetNode.x) / 2;\n+      const midY = (sourceNode.y + targetNode.y) / 2;\n+\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(midX, midY, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: midX, y: midY, z: 300 }, // new position\n+          { x: midX, y: midY, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused link\n+    setTimeout(() => {\n+      handleLinkHover(link);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleNodeClick = (node: CustomNode) => {\n+    setSelectedRelationship(null);\n+    setSelectedNode(node);\n+    setLinkedNodes(node.neighbors || []);\n+    setLinkedRelationships(node.links || []);\n+    setBottomDrawerOpen(true);\n+  };\n+\n+  const handleLinkClick = (link: CustomLink) => {\n+    setSelectedNode(null);\n+    setSelectedRelationship(link);\n+    const linkSource =\n+      typeof link.source === \"object\"\n+        ? (link.source as CustomNode).id\n+        : link.source;\n+    const linkTarget =\n+      typeof link.target === \"object\"\n+        ? (link.target as CustomNode).id\n+        : link.target;\n+    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n+    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n+    if (sourceNode && targetNode) {\n+      const linkedNodes = [sourceNode, targetNode];\n+      setLinkedNodes(linkedNodes);\n+      const linkedRelationships = [link];\n+      setLinkedRelationships(linkedRelationships);\n+      setBottomDrawerOpen(true);\n+    }\n+  };\n+\n+  const getBackgroundColor = () =>\n+    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n+\n+  const getLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n+\n+  const get3DLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+    if (!showLabels) return; // Only render the label if showLabels is true\n+\n+    const label = node.name || \"\";\n+    const fontSize = 4;\n+    const padding = 2;\n+    ctx.font = `${fontSize}px Sans-Serif`;\n+\n+    // Set the styles based on the theme mode\n+    const backgroundColor =\n+      theme.palette.mode === \"dark\"\n+        ? \"rgba(0, 0, 0, 0.6)\"\n+        : \"rgba(255, 255, 255, 0.6)\";\n+\n+    // Calculate label dimensions\n+    const textWidth = ctx.measureText(label).width;\n+    const boxWidth = textWidth + padding * 2;\n+    const boxHeight = fontSize + padding * 2;\n+\n+    if (node.x && node.y) {\n+      // Draw the background rectangle with rounded corners\n+      ctx.fillStyle = backgroundColor;\n+      ctx.beginPath();\n+      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n+      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2 + 5\n+      );\n+      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x + boxWidth / 2 - 5,\n+        node.y + boxHeight / 2\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2 - 5\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x - boxWidth / 2 + 5,\n+        node.y - boxHeight / 2\n+      );\n+      ctx.closePath();\n+      ctx.fill();\n+\n+      // Draw the text in the center of the node\n+      // ctx.fillStyle = textColor;\n+      ctx.fillStyle = node.color;\n+      ctx.textAlign = \"center\";\n+      ctx.textBaseline = \"middle\";\n+      ctx.fillText(label, node.x, node.y);\n+    }\n+  };\n+\n+  const nodeThreeObject = (node: CustomNode) => {\n+    if (!showLabels) {\n+      return new THREE.Object3D();\n+    }\n+\n+    try {\n+      const nodeEl = document.createElement(\"div\");\n+      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n+      nodeEl.style.color = node.color;\n+      nodeEl.style.padding = \"2px 4px\";\n+      nodeEl.style.borderRadius = \"4px\";\n+      nodeEl.style.fontSize = \"10px\";\n+      nodeEl.className = \"node-label\";\n+\n+      return new CSS2DObject(nodeEl);\n+    } catch (error) {\n+      console.error(\"Error creating 3D object:\", error);\n+      return new THREE.Object3D(); // Fallback in case of error\n+    }\n+  };\n+\n+  const localSearchEnabled = hasCovariates\n+    ? includeTextUnits && includeCommunities && includeCovariates\n+    : includeTextUnits && includeCommunities;\n+\n+  const clearSearchResults = () => {\n+    setGraphData(initialGraphData.current);\n+    setApiSearchResults(null);\n+  };\n+\n+  return (\n+    <Box\n+      sx={{\n+        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+        width: isFullscreen ? \"100vw\" : \"100%\",\n+        position: isFullscreen ? \"fixed\" : \"relative\",\n+        top: 0,\n+        left: 0,\n+        zIndex: isFullscreen ? 1300 : \"auto\",\n+        overflow: \"hidden\",\n+        margin: 0,\n+        padding: 0,\n+        backgroundColor: getBackgroundColor(),\n+      }}\n+    >\n+      <Box\n+        sx={{\n+          position: \"absolute\",\n+          top: 10,\n+          right: 10,\n+          zIndex: 1400,\n+          display: \"flex\",\n+          flexDirection: \"column\",\n+          gap: 2,\n+          alignItems: \"flex-end\",\n+        }}\n+      >\n+        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n+          <Button\n+            variant=\"contained\"\n+            onClick={toggleDrawer(true)}\n+            startIcon={<SearchIcon />}\n+          >\n+            {t('graphViewer.searchNodesLinks')}\n+          </Button>\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label=\"3D View\"\n+          /> */}\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label=\"Show Node Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label=\"Show Relationship Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label=\"Show Highlight\"\n+          /> */}\n+          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n+            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n+              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n+            </IconButton>\n+          </Tooltip>\n+        </Box>\n+\n+        <Box\n+          sx={{\n+            display: \"flex\",\n+            flexDirection: \"column\",\n+            gap: 1,\n+            alignItems: \"flex-start\",\n+          }}\n+        >\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label={t('graphViewer.view3D')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label={t('graphViewer.showNodeLabels')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label={t('graphViewer.showLinkLabels')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label={t('graphViewer.showHighlight')}\n+          />\n+        </Box>\n+\n+        <FormGroup>\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeDocuments}\n+                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n+                disabled={!hasDocuments || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeDocuments')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeTextUnits}\n+                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n+                onChange={() => {\n+                  if (!includeTextUnits) {\n+                    onIncludeTextUnitsChange(true);\n+                  } else if (includeTextUnits && !includeCovariates) {\n+                    onIncludeTextUnitsChange(false);\n+                  } else {\n+                    onIncludeTextUnitsChange(false);\n+                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n+                  }\n+                }}\n+                disabled={!hasTextUnits || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeTextUnits')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeCommunities}\n+                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n+                disabled={!hasCommunities || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeCommunities')}\n+          />\n+\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeCovariates}\n+                onChange={() => {\n+                  if (!includeCovariates) {\n+                    if (!includeTextUnits) {\n+                      onIncludeTextUnitsChange(true);\n+                    }\n+                    onIncludeCovariatesChange(true);\n+                  } else {\n+                    onIncludeCovariatesChange(false);\n+                  }\n+                }}\n+                disabled={!hasCovariates || apiSearchResults !== null}\n+              />\n+            }\n+            label=\"Include Covariates\"\n+          />\n+        </FormGroup>\n+      </Box>\n+\n+      <APISearchDrawer\n+        apiDrawerOpen={apiDrawerOpen}\n+        toggleDrawer={toggleApiDrawer}\n+        handleApiSearch={handleApiSearch}\n+        apiSearchResults={apiSearchResults}\n+        localSearchEnabled={localSearchEnabled}\n+        globalSearchEnabled={includeCommunities}\n+        hasCovariates={hasCovariates}\n+        serverUp={serverUp}\n+      />\n+\n+      <SearchDrawer\n+        searchTerm={searchTerm}\n+        setSearchTerm={setSearchTerm}\n+        handleSearch={handleSearch}\n+        searchResults={searchResults}\n+        rightDrawerOpen={rightDrawerOpen}\n+        toggleDrawer={toggleDrawer}\n+        handleFocusButtonClick={handleFocusButtonClick}\n+        handleNodeClick={handleNodeClick}\n+        handleFocusLinkClick={handleFocusLinkClick}\n+        handleLinkClick={handleLinkClick}\n+      />\n+\n+      <DetailDrawer\n+        bottomDrawerOpen={bottomDrawerOpen}\n+        setBottomDrawerOpen={setBottomDrawerOpen}\n+        selectedNode={selectedNode}\n+        selectedRelationship={selectedRelationship}\n+        linkedNodes={linkedNodes}\n+        linkedRelationships={linkedRelationships}\n+      />\n+\n+      {graphType === \"2d\" ? (\n+        <ForceGraph2D\n+          ref={graphRef}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          autoPauseRedraw={false}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          linkDirectionalParticleColor={\n+            showHighlight ? getlinkDirectionalParticleColor : undefined\n+          }\n+          nodeCanvasObjectMode={(node) =>\n+            showHighlight && highlightNodes.has(node)\n+              ? \"before\"\n+              : showLabels\n+              ? \"after\"\n+              : undefined\n+          }\n+          nodeCanvasObject={(node, ctx) => {\n+            if (showHighlight && highlightNodes.has(node)) {\n+              paintRing(node as CustomNode, ctx);\n+            }\n+            if (showLabels) {\n+              renderNodeLabel(node as CustomNode, ctx);\n+            }\n+          }}\n+          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n+          linkCanvasObject={(link, ctx) => {\n+            if (showLinkLabels) {\n+              const label = link.type || \"\";\n+              const fontSize = 4;\n+              ctx.font = `${fontSize}px Sans-Serif`;\n+              ctx.fillStyle =\n+                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n+              const source =\n+                typeof link.source !== \"string\"\n+                  ? (link.source as CustomNode)\n+                  : null;\n+              const target =\n+                typeof link.target !== \"string\"\n+                  ? (link.target as CustomNode)\n+                  : null;\n+\n+              if (\n+                source &&\n+                target &&\n+                source.x !== undefined &&\n+                target.x !== undefined &&\n+                source.y !== undefined &&\n+                target.y !== undefined\n+              ) {\n+                const textWidth = ctx.measureText(label).width;\n+                const posX = (source.x + target.x) / 2 - textWidth / 2;\n+                const posY = (source.y + target.y) / 2;\n+                ctx.fillText(label, posX, posY);\n+              }\n+            }\n+          }}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={getLinkColor}\n+        />\n+      ) : (\n+        <ForceGraph3D\n+          ref={graphRef}\n+          extraRenderers={extraRenderers}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          nodeThreeObject={nodeThreeObject}\n+          nodeThreeObjectExtend={true}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={get3DLinkColor}\n+          linkThreeObjectExtend={true}\n+          linkThreeObject={(link) => {\n+            if (!showLinkLabels) new THREE.Object3D();\n+            const sprite = new SpriteText(`${link.type}`);\n+            sprite.color = \"lightgrey\";\n+            sprite.textHeight = 1.5;\n+            return sprite;\n+          }}\n+          linkPositionUpdate={(sprite, { start, end }) => {\n+            if (!showLinkLabels) return;\n+\n+            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n+              acc[c as keyof Coords] =\n+                start[c as keyof Coords] +\n+                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n+              return acc;\n+            }, {} as Coords);\n+\n+            // Position sprite\n+            Object.assign(sprite.position, middlePos);\n+          }}\n+        />\n+      )}\n+      <Box\n+        sx={{\n+          position: \"absolute\",\n+          top: 10,\n+          left: 10,\n+          zIndex: 1400,\n+          display: \"flex\",\n+          flexDirection: \"column\",\n+          alignItems: \"flex-start\",\n+          gap: 1,\n+        }}\n+      >\n+        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n+        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Button\n+          variant=\"contained\"\n+          onClick={toggleApiDrawer(true)}\n+          startIcon={<SearchIcon />}\n+        >\n+          Ask Query (Local/Global Search)\n+        </Button>\n+        <Button\n+          variant=\"contained\"\n+          onClick={clearSearchResults}\n+          startIcon={<DeleteIcon />}\n+          color=\"warning\"\n+          disabled={apiSearchResults === null}\n+        >\n+          Clear Query Results\n+        </Button>\n+      </Box>\n+    </Box>\n+  );\n+};\n+\n+export default GraphViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727243567203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,907 @@\n+import React, { useState, useCallback, useRef, useEffect } from \"react\";\n+import ForceGraph2D from \"react-force-graph-2d\";\n+import ForceGraph3D from \"react-force-graph-3d\";\n+import {\n+  CustomGraphData,\n+  CustomLink,\n+  CustomNode,\n+} from \"../models/custom-graph-data\";\n+import {\n+  Box,\n+  Button,\n+  Checkbox,\n+  FormControlLabel,\n+  FormGroup,\n+  IconButton,\n+  Switch,\n+  Tooltip,\n+  Typography,\n+  useTheme,\n+} from \"@mui/material\";\n+import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n+import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n+import SearchIcon from \"@mui/icons-material/Search\";\n+import DeleteIcon from \"@mui/icons-material/Delete\";\n+import Fuse from \"fuse.js\";\n+import {\n+  CSS2DRenderer,\n+  CSS2DObject,\n+} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n+import * as THREE from \"three\";\n+import { Renderer } from \"three\";\n+import SearchDrawer from \"./SearchDrawer\";\n+import DetailDrawer from \"./DetailDrawer\";\n+import { SearchResult } from \"../models/search-result\";\n+import agent from \"../api/agent\";\n+import APISearchDrawer from \"./APISearchDrawer\";\n+import SpriteText from \"three-spritetext\";\n+import { useTranslation } from 'react-i18next';\n+\n+type Coords = {\n+  x: number;\n+  y: number;\n+  z: number;\n+};\n+\n+interface GraphViewerProps {\n+  data: CustomGraphData;\n+  graphType: \"2d\" | \"3d\";\n+  isFullscreen: boolean;\n+  onToggleFullscreen: () => void;\n+  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n+  includeDocuments: boolean;\n+  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeTextUnits: boolean;\n+  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCommunities: boolean;\n+  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  includeCovariates: boolean;\n+  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n+  hasDocuments: boolean;\n+  hasTextUnits: boolean;\n+  hasCommunities: boolean;\n+  hasCovariates: boolean;\n+}\n+\n+const NODE_R = 8;\n+\n+const GraphViewer: React.FC<GraphViewerProps> = ({\n+  data,\n+  graphType,\n+  isFullscreen,\n+  includeDocuments,\n+  onIncludeDocumentsChange,\n+  includeTextUnits,\n+  onIncludeTextUnitsChange,\n+  includeCommunities,\n+  onIncludeCommunitiesChange,\n+  includeCovariates,\n+  onIncludeCovariatesChange,\n+  onToggleFullscreen,\n+  onToggleGraphType,\n+  hasDocuments,\n+  hasTextUnits,\n+  hasCommunities,\n+  hasCovariates,\n+}) => {\n+  const { t } = useTranslation('graphViewer');\n+  const theme = useTheme();\n+  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n+    new Set()\n+  );\n+  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n+    new Set()\n+  );\n+  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n+  const [searchTerm, setSearchTerm] = useState(\"\");\n+  const [searchResults, setSearchResults] = useState<\n+    (CustomNode | CustomLink)[]\n+  >([]);\n+  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n+  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n+  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n+  const [selectedRelationship, setSelectedRelationship] =\n+    useState<CustomLink | null>(null);\n+  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n+  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n+    []\n+  );\n+  const [showLabels, setShowLabels] = useState(false);\n+  const [showLinkLabels, setShowLinkLabels] = useState(false);\n+  const [showHighlight, setShowHighlight] = useState(true);\n+  const graphRef = useRef<any>();\n+  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n+  const nodeCount = data.nodes.length;\n+  const linkCount = data.links.length;\n+\n+  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n+  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n+    null\n+  );\n+  const [serverUp, setServerUp] = useState<boolean>(false);\n+\n+  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n+\n+  const initialGraphData = useRef<CustomGraphData>(data);\n+\n+  useEffect(() => {\n+    setGraphData(data);\n+    initialGraphData.current = data;\n+  }, [data]);\n+\n+  useEffect(() => {\n+    checkServerStatus();\n+  }, []);\n+\n+  const toggleApiDrawer = (open: boolean) => () => {\n+    setApiDrawerOpen(open);\n+  };\n+\n+  const handleApiSearch = async (\n+    query: string,\n+    searchType: \"local\" | \"global\"\n+  ) => {\n+    try {\n+      const data: SearchResult =\n+        searchType === \"local\"\n+          ? await agent.Search.local(query)\n+          : await agent.Search.global(query);\n+\n+      setApiSearchResults(data);\n+      // Process the search result to update the graph data\n+      updateGraphData(data.context_data);\n+    } catch (err) {\n+      console.error(\"An error occurred during the API search.\", err);\n+    } finally {\n+    }\n+  };\n+\n+  const checkServerStatus = async () => {\n+    try {\n+      const response = await agent.Status.check();\n+      if (response.status === \"Server is up and running\") {\n+        setServerUp(true);\n+      } else {\n+        setServerUp(false);\n+      }\n+    } catch (error) {\n+      setServerUp(false);\n+    }\n+  };\n+\n+  const updateGraphData = (contextData: any) => {\n+    if (!contextData) return;\n+\n+    const newNodes: CustomNode[] = [];\n+    const newLinks: CustomLink[] = [];\n+\n+    const baseGraphData = initialGraphData.current;\n+\n+    // Assuming contextData has keys like entities, reports, relationships, sources\n+    Object.entries(contextData).forEach(([key, items]) => {\n+      if (Array.isArray(items)) {\n+        items.forEach((item) => {\n+          if (key === \"relationships\") {\n+            // Handle links\n+            const existingLink = baseGraphData.links.find(\n+              (link) =>\n+                link.human_readable_id?.toString() === item.id.toString()\n+            );\n+\n+            if (existingLink) {\n+              newLinks.push(existingLink);\n+            }\n+          } else if (key === \"entities\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                !node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"reports\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.uuid === item.id.toString()\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"sources\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) => node.text?.toString() === item.text\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          } else if (key === \"covariates\" || key === \"claims\") {\n+            const existingNode = baseGraphData.nodes.find(\n+              (node) =>\n+                node.human_readable_id?.toString() === item.id.toString() &&\n+                node.covariate_type\n+            );\n+            if (existingNode) {\n+              newNodes.push(existingNode);\n+            }\n+          }\n+        });\n+      }\n+    });\n+\n+    // Update the graph data with the new nodes and links\n+    const updatedGraphData: CustomGraphData = {\n+      nodes: [...newNodes],\n+      links: [...newLinks],\n+    };\n+\n+    // Set the updated data to trigger re-render\n+    setGraphData(updatedGraphData);\n+  };\n+\n+  const fuse = new Fuse([...data.nodes, ...data.links], {\n+    keys: [\n+      \"uuid\",\n+      \"id\",\n+      \"name\",\n+      \"type\",\n+      \"description\",\n+      \"source\",\n+      \"target\",\n+      \"title\",\n+      \"summary\",\n+    ],\n+    threshold: 0.3,\n+  });\n+\n+  const handleNodeHover = useCallback((node: CustomNode | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (node) {\n+      newHighlightNodes.add(node);\n+      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+      node.links?.forEach((link) => newHighlightLinks.add(link));\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+    setHoverNode(node);\n+  }, []);\n+\n+  const handleLinkHover = useCallback((link: CustomLink | null) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    if (link) {\n+      newHighlightLinks.add(link);\n+      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n+      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+  }, []);\n+\n+  const paintRing = useCallback(\n+    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+      ctx.beginPath();\n+      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n+      if (highlightNodes.has(node)) {\n+        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n+        ctx.globalAlpha = 1; // full opacity\n+      } else {\n+        ctx.fillStyle = \"gray\";\n+        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n+      }\n+      ctx.fill();\n+      ctx.globalAlpha = 1; // reset alpha for other drawings\n+    },\n+    [hoverNode, highlightNodes]\n+  );\n+\n+  const handleSearch = () => {\n+    const results = fuse.search(searchTerm).map((result) => result.item);\n+    const nodeResults = results.filter((item) => \"neighbors\" in item);\n+    const linkResults = results.filter(\n+      (item) => \"source\" in item && \"target\" in item\n+    );\n+    setSearchResults([...nodeResults, ...linkResults]);\n+    setRightDrawerOpen(true);\n+  };\n+\n+  const toggleDrawer = (open: boolean) => () => {\n+    setRightDrawerOpen(open);\n+  };\n+\n+  const handleFocusButtonClick = (node: CustomNode) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    newHighlightNodes.add(node);\n+    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n+    node.links?.forEach((link) => highlightLinks.add(link));\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHoverNode(node);\n+\n+    if (graphRef.current) {\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(node.x, node.y, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: node.x, y: node.y, z: 300 }, // new position\n+          { x: node.x, y: node.y, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused node\n+    setTimeout(() => {\n+      handleNodeHover(node);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleFocusLinkClick = (link: CustomLink) => {\n+    const newHighlightNodes = new Set<CustomNode>();\n+    const newHighlightLinks = new Set<CustomLink>();\n+\n+    newHighlightLinks.add(link);\n+    let sourceNode: CustomNode | undefined;\n+    let targetNode: CustomNode | undefined;\n+\n+    if (typeof link.source !== \"string\") {\n+      newHighlightNodes.add(link.source);\n+      sourceNode = link.source;\n+    }\n+\n+    if (typeof link.target !== \"string\") {\n+      newHighlightNodes.add(link.target);\n+      targetNode = link.target;\n+    }\n+\n+    setHighlightNodes(newHighlightNodes);\n+    setHighlightLinks(newHighlightLinks);\n+\n+    if (\n+      graphRef.current &&\n+      sourceNode &&\n+      targetNode &&\n+      sourceNode.x &&\n+      targetNode.x &&\n+      sourceNode.y &&\n+      targetNode.y\n+    ) {\n+      const midX = (sourceNode.x + targetNode.x) / 2;\n+      const midY = (sourceNode.y + targetNode.y) / 2;\n+\n+      if (graphType === \"2d\") {\n+        graphRef.current.centerAt(midX, midY, 1000);\n+        graphRef.current.zoom(8, 1000);\n+      } else {\n+        graphRef.current.cameraPosition(\n+          { x: midX, y: midY, z: 300 }, // new position\n+          { x: midX, y: midY, z: 0 }, // lookAt\n+          3000 // ms transition duration\n+        );\n+      }\n+    }\n+\n+    // Simulate mouse hover on the focused link\n+    setTimeout(() => {\n+      handleLinkHover(link);\n+    }, 1000); // Adjust delay as needed\n+\n+    setRightDrawerOpen(false);\n+  };\n+\n+  const handleNodeClick = (node: CustomNode) => {\n+    setSelectedRelationship(null);\n+    setSelectedNode(node);\n+    setLinkedNodes(node.neighbors || []);\n+    setLinkedRelationships(node.links || []);\n+    setBottomDrawerOpen(true);\n+  };\n+\n+  const handleLinkClick = (link: CustomLink) => {\n+    setSelectedNode(null);\n+    setSelectedRelationship(link);\n+    const linkSource =\n+      typeof link.source === \"object\"\n+        ? (link.source as CustomNode).id\n+        : link.source;\n+    const linkTarget =\n+      typeof link.target === \"object\"\n+        ? (link.target as CustomNode).id\n+        : link.target;\n+    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n+    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n+    if (sourceNode && targetNode) {\n+      const linkedNodes = [sourceNode, targetNode];\n+      setLinkedNodes(linkedNodes);\n+      const linkedRelationships = [link];\n+      setLinkedRelationships(linkedRelationships);\n+      setBottomDrawerOpen(true);\n+    }\n+  };\n+\n+  const getBackgroundColor = () =>\n+    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n+\n+  const getLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n+\n+  const get3DLinkColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n+    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n+\n+  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n+    if (!showLabels) return; // Only render the label if showLabels is true\n+\n+    const label = node.name || \"\";\n+    const fontSize = 4;\n+    const padding = 2;\n+    ctx.font = `${fontSize}px Sans-Serif`;\n+\n+    // Set the styles based on the theme mode\n+    const backgroundColor =\n+      theme.palette.mode === \"dark\"\n+        ? \"rgba(0, 0, 0, 0.6)\"\n+        : \"rgba(255, 255, 255, 0.6)\";\n+\n+    // Calculate label dimensions\n+    const textWidth = ctx.measureText(label).width;\n+    const boxWidth = textWidth + padding * 2;\n+    const boxHeight = fontSize + padding * 2;\n+\n+    if (node.x && node.y) {\n+      // Draw the background rectangle with rounded corners\n+      ctx.fillStyle = backgroundColor;\n+      ctx.beginPath();\n+      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n+      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x + boxWidth / 2,\n+        node.y - boxHeight / 2 + 5\n+      );\n+      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n+      ctx.quadraticCurveTo(\n+        node.x + boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x + boxWidth / 2 - 5,\n+        node.y + boxHeight / 2\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2,\n+        node.x - boxWidth / 2,\n+        node.y + boxHeight / 2 - 5\n+      );\n+      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n+      ctx.quadraticCurveTo(\n+        node.x - boxWidth / 2,\n+        node.y - boxHeight / 2,\n+        node.x - boxWidth / 2 + 5,\n+        node.y - boxHeight / 2\n+      );\n+      ctx.closePath();\n+      ctx.fill();\n+\n+      // Draw the text in the center of the node\n+      // ctx.fillStyle = textColor;\n+      ctx.fillStyle = node.color;\n+      ctx.textAlign = \"center\";\n+      ctx.textBaseline = \"middle\";\n+      ctx.fillText(label, node.x, node.y);\n+    }\n+  };\n+\n+  const nodeThreeObject = (node: CustomNode) => {\n+    if (!showLabels) {\n+      return new THREE.Object3D();\n+    }\n+\n+    try {\n+      const nodeEl = document.createElement(\"div\");\n+      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n+      nodeEl.style.color = node.color;\n+      nodeEl.style.padding = \"2px 4px\";\n+      nodeEl.style.borderRadius = \"4px\";\n+      nodeEl.style.fontSize = \"10px\";\n+      nodeEl.className = \"node-label\";\n+\n+      return new CSS2DObject(nodeEl);\n+    } catch (error) {\n+      console.error(\"Error creating 3D object:\", error);\n+      return new THREE.Object3D(); // Fallback in case of error\n+    }\n+  };\n+\n+  const localSearchEnabled = hasCovariates\n+    ? includeTextUnits && includeCommunities && includeCovariates\n+    : includeTextUnits && includeCommunities;\n+\n+  const clearSearchResults = () => {\n+    setGraphData(initialGraphData.current);\n+    setApiSearchResults(null);\n+  };\n+\n+  return (\n+    <Box\n+      sx={{\n+        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n+        width: isFullscreen ? \"100vw\" : \"100%\",\n+        position: isFullscreen ? \"fixed\" : \"relative\",\n+        top: 0,\n+        left: 0,\n+        zIndex: isFullscreen ? 1300 : \"auto\",\n+        overflow: \"hidden\",\n+        margin: 0,\n+        padding: 0,\n+        backgroundColor: getBackgroundColor(),\n+      }}\n+    >\n+      <Box\n+        sx={{\n+          position: \"absolute\",\n+          top: 10,\n+          right: 10,\n+          zIndex: 1400,\n+          display: \"flex\",\n+          flexDirection: \"column\",\n+          gap: 2,\n+          alignItems: \"flex-end\",\n+        }}\n+      >\n+        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n+          <Button\n+            variant=\"contained\"\n+            onClick={toggleDrawer(true)}\n+            startIcon={<SearchIcon />}\n+          >\n+            {t('graphViewer.searchNodesLinks')}\n+          </Button>\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label=\"3D View\"\n+          /> */}\n+          {/* <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label=\"Show Node Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label=\"Show Relationship Labels\"\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label=\"Show Highlight\"\n+          /> */}\n+          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n+            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n+              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n+            </IconButton>\n+          </Tooltip>\n+        </Box>\n+\n+        <Box\n+          sx={{\n+            display: \"flex\",\n+            flexDirection: \"column\",\n+            gap: 1,\n+            alignItems: \"flex-start\",\n+          }}\n+        >\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={graphType === \"3d\"}\n+                onChange={onToggleGraphType}\n+              />\n+            }\n+            label={t('graphViewer.view3D')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLabels}\n+                onChange={() => setShowLabels(!showLabels)}\n+              />\n+            }\n+            label={t('graphViewer.showNodeLabels')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showLinkLabels}\n+                onChange={() => setShowLinkLabels(!showLinkLabels)}\n+              />\n+            }\n+            label={t('graphViewer.showLinkLabels')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Switch\n+                checked={showHighlight}\n+                onChange={() => setShowHighlight(!showHighlight)}\n+              />\n+            }\n+            label={t('graphViewer.showHighlight')}\n+          />\n+        </Box>\n+\n+        <FormGroup>\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeDocuments}\n+                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n+                disabled={!hasDocuments || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeDocuments')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeTextUnits}\n+                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n+                onChange={() => {\n+                  if (!includeTextUnits) {\n+                    onIncludeTextUnitsChange(true);\n+                  } else if (includeTextUnits && !includeCovariates) {\n+                    onIncludeTextUnitsChange(false);\n+                  } else {\n+                    onIncludeTextUnitsChange(false);\n+                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n+                  }\n+                }}\n+                disabled={!hasTextUnits || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeTextUnits')}\n+          />\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeCommunities}\n+                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n+                disabled={!hasCommunities || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeCommunities')}\n+          />\n+\n+          <FormControlLabel\n+            control={\n+              <Checkbox\n+                checked={includeCovariates}\n+                onChange={() => {\n+                  if (!includeCovariates) {\n+                    if (!includeTextUnits) {\n+                      onIncludeTextUnitsChange(true);\n+                    }\n+                    onIncludeCovariatesChange(true);\n+                  } else {\n+                    onIncludeCovariatesChange(false);\n+                  }\n+                }}\n+                disabled={!hasCovariates || apiSearchResults !== null}\n+              />\n+            }\n+            label={t('graphViewer.includeCovariates')}\n+          />\n+        </FormGroup>\n+      </Box>\n+\n+      <APISearchDrawer\n+        apiDrawerOpen={apiDrawerOpen}\n+        toggleDrawer={toggleApiDrawer}\n+        handleApiSearch={handleApiSearch}\n+        apiSearchResults={apiSearchResults}\n+        localSearchEnabled={localSearchEnabled}\n+        globalSearchEnabled={includeCommunities}\n+        hasCovariates={hasCovariates}\n+        serverUp={serverUp}\n+      />\n+\n+      <SearchDrawer\n+        searchTerm={searchTerm}\n+        setSearchTerm={setSearchTerm}\n+        handleSearch={handleSearch}\n+        searchResults={searchResults}\n+        rightDrawerOpen={rightDrawerOpen}\n+        toggleDrawer={toggleDrawer}\n+        handleFocusButtonClick={handleFocusButtonClick}\n+        handleNodeClick={handleNodeClick}\n+        handleFocusLinkClick={handleFocusLinkClick}\n+        handleLinkClick={handleLinkClick}\n+      />\n+\n+      <DetailDrawer\n+        bottomDrawerOpen={bottomDrawerOpen}\n+        setBottomDrawerOpen={setBottomDrawerOpen}\n+        selectedNode={selectedNode}\n+        selectedRelationship={selectedRelationship}\n+        linkedNodes={linkedNodes}\n+        linkedRelationships={linkedRelationships}\n+      />\n+\n+      {graphType === \"2d\" ? (\n+        <ForceGraph2D\n+          ref={graphRef}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          autoPauseRedraw={false}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          linkDirectionalParticleColor={\n+            showHighlight ? getlinkDirectionalParticleColor : undefined\n+          }\n+          nodeCanvasObjectMode={(node) =>\n+            showHighlight && highlightNodes.has(node)\n+              ? \"before\"\n+              : showLabels\n+              ? \"after\"\n+              : undefined\n+          }\n+          nodeCanvasObject={(node, ctx) => {\n+            if (showHighlight && highlightNodes.has(node)) {\n+              paintRing(node as CustomNode, ctx);\n+            }\n+            if (showLabels) {\n+              renderNodeLabel(node as CustomNode, ctx);\n+            }\n+          }}\n+          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n+          linkCanvasObject={(link, ctx) => {\n+            if (showLinkLabels) {\n+              const label = link.type || \"\";\n+              const fontSize = 4;\n+              ctx.font = `${fontSize}px Sans-Serif`;\n+              ctx.fillStyle =\n+                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n+              const source =\n+                typeof link.source !== \"string\"\n+                  ? (link.source as CustomNode)\n+                  : null;\n+              const target =\n+                typeof link.target !== \"string\"\n+                  ? (link.target as CustomNode)\n+                  : null;\n+\n+              if (\n+                source &&\n+                target &&\n+                source.x !== undefined &&\n+                target.x !== undefined &&\n+                source.y !== undefined &&\n+                target.y !== undefined\n+              ) {\n+                const textWidth = ctx.measureText(label).width;\n+                const posX = (source.x + target.x) / 2 - textWidth / 2;\n+                const posY = (source.y + target.y) / 2;\n+                ctx.fillText(label, posX, posY);\n+              }\n+            }\n+          }}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={getLinkColor}\n+        />\n+      ) : (\n+        <ForceGraph3D\n+          ref={graphRef}\n+          extraRenderers={extraRenderers}\n+          graphData={graphData}\n+          nodeAutoColorBy=\"type\"\n+          nodeRelSize={NODE_R}\n+          linkWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 5 : 1\n+          }\n+          linkDirectionalParticles={showHighlight ? 4 : 0}\n+          linkDirectionalParticleWidth={(link) =>\n+            showHighlight && highlightLinks.has(link) ? 4 : 0\n+          }\n+          nodeThreeObject={nodeThreeObject}\n+          nodeThreeObjectExtend={true}\n+          onNodeHover={showHighlight ? handleNodeHover : undefined}\n+          onLinkHover={showHighlight ? handleLinkHover : undefined}\n+          onNodeClick={handleNodeClick}\n+          onLinkClick={handleLinkClick}\n+          backgroundColor={getBackgroundColor()}\n+          linkColor={get3DLinkColor}\n+          linkThreeObjectExtend={true}\n+          linkThreeObject={(link) => {\n+            if (!showLinkLabels) new THREE.Object3D();\n+            const sprite = new SpriteText(`${link.type}`);\n+            sprite.color = \"lightgrey\";\n+            sprite.textHeight = 1.5;\n+            return sprite;\n+          }}\n+          linkPositionUpdate={(sprite, { start, end }) => {\n+            if (!showLinkLabels) return;\n+\n+            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n+              acc[c as keyof Coords] =\n+                start[c as keyof Coords] +\n+                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n+              return acc;\n+            }, {} as Coords);\n+\n+            // Position sprite\n+            Object.assign(sprite.position, middlePos);\n+          }}\n+        />\n+      )}\n+      <Box\n+        sx={{\n+          position: \"absolute\",\n+          top: 10,\n+          left: 10,\n+          zIndex: 1400,\n+          display: \"flex\",\n+          flexDirection: \"column\",\n+          alignItems: \"flex-start\",\n+          gap: 1,\n+        }}\n+      >\n+        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n+        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Button\n+          variant=\"contained\"\n+          onClick={toggleApiDrawer(true)}\n+          startIcon={<SearchIcon />}\n+        >\n+          Ask Query (Local/Global Search)\n+        </Button>\n+        <Button\n+          variant=\"contained\"\n+          onClick={clearSearchResults}\n+          startIcon={<DeleteIcon />}\n+          color=\"warning\"\n+          disabled={apiSearchResults === null}\n+        >\n+          Clear Query Results\n+        </Button>\n+      </Box>\n+    </Box>\n+  );\n+};\n+\n+export default GraphViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727243604755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -880,9 +880,9 @@\n           alignItems: \"flex-start\",\n           gap: 1,\n         }}\n       >\n-        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n+        <Typography variant=\"body2\">{t('graphViewer.nodes')}: {nodeCount}</Typography>\n         <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n@@ -903,1819 +903,5 @@\n     </Box>\n   );\n };\n \n-export default GraphViewer;\n-import React, { useState, useCallback, useRef, useEffect } from \"react\";\n-import ForceGraph2D from \"react-force-graph-2d\";\n-import ForceGraph3D from \"react-force-graph-3d\";\n-import {\n-  CustomGraphData,\n-  CustomLink,\n-  CustomNode,\n-} from \"../models/custom-graph-data\";\n-import {\n-  Box,\n-  Button,\n-  Checkbox,\n-  FormControlLabel,\n-  FormGroup,\n-  IconButton,\n-  Switch,\n-  Tooltip,\n-  Typography,\n-  useTheme,\n-} from \"@mui/material\";\n-import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n-import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n-import SearchIcon from \"@mui/icons-material/Search\";\n-import DeleteIcon from \"@mui/icons-material/Delete\";\n-import Fuse from \"fuse.js\";\n-import {\n-  CSS2DRenderer,\n-  CSS2DObject,\n-} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n-import * as THREE from \"three\";\n-import { Renderer } from \"three\";\n-import SearchDrawer from \"./SearchDrawer\";\n-import DetailDrawer from \"./DetailDrawer\";\n-import { SearchResult } from \"../models/search-result\";\n-import agent from \"../api/agent\";\n-import APISearchDrawer from \"./APISearchDrawer\";\n-import SpriteText from \"three-spritetext\";\n-import { useTranslation } from 'react-i18next';\n-\n-type Coords = {\n-  x: number;\n-  y: number;\n-  z: number;\n-};\n-\n-interface GraphViewerProps {\n-  data: CustomGraphData;\n-  graphType: \"2d\" | \"3d\";\n-  isFullscreen: boolean;\n-  onToggleFullscreen: () => void;\n-  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n-  includeDocuments: boolean;\n-  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeTextUnits: boolean;\n-  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCommunities: boolean;\n-  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCovariates: boolean;\n-  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  hasDocuments: boolean;\n-  hasTextUnits: boolean;\n-  hasCommunities: boolean;\n-  hasCovariates: boolean;\n-}\n-\n-const NODE_R = 8;\n-\n-const GraphViewer: React.FC<GraphViewerProps> = ({\n-  data,\n-  graphType,\n-  isFullscreen,\n-  includeDocuments,\n-  onIncludeDocumentsChange,\n-  includeTextUnits,\n-  onIncludeTextUnitsChange,\n-  includeCommunities,\n-  onIncludeCommunitiesChange,\n-  includeCovariates,\n-  onIncludeCovariatesChange,\n-  onToggleFullscreen,\n-  onToggleGraphType,\n-  hasDocuments,\n-  hasTextUnits,\n-  hasCommunities,\n-  hasCovariates,\n-}) => {\n-  const { t } = useTranslation('graphViewer');\n-  const theme = useTheme();\n-  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n-    new Set()\n-  );\n-  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n-    new Set()\n-  );\n-  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n-  const [searchTerm, setSearchTerm] = useState(\"\");\n-  const [searchResults, setSearchResults] = useState<\n-    (CustomNode | CustomLink)[]\n-  >([]);\n-  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n-  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n-  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n-  const [selectedRelationship, setSelectedRelationship] =\n-    useState<CustomLink | null>(null);\n-  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n-  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n-    []\n-  );\n-  const [showLabels, setShowLabels] = useState(false);\n-  const [showLinkLabels, setShowLinkLabels] = useState(false);\n-  const [showHighlight, setShowHighlight] = useState(true);\n-  const graphRef = useRef<any>();\n-  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n-  const nodeCount = data.nodes.length;\n-  const linkCount = data.links.length;\n-\n-  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n-  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n-    null\n-  );\n-  const [serverUp, setServerUp] = useState<boolean>(false);\n-\n-  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n-\n-  const initialGraphData = useRef<CustomGraphData>(data);\n-\n-  useEffect(() => {\n-    setGraphData(data);\n-    initialGraphData.current = data;\n-  }, [data]);\n-\n-  useEffect(() => {\n-    checkServerStatus();\n-  }, []);\n-\n-  const toggleApiDrawer = (open: boolean) => () => {\n-    setApiDrawerOpen(open);\n-  };\n-\n-  const handleApiSearch = async (\n-    query: string,\n-    searchType: \"local\" | \"global\"\n-  ) => {\n-    try {\n-      const data: SearchResult =\n-        searchType === \"local\"\n-          ? await agent.Search.local(query)\n-          : await agent.Search.global(query);\n-\n-      setApiSearchResults(data);\n-      // Process the search result to update the graph data\n-      updateGraphData(data.context_data);\n-    } catch (err) {\n-      console.error(\"An error occurred during the API search.\", err);\n-    } finally {\n-    }\n-  };\n-\n-  const checkServerStatus = async () => {\n-    try {\n-      const response = await agent.Status.check();\n-      if (response.status === \"Server is up and running\") {\n-        setServerUp(true);\n-      } else {\n-        setServerUp(false);\n-      }\n-    } catch (error) {\n-      setServerUp(false);\n-    }\n-  };\n-\n-  const updateGraphData = (contextData: any) => {\n-    if (!contextData) return;\n-\n-    const newNodes: CustomNode[] = [];\n-    const newLinks: CustomLink[] = [];\n-\n-    const baseGraphData = initialGraphData.current;\n-\n-    // Assuming contextData has keys like entities, reports, relationships, sources\n-    Object.entries(contextData).forEach(([key, items]) => {\n-      if (Array.isArray(items)) {\n-        items.forEach((item) => {\n-          if (key === \"relationships\") {\n-            // Handle links\n-            const existingLink = baseGraphData.links.find(\n-              (link) =>\n-                link.human_readable_id?.toString() === item.id.toString()\n-            );\n-\n-            if (existingLink) {\n-              newLinks.push(existingLink);\n-            }\n-          } else if (key === \"entities\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                !node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"reports\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.uuid === item.id.toString()\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"sources\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.text?.toString() === item.text\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"covariates\" || key === \"claims\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          }\n-        });\n-      }\n-    });\n-\n-    // Update the graph data with the new nodes and links\n-    const updatedGraphData: CustomGraphData = {\n-      nodes: [...newNodes],\n-      links: [...newLinks],\n-    };\n-\n-    // Set the updated data to trigger re-render\n-    setGraphData(updatedGraphData);\n-  };\n-\n-  const fuse = new Fuse([...data.nodes, ...data.links], {\n-    keys: [\n-      \"uuid\",\n-      \"id\",\n-      \"name\",\n-      \"type\",\n-      \"description\",\n-      \"source\",\n-      \"target\",\n-      \"title\",\n-      \"summary\",\n-    ],\n-    threshold: 0.3,\n-  });\n-\n-  const handleNodeHover = useCallback((node: CustomNode | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (node) {\n-      newHighlightNodes.add(node);\n-      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-      node.links?.forEach((link) => newHighlightLinks.add(link));\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-    setHoverNode(node);\n-  }, []);\n-\n-  const handleLinkHover = useCallback((link: CustomLink | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (link) {\n-      newHighlightLinks.add(link);\n-      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n-      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-  }, []);\n-\n-  const paintRing = useCallback(\n-    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-      ctx.beginPath();\n-      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n-      if (highlightNodes.has(node)) {\n-        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n-        ctx.globalAlpha = 1; // full opacity\n-      } else {\n-        ctx.fillStyle = \"gray\";\n-        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n-      }\n-      ctx.fill();\n-      ctx.globalAlpha = 1; // reset alpha for other drawings\n-    },\n-    [hoverNode, highlightNodes]\n-  );\n-\n-  const handleSearch = () => {\n-    const results = fuse.search(searchTerm).map((result) => result.item);\n-    const nodeResults = results.filter((item) => \"neighbors\" in item);\n-    const linkResults = results.filter(\n-      (item) => \"source\" in item && \"target\" in item\n-    );\n-    setSearchResults([...nodeResults, ...linkResults]);\n-    setRightDrawerOpen(true);\n-  };\n-\n-  const toggleDrawer = (open: boolean) => () => {\n-    setRightDrawerOpen(open);\n-  };\n-\n-  const handleFocusButtonClick = (node: CustomNode) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    newHighlightNodes.add(node);\n-    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-    node.links?.forEach((link) => highlightLinks.add(link));\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHoverNode(node);\n-\n-    if (graphRef.current) {\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(node.x, node.y, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: node.x, y: node.y, z: 300 }, // new position\n-          { x: node.x, y: node.y, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused node\n-    setTimeout(() => {\n-      handleNodeHover(node);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleFocusLinkClick = (link: CustomLink) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    newHighlightLinks.add(link);\n-    let sourceNode: CustomNode | undefined;\n-    let targetNode: CustomNode | undefined;\n-\n-    if (typeof link.source !== \"string\") {\n-      newHighlightNodes.add(link.source);\n-      sourceNode = link.source;\n-    }\n-\n-    if (typeof link.target !== \"string\") {\n-      newHighlightNodes.add(link.target);\n-      targetNode = link.target;\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-\n-    if (\n-      graphRef.current &&\n-      sourceNode &&\n-      targetNode &&\n-      sourceNode.x &&\n-      targetNode.x &&\n-      sourceNode.y &&\n-      targetNode.y\n-    ) {\n-      const midX = (sourceNode.x + targetNode.x) / 2;\n-      const midY = (sourceNode.y + targetNode.y) / 2;\n-\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(midX, midY, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: midX, y: midY, z: 300 }, // new position\n-          { x: midX, y: midY, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused link\n-    setTimeout(() => {\n-      handleLinkHover(link);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleNodeClick = (node: CustomNode) => {\n-    setSelectedRelationship(null);\n-    setSelectedNode(node);\n-    setLinkedNodes(node.neighbors || []);\n-    setLinkedRelationships(node.links || []);\n-    setBottomDrawerOpen(true);\n-  };\n-\n-  const handleLinkClick = (link: CustomLink) => {\n-    setSelectedNode(null);\n-    setSelectedRelationship(link);\n-    const linkSource =\n-      typeof link.source === \"object\"\n-        ? (link.source as CustomNode).id\n-        : link.source;\n-    const linkTarget =\n-      typeof link.target === \"object\"\n-        ? (link.target as CustomNode).id\n-        : link.target;\n-    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n-    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n-    if (sourceNode && targetNode) {\n-      const linkedNodes = [sourceNode, targetNode];\n-      setLinkedNodes(linkedNodes);\n-      const linkedRelationships = [link];\n-      setLinkedRelationships(linkedRelationships);\n-      setBottomDrawerOpen(true);\n-    }\n-  };\n-\n-  const getBackgroundColor = () =>\n-    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n-\n-  const getLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n-\n-  const get3DLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-    if (!showLabels) return; // Only render the label if showLabels is true\n-\n-    const label = node.name || \"\";\n-    const fontSize = 4;\n-    const padding = 2;\n-    ctx.font = `${fontSize}px Sans-Serif`;\n-\n-    // Set the styles based on the theme mode\n-    const backgroundColor =\n-      theme.palette.mode === \"dark\"\n-        ? \"rgba(0, 0, 0, 0.6)\"\n-        : \"rgba(255, 255, 255, 0.6)\";\n-\n-    // Calculate label dimensions\n-    const textWidth = ctx.measureText(label).width;\n-    const boxWidth = textWidth + padding * 2;\n-    const boxHeight = fontSize + padding * 2;\n-\n-    if (node.x && node.y) {\n-      // Draw the background rectangle with rounded corners\n-      ctx.fillStyle = backgroundColor;\n-      ctx.beginPath();\n-      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n-      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2 + 5\n-      );\n-      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x + boxWidth / 2 - 5,\n-        node.y + boxHeight / 2\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2 - 5\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x - boxWidth / 2 + 5,\n-        node.y - boxHeight / 2\n-      );\n-      ctx.closePath();\n-      ctx.fill();\n-\n-      // Draw the text in the center of the node\n-      // ctx.fillStyle = textColor;\n-      ctx.fillStyle = node.color;\n-      ctx.textAlign = \"center\";\n-      ctx.textBaseline = \"middle\";\n-      ctx.fillText(label, node.x, node.y);\n-    }\n-  };\n-\n-  const nodeThreeObject = (node: CustomNode) => {\n-    if (!showLabels) {\n-      return new THREE.Object3D();\n-    }\n-\n-    try {\n-      const nodeEl = document.createElement(\"div\");\n-      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n-      nodeEl.style.color = node.color;\n-      nodeEl.style.padding = \"2px 4px\";\n-      nodeEl.style.borderRadius = \"4px\";\n-      nodeEl.style.fontSize = \"10px\";\n-      nodeEl.className = \"node-label\";\n-\n-      return new CSS2DObject(nodeEl);\n-    } catch (error) {\n-      console.error(\"Error creating 3D object:\", error);\n-      return new THREE.Object3D(); // Fallback in case of error\n-    }\n-  };\n-\n-  const localSearchEnabled = hasCovariates\n-    ? includeTextUnits && includeCommunities && includeCovariates\n-    : includeTextUnits && includeCommunities;\n-\n-  const clearSearchResults = () => {\n-    setGraphData(initialGraphData.current);\n-    setApiSearchResults(null);\n-  };\n-\n-  return (\n-    <Box\n-      sx={{\n-        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-        width: isFullscreen ? \"100vw\" : \"100%\",\n-        position: isFullscreen ? \"fixed\" : \"relative\",\n-        top: 0,\n-        left: 0,\n-        zIndex: isFullscreen ? 1300 : \"auto\",\n-        overflow: \"hidden\",\n-        margin: 0,\n-        padding: 0,\n-        backgroundColor: getBackgroundColor(),\n-      }}\n-    >\n-      <Box\n-        sx={{\n-          position: \"absolute\",\n-          top: 10,\n-          right: 10,\n-          zIndex: 1400,\n-          display: \"flex\",\n-          flexDirection: \"column\",\n-          gap: 2,\n-          alignItems: \"flex-end\",\n-        }}\n-      >\n-        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n-          <Button\n-            variant=\"contained\"\n-            onClick={toggleDrawer(true)}\n-            startIcon={<SearchIcon />}\n-          >\n-            {t('graphViewer.searchNodesLinks')}\n-          </Button>\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label=\"3D View\"\n-          /> */}\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label=\"Show Node Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label=\"Show Relationship Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label=\"Show Highlight\"\n-          /> */}\n-          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n-            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n-              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n-            </IconButton>\n-          </Tooltip>\n-        </Box>\n-\n-        <Box\n-          sx={{\n-            display: \"flex\",\n-            flexDirection: \"column\",\n-            gap: 1,\n-            alignItems: \"flex-start\",\n-          }}\n-        >\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label={t('graphViewer.showNodeLabels')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label={t('graphViewer.showLinkLabels')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label={t('graphViewer.showHighlight')}\n-          />\n-        </Box>\n-\n-        <FormGroup>\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeDocuments}\n-                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n-                disabled={!hasDocuments || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeDocuments')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeTextUnits}\n-                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n-                onChange={() => {\n-                  if (!includeTextUnits) {\n-                    onIncludeTextUnitsChange(true);\n-                  } else if (includeTextUnits && !includeCovariates) {\n-                    onIncludeTextUnitsChange(false);\n-                  } else {\n-                    onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n-                  }\n-                }}\n-                disabled={!hasTextUnits || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeTextUnits')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeCommunities}\n-                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n-                disabled={!hasCommunities || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeCommunities')}\n-          />\n-\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeCovariates}\n-                onChange={() => {\n-                  if (!includeCovariates) {\n-                    if (!includeTextUnits) {\n-                      onIncludeTextUnitsChange(true);\n-                    }\n-                    onIncludeCovariatesChange(true);\n-                  } else {\n-                    onIncludeCovariatesChange(false);\n-                  }\n-                }}\n-                disabled={!hasCovariates || apiSearchResults !== null}\n-              />\n-            }\n-            label=\"Include Covariates\"\n-          />\n-        </FormGroup>\n-      </Box>\n-\n-      <APISearchDrawer\n-        apiDrawerOpen={apiDrawerOpen}\n-        toggleDrawer={toggleApiDrawer}\n-        handleApiSearch={handleApiSearch}\n-        apiSearchResults={apiSearchResults}\n-        localSearchEnabled={localSearchEnabled}\n-        globalSearchEnabled={includeCommunities}\n-        hasCovariates={hasCovariates}\n-        serverUp={serverUp}\n-      />\n-\n-      <SearchDrawer\n-        searchTerm={searchTerm}\n-        setSearchTerm={setSearchTerm}\n-        handleSearch={handleSearch}\n-        searchResults={searchResults}\n-        rightDrawerOpen={rightDrawerOpen}\n-        toggleDrawer={toggleDrawer}\n-        handleFocusButtonClick={handleFocusButtonClick}\n-        handleNodeClick={handleNodeClick}\n-        handleFocusLinkClick={handleFocusLinkClick}\n-        handleLinkClick={handleLinkClick}\n-      />\n-\n-      <DetailDrawer\n-        bottomDrawerOpen={bottomDrawerOpen}\n-        setBottomDrawerOpen={setBottomDrawerOpen}\n-        selectedNode={selectedNode}\n-        selectedRelationship={selectedRelationship}\n-        linkedNodes={linkedNodes}\n-        linkedRelationships={linkedRelationships}\n-      />\n-\n-      {graphType === \"2d\" ? (\n-        <ForceGraph2D\n-          ref={graphRef}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          autoPauseRedraw={false}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          linkDirectionalParticleColor={\n-            showHighlight ? getlinkDirectionalParticleColor : undefined\n-          }\n-          nodeCanvasObjectMode={(node) =>\n-            showHighlight && highlightNodes.has(node)\n-              ? \"before\"\n-              : showLabels\n-              ? \"after\"\n-              : undefined\n-          }\n-          nodeCanvasObject={(node, ctx) => {\n-            if (showHighlight && highlightNodes.has(node)) {\n-              paintRing(node as CustomNode, ctx);\n-            }\n-            if (showLabels) {\n-              renderNodeLabel(node as CustomNode, ctx);\n-            }\n-          }}\n-          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n-          linkCanvasObject={(link, ctx) => {\n-            if (showLinkLabels) {\n-              const label = link.type || \"\";\n-              const fontSize = 4;\n-              ctx.font = `${fontSize}px Sans-Serif`;\n-              ctx.fillStyle =\n-                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n-              const source =\n-                typeof link.source !== \"string\"\n-                  ? (link.source as CustomNode)\n-                  : null;\n-              const target =\n-                typeof link.target !== \"string\"\n-                  ? (link.target as CustomNode)\n-                  : null;\n-\n-              if (\n-                source &&\n-                target &&\n-                source.x !== undefined &&\n-                target.x !== undefined &&\n-                source.y !== undefined &&\n-                target.y !== undefined\n-              ) {\n-                const textWidth = ctx.measureText(label).width;\n-                const posX = (source.x + target.x) / 2 - textWidth / 2;\n-                const posY = (source.y + target.y) / 2;\n-                ctx.fillText(label, posX, posY);\n-              }\n-            }\n-          }}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={getLinkColor}\n-        />\n-      ) : (\n-        <ForceGraph3D\n-          ref={graphRef}\n-          extraRenderers={extraRenderers}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          nodeThreeObject={nodeThreeObject}\n-          nodeThreeObjectExtend={true}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={get3DLinkColor}\n-          linkThreeObjectExtend={true}\n-          linkThreeObject={(link) => {\n-            if (!showLinkLabels) new THREE.Object3D();\n-            const sprite = new SpriteText(`${link.type}`);\n-            sprite.color = \"lightgrey\";\n-            sprite.textHeight = 1.5;\n-            return sprite;\n-          }}\n-          linkPositionUpdate={(sprite, { start, end }) => {\n-            if (!showLinkLabels) return;\n-\n-            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n-              acc[c as keyof Coords] =\n-                start[c as keyof Coords] +\n-                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n-              return acc;\n-            }, {} as Coords);\n-\n-            // Position sprite\n-            Object.assign(sprite.position, middlePos);\n-          }}\n-        />\n-      )}\n-      <Box\n-        sx={{\n-          position: \"absolute\",\n-          top: 10,\n-          left: 10,\n-          zIndex: 1400,\n-          display: \"flex\",\n-          flexDirection: \"column\",\n-          alignItems: \"flex-start\",\n-          gap: 1,\n-        }}\n-      >\n-        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n-        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n-        <Button\n-          variant=\"contained\"\n-          onClick={toggleApiDrawer(true)}\n-          startIcon={<SearchIcon />}\n-        >\n-          Ask Query (Local/Global Search)\n-        </Button>\n-        <Button\n-          variant=\"contained\"\n-          onClick={clearSearchResults}\n-          startIcon={<DeleteIcon />}\n-          color=\"warning\"\n-          disabled={apiSearchResults === null}\n-        >\n-          Clear Query Results\n-        </Button>\n-      </Box>\n-    </Box>\n-  );\n-};\n-\n-export default GraphViewer;\n-import React, { useState, useCallback, useRef, useEffect } from \"react\";\n-import ForceGraph2D from \"react-force-graph-2d\";\n-import ForceGraph3D from \"react-force-graph-3d\";\n-import {\n-  CustomGraphData,\n-  CustomLink,\n-  CustomNode,\n-} from \"../models/custom-graph-data\";\n-import {\n-  Box,\n-  Button,\n-  Checkbox,\n-  FormControlLabel,\n-  FormGroup,\n-  IconButton,\n-  Switch,\n-  Tooltip,\n-  Typography,\n-  useTheme,\n-} from \"@mui/material\";\n-import FullscreenIcon from \"@mui/icons-material/Fullscreen\";\n-import FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\n-import SearchIcon from \"@mui/icons-material/Search\";\n-import DeleteIcon from \"@mui/icons-material/Delete\";\n-import Fuse from \"fuse.js\";\n-import {\n-  CSS2DRenderer,\n-  CSS2DObject,\n-} from \"three/examples/jsm/renderers/CSS2DRenderer\";\n-import * as THREE from \"three\";\n-import { Renderer } from \"three\";\n-import SearchDrawer from \"./SearchDrawer\";\n-import DetailDrawer from \"./DetailDrawer\";\n-import { SearchResult } from \"../models/search-result\";\n-import agent from \"../api/agent\";\n-import APISearchDrawer from \"./APISearchDrawer\";\n-import SpriteText from \"three-spritetext\";\n-import { useTranslation } from 'react-i18next';\n-\n-type Coords = {\n-  x: number;\n-  y: number;\n-  z: number;\n-};\n-\n-interface GraphViewerProps {\n-  data: CustomGraphData;\n-  graphType: \"2d\" | \"3d\";\n-  isFullscreen: boolean;\n-  onToggleFullscreen: () => void;\n-  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n-  includeDocuments: boolean;\n-  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeTextUnits: boolean;\n-  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCommunities: boolean;\n-  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  includeCovariates: boolean;\n-  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n-  hasDocuments: boolean;\n-  hasTextUnits: boolean;\n-  hasCommunities: boolean;\n-  hasCovariates: boolean;\n-}\n-\n-const NODE_R = 8;\n-\n-const GraphViewer: React.FC<GraphViewerProps> = ({\n-  data,\n-  graphType,\n-  isFullscreen,\n-  includeDocuments,\n-  onIncludeDocumentsChange,\n-  includeTextUnits,\n-  onIncludeTextUnitsChange,\n-  includeCommunities,\n-  onIncludeCommunitiesChange,\n-  includeCovariates,\n-  onIncludeCovariatesChange,\n-  onToggleFullscreen,\n-  onToggleGraphType,\n-  hasDocuments,\n-  hasTextUnits,\n-  hasCommunities,\n-  hasCovariates,\n-}) => {\n-  const { t } = useTranslation('graphViewer');\n-  const theme = useTheme();\n-  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n-    new Set()\n-  );\n-  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n-    new Set()\n-  );\n-  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n-  const [searchTerm, setSearchTerm] = useState(\"\");\n-  const [searchResults, setSearchResults] = useState<\n-    (CustomNode | CustomLink)[]\n-  >([]);\n-  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n-  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n-  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n-  const [selectedRelationship, setSelectedRelationship] =\n-    useState<CustomLink | null>(null);\n-  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n-  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n-    []\n-  );\n-  const [showLabels, setShowLabels] = useState(false);\n-  const [showLinkLabels, setShowLinkLabels] = useState(false);\n-  const [showHighlight, setShowHighlight] = useState(true);\n-  const graphRef = useRef<any>();\n-  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n-  const nodeCount = data.nodes.length;\n-  const linkCount = data.links.length;\n-\n-  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n-  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n-    null\n-  );\n-  const [serverUp, setServerUp] = useState<boolean>(false);\n-\n-  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n-\n-  const initialGraphData = useRef<CustomGraphData>(data);\n-\n-  useEffect(() => {\n-    setGraphData(data);\n-    initialGraphData.current = data;\n-  }, [data]);\n-\n-  useEffect(() => {\n-    checkServerStatus();\n-  }, []);\n-\n-  const toggleApiDrawer = (open: boolean) => () => {\n-    setApiDrawerOpen(open);\n-  };\n-\n-  const handleApiSearch = async (\n-    query: string,\n-    searchType: \"local\" | \"global\"\n-  ) => {\n-    try {\n-      const data: SearchResult =\n-        searchType === \"local\"\n-          ? await agent.Search.local(query)\n-          : await agent.Search.global(query);\n-\n-      setApiSearchResults(data);\n-      // Process the search result to update the graph data\n-      updateGraphData(data.context_data);\n-    } catch (err) {\n-      console.error(\"An error occurred during the API search.\", err);\n-    } finally {\n-    }\n-  };\n-\n-  const checkServerStatus = async () => {\n-    try {\n-      const response = await agent.Status.check();\n-      if (response.status === \"Server is up and running\") {\n-        setServerUp(true);\n-      } else {\n-        setServerUp(false);\n-      }\n-    } catch (error) {\n-      setServerUp(false);\n-    }\n-  };\n-\n-  const updateGraphData = (contextData: any) => {\n-    if (!contextData) return;\n-\n-    const newNodes: CustomNode[] = [];\n-    const newLinks: CustomLink[] = [];\n-\n-    const baseGraphData = initialGraphData.current;\n-\n-    // Assuming contextData has keys like entities, reports, relationships, sources\n-    Object.entries(contextData).forEach(([key, items]) => {\n-      if (Array.isArray(items)) {\n-        items.forEach((item) => {\n-          if (key === \"relationships\") {\n-            // Handle links\n-            const existingLink = baseGraphData.links.find(\n-              (link) =>\n-                link.human_readable_id?.toString() === item.id.toString()\n-            );\n-\n-            if (existingLink) {\n-              newLinks.push(existingLink);\n-            }\n-          } else if (key === \"entities\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                !node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"reports\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.uuid === item.id.toString()\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"sources\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) => node.text?.toString() === item.text\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          } else if (key === \"covariates\" || key === \"claims\") {\n-            const existingNode = baseGraphData.nodes.find(\n-              (node) =>\n-                node.human_readable_id?.toString() === item.id.toString() &&\n-                node.covariate_type\n-            );\n-            if (existingNode) {\n-              newNodes.push(existingNode);\n-            }\n-          }\n-        });\n-      }\n-    });\n-\n-    // Update the graph data with the new nodes and links\n-    const updatedGraphData: CustomGraphData = {\n-      nodes: [...newNodes],\n-      links: [...newLinks],\n-    };\n-\n-    // Set the updated data to trigger re-render\n-    setGraphData(updatedGraphData);\n-  };\n-\n-  const fuse = new Fuse([...data.nodes, ...data.links], {\n-    keys: [\n-      \"uuid\",\n-      \"id\",\n-      \"name\",\n-      \"type\",\n-      \"description\",\n-      \"source\",\n-      \"target\",\n-      \"title\",\n-      \"summary\",\n-    ],\n-    threshold: 0.3,\n-  });\n-\n-  const handleNodeHover = useCallback((node: CustomNode | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (node) {\n-      newHighlightNodes.add(node);\n-      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-      node.links?.forEach((link) => newHighlightLinks.add(link));\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-    setHoverNode(node);\n-  }, []);\n-\n-  const handleLinkHover = useCallback((link: CustomLink | null) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    if (link) {\n-      newHighlightLinks.add(link);\n-      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n-      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-  }, []);\n-\n-  const paintRing = useCallback(\n-    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-      ctx.beginPath();\n-      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n-      if (highlightNodes.has(node)) {\n-        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n-        ctx.globalAlpha = 1; // full opacity\n-      } else {\n-        ctx.fillStyle = \"gray\";\n-        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n-      }\n-      ctx.fill();\n-      ctx.globalAlpha = 1; // reset alpha for other drawings\n-    },\n-    [hoverNode, highlightNodes]\n-  );\n-\n-  const handleSearch = () => {\n-    const results = fuse.search(searchTerm).map((result) => result.item);\n-    const nodeResults = results.filter((item) => \"neighbors\" in item);\n-    const linkResults = results.filter(\n-      (item) => \"source\" in item && \"target\" in item\n-    );\n-    setSearchResults([...nodeResults, ...linkResults]);\n-    setRightDrawerOpen(true);\n-  };\n-\n-  const toggleDrawer = (open: boolean) => () => {\n-    setRightDrawerOpen(open);\n-  };\n-\n-  const handleFocusButtonClick = (node: CustomNode) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    newHighlightNodes.add(node);\n-    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n-    node.links?.forEach((link) => highlightLinks.add(link));\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHoverNode(node);\n-\n-    if (graphRef.current) {\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(node.x, node.y, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: node.x, y: node.y, z: 300 }, // new position\n-          { x: node.x, y: node.y, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused node\n-    setTimeout(() => {\n-      handleNodeHover(node);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleFocusLinkClick = (link: CustomLink) => {\n-    const newHighlightNodes = new Set<CustomNode>();\n-    const newHighlightLinks = new Set<CustomLink>();\n-\n-    newHighlightLinks.add(link);\n-    let sourceNode: CustomNode | undefined;\n-    let targetNode: CustomNode | undefined;\n-\n-    if (typeof link.source !== \"string\") {\n-      newHighlightNodes.add(link.source);\n-      sourceNode = link.source;\n-    }\n-\n-    if (typeof link.target !== \"string\") {\n-      newHighlightNodes.add(link.target);\n-      targetNode = link.target;\n-    }\n-\n-    setHighlightNodes(newHighlightNodes);\n-    setHighlightLinks(newHighlightLinks);\n-\n-    if (\n-      graphRef.current &&\n-      sourceNode &&\n-      targetNode &&\n-      sourceNode.x &&\n-      targetNode.x &&\n-      sourceNode.y &&\n-      targetNode.y\n-    ) {\n-      const midX = (sourceNode.x + targetNode.x) / 2;\n-      const midY = (sourceNode.y + targetNode.y) / 2;\n-\n-      if (graphType === \"2d\") {\n-        graphRef.current.centerAt(midX, midY, 1000);\n-        graphRef.current.zoom(8, 1000);\n-      } else {\n-        graphRef.current.cameraPosition(\n-          { x: midX, y: midY, z: 300 }, // new position\n-          { x: midX, y: midY, z: 0 }, // lookAt\n-          3000 // ms transition duration\n-        );\n-      }\n-    }\n-\n-    // Simulate mouse hover on the focused link\n-    setTimeout(() => {\n-      handleLinkHover(link);\n-    }, 1000); // Adjust delay as needed\n-\n-    setRightDrawerOpen(false);\n-  };\n-\n-  const handleNodeClick = (node: CustomNode) => {\n-    setSelectedRelationship(null);\n-    setSelectedNode(node);\n-    setLinkedNodes(node.neighbors || []);\n-    setLinkedRelationships(node.links || []);\n-    setBottomDrawerOpen(true);\n-  };\n-\n-  const handleLinkClick = (link: CustomLink) => {\n-    setSelectedNode(null);\n-    setSelectedRelationship(link);\n-    const linkSource =\n-      typeof link.source === \"object\"\n-        ? (link.source as CustomNode).id\n-        : link.source;\n-    const linkTarget =\n-      typeof link.target === \"object\"\n-        ? (link.target as CustomNode).id\n-        : link.target;\n-    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n-    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n-    if (sourceNode && targetNode) {\n-      const linkedNodes = [sourceNode, targetNode];\n-      setLinkedNodes(linkedNodes);\n-      const linkedRelationships = [link];\n-      setLinkedRelationships(linkedRelationships);\n-      setBottomDrawerOpen(true);\n-    }\n-  };\n-\n-  const getBackgroundColor = () =>\n-    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n-\n-  const getLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n-\n-  const get3DLinkColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n-    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n-\n-  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n-    if (!showLabels) return; // Only render the label if showLabels is true\n-\n-    const label = node.name || \"\";\n-    const fontSize = 4;\n-    const padding = 2;\n-    ctx.font = `${fontSize}px Sans-Serif`;\n-\n-    // Set the styles based on the theme mode\n-    const backgroundColor =\n-      theme.palette.mode === \"dark\"\n-        ? \"rgba(0, 0, 0, 0.6)\"\n-        : \"rgba(255, 255, 255, 0.6)\";\n-\n-    // Calculate label dimensions\n-    const textWidth = ctx.measureText(label).width;\n-    const boxWidth = textWidth + padding * 2;\n-    const boxHeight = fontSize + padding * 2;\n-\n-    if (node.x && node.y) {\n-      // Draw the background rectangle with rounded corners\n-      ctx.fillStyle = backgroundColor;\n-      ctx.beginPath();\n-      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n-      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x + boxWidth / 2,\n-        node.y - boxHeight / 2 + 5\n-      );\n-      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n-      ctx.quadraticCurveTo(\n-        node.x + boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x + boxWidth / 2 - 5,\n-        node.y + boxHeight / 2\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2,\n-        node.x - boxWidth / 2,\n-        node.y + boxHeight / 2 - 5\n-      );\n-      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n-      ctx.quadraticCurveTo(\n-        node.x - boxWidth / 2,\n-        node.y - boxHeight / 2,\n-        node.x - boxWidth / 2 + 5,\n-        node.y - boxHeight / 2\n-      );\n-      ctx.closePath();\n-      ctx.fill();\n-\n-      // Draw the text in the center of the node\n-      // ctx.fillStyle = textColor;\n-      ctx.fillStyle = node.color;\n-      ctx.textAlign = \"center\";\n-      ctx.textBaseline = \"middle\";\n-      ctx.fillText(label, node.x, node.y);\n-    }\n-  };\n-\n-  const nodeThreeObject = (node: CustomNode) => {\n-    if (!showLabels) {\n-      return new THREE.Object3D();\n-    }\n-\n-    try {\n-      const nodeEl = document.createElement(\"div\");\n-      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n-      nodeEl.style.color = node.color;\n-      nodeEl.style.padding = \"2px 4px\";\n-      nodeEl.style.borderRadius = \"4px\";\n-      nodeEl.style.fontSize = \"10px\";\n-      nodeEl.className = \"node-label\";\n-\n-      return new CSS2DObject(nodeEl);\n-    } catch (error) {\n-      console.error(\"Error creating 3D object:\", error);\n-      return new THREE.Object3D(); // Fallback in case of error\n-    }\n-  };\n-\n-  const localSearchEnabled = hasCovariates\n-    ? includeTextUnits && includeCommunities && includeCovariates\n-    : includeTextUnits && includeCommunities;\n-\n-  const clearSearchResults = () => {\n-    setGraphData(initialGraphData.current);\n-    setApiSearchResults(null);\n-  };\n-\n-  return (\n-    <Box\n-      sx={{\n-        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n-        width: isFullscreen ? \"100vw\" : \"100%\",\n-        position: isFullscreen ? \"fixed\" : \"relative\",\n-        top: 0,\n-        left: 0,\n-        zIndex: isFullscreen ? 1300 : \"auto\",\n-        overflow: \"hidden\",\n-        margin: 0,\n-        padding: 0,\n-        backgroundColor: getBackgroundColor(),\n-      }}\n-    >\n-      <Box\n-        sx={{\n-          position: \"absolute\",\n-          top: 10,\n-          right: 10,\n-          zIndex: 1400,\n-          display: \"flex\",\n-          flexDirection: \"column\",\n-          gap: 2,\n-          alignItems: \"flex-end\",\n-        }}\n-      >\n-        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n-          <Button\n-            variant=\"contained\"\n-            onClick={toggleDrawer(true)}\n-            startIcon={<SearchIcon />}\n-          >\n-            {t('graphViewer.searchNodesLinks')}\n-          </Button>\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label=\"3D View\"\n-          /> */}\n-          {/* <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label=\"Show Node Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label=\"Show Relationship Labels\"\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label=\"Show Highlight\"\n-          /> */}\n-          <Tooltip title={isFullscreen ? t('graphViewer.exitFullScreen') : t('graphViewer.fullScreen')}>\n-            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n-              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n-            </IconButton>\n-          </Tooltip>\n-        </Box>\n-\n-        <Box\n-          sx={{\n-            display: \"flex\",\n-            flexDirection: \"column\",\n-            gap: 1,\n-            alignItems: \"flex-start\",\n-          }}\n-        >\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={graphType === \"3d\"}\n-                onChange={onToggleGraphType}\n-              />\n-            }\n-            label={t('graphViewer.view3D')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLabels}\n-                onChange={() => setShowLabels(!showLabels)}\n-              />\n-            }\n-            label={t('graphViewer.showNodeLabels')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showLinkLabels}\n-                onChange={() => setShowLinkLabels(!showLinkLabels)}\n-              />\n-            }\n-            label={t('graphViewer.showLinkLabels')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Switch\n-                checked={showHighlight}\n-                onChange={() => setShowHighlight(!showHighlight)}\n-              />\n-            }\n-            label={t('graphViewer.showHighlight')}\n-          />\n-        </Box>\n-\n-        <FormGroup>\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeDocuments}\n-                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n-                disabled={!hasDocuments || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeDocuments')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeTextUnits}\n-                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n-                onChange={() => {\n-                  if (!includeTextUnits) {\n-                    onIncludeTextUnitsChange(true);\n-                  } else if (includeTextUnits && !includeCovariates) {\n-                    onIncludeTextUnitsChange(false);\n-                  } else {\n-                    onIncludeTextUnitsChange(false);\n-                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n-                  }\n-                }}\n-                disabled={!hasTextUnits || apiSearchResults !== null}\n-              />\n-            }\n-            label={t('graphViewer.includeTextUnits')}\n-          />\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeCommunities}\n-                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n-                disabled={!hasCommunities || apiSearchResults !== null}\n-              />\n-            }\n-            label=\"Include Communities\"\n-          />\n-\n-          <FormControlLabel\n-            control={\n-              <Checkbox\n-                checked={includeCovariates}\n-                onChange={() => {\n-                  if (!includeCovariates) {\n-                    if (!includeTextUnits) {\n-                      onIncludeTextUnitsChange(true);\n-                    }\n-                    onIncludeCovariatesChange(true);\n-                  } else {\n-                    onIncludeCovariatesChange(false);\n-                  }\n-                }}\n-                disabled={!hasCovariates || apiSearchResults !== null}\n-              />\n-            }\n-            label=\"Include Covariates\"\n-          />\n-        </FormGroup>\n-      </Box>\n-\n-      <APISearchDrawer\n-        apiDrawerOpen={apiDrawerOpen}\n-        toggleDrawer={toggleApiDrawer}\n-        handleApiSearch={handleApiSearch}\n-        apiSearchResults={apiSearchResults}\n-        localSearchEnabled={localSearchEnabled}\n-        globalSearchEnabled={includeCommunities}\n-        hasCovariates={hasCovariates}\n-        serverUp={serverUp}\n-      />\n-\n-      <SearchDrawer\n-        searchTerm={searchTerm}\n-        setSearchTerm={setSearchTerm}\n-        handleSearch={handleSearch}\n-        searchResults={searchResults}\n-        rightDrawerOpen={rightDrawerOpen}\n-        toggleDrawer={toggleDrawer}\n-        handleFocusButtonClick={handleFocusButtonClick}\n-        handleNodeClick={handleNodeClick}\n-        handleFocusLinkClick={handleFocusLinkClick}\n-        handleLinkClick={handleLinkClick}\n-      />\n-\n-      <DetailDrawer\n-        bottomDrawerOpen={bottomDrawerOpen}\n-        setBottomDrawerOpen={setBottomDrawerOpen}\n-        selectedNode={selectedNode}\n-        selectedRelationship={selectedRelationship}\n-        linkedNodes={linkedNodes}\n-        linkedRelationships={linkedRelationships}\n-      />\n-\n-      {graphType === \"2d\" ? (\n-        <ForceGraph2D\n-          ref={graphRef}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          autoPauseRedraw={false}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          linkDirectionalParticleColor={\n-            showHighlight ? getlinkDirectionalParticleColor : undefined\n-          }\n-          nodeCanvasObjectMode={(node) =>\n-            showHighlight && highlightNodes.has(node)\n-              ? \"before\"\n-              : showLabels\n-              ? \"after\"\n-              : undefined\n-          }\n-          nodeCanvasObject={(node, ctx) => {\n-            if (showHighlight && highlightNodes.has(node)) {\n-              paintRing(node as CustomNode, ctx);\n-            }\n-            if (showLabels) {\n-              renderNodeLabel(node as CustomNode, ctx);\n-            }\n-          }}\n-          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n-          linkCanvasObject={(link, ctx) => {\n-            if (showLinkLabels) {\n-              const label = link.type || \"\";\n-              const fontSize = 4;\n-              ctx.font = `${fontSize}px Sans-Serif`;\n-              ctx.fillStyle =\n-                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n-              const source =\n-                typeof link.source !== \"string\"\n-                  ? (link.source as CustomNode)\n-                  : null;\n-              const target =\n-                typeof link.target !== \"string\"\n-                  ? (link.target as CustomNode)\n-                  : null;\n-\n-              if (\n-                source &&\n-                target &&\n-                source.x !== undefined &&\n-                target.x !== undefined &&\n-                source.y !== undefined &&\n-                target.y !== undefined\n-              ) {\n-                const textWidth = ctx.measureText(label).width;\n-                const posX = (source.x + target.x) / 2 - textWidth / 2;\n-                const posY = (source.y + target.y) / 2;\n-                ctx.fillText(label, posX, posY);\n-              }\n-            }\n-          }}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={getLinkColor}\n-        />\n-      ) : (\n-        <ForceGraph3D\n-          ref={graphRef}\n-          extraRenderers={extraRenderers}\n-          graphData={graphData}\n-          nodeAutoColorBy=\"type\"\n-          nodeRelSize={NODE_R}\n-          linkWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 5 : 1\n-          }\n-          linkDirectionalParticles={showHighlight ? 4 : 0}\n-          linkDirectionalParticleWidth={(link) =>\n-            showHighlight && highlightLinks.has(link) ? 4 : 0\n-          }\n-          nodeThreeObject={nodeThreeObject}\n-          nodeThreeObjectExtend={true}\n-          onNodeHover={showHighlight ? handleNodeHover : undefined}\n-          onLinkHover={showHighlight ? handleLinkHover : undefined}\n-          onNodeClick={handleNodeClick}\n-          onLinkClick={handleLinkClick}\n-          backgroundColor={getBackgroundColor()}\n-          linkColor={get3DLinkColor}\n-          linkThreeObjectExtend={true}\n-          linkThreeObject={(link) => {\n-            if (!showLinkLabels) new THREE.Object3D();\n-            const sprite = new SpriteText(`${link.type}`);\n-            sprite.color = \"lightgrey\";\n-            sprite.textHeight = 1.5;\n-            return sprite;\n-          }}\n-          linkPositionUpdate={(sprite, { start, end }) => {\n-            if (!showLinkLabels) return;\n-\n-            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n-              acc[c as keyof Coords] =\n-                start[c as keyof Coords] +\n-                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n-              return acc;\n-            }, {} as Coords);\n-\n-            // Position sprite\n-            Object.assign(sprite.position, middlePos);\n-          }}\n-        />\n-      )}\n-      <Box\n-        sx={{\n-          position: \"absolute\",\n-          top: 10,\n-          left: 10,\n-          zIndex: 1400,\n-          display: \"flex\",\n-          flexDirection: \"column\",\n-          alignItems: \"flex-start\",\n-          gap: 1,\n-        }}\n-      >\n-        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n-        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n-        <Button\n-          variant=\"contained\"\n-          onClick={toggleApiDrawer(true)}\n-          startIcon={<SearchIcon />}\n-        >\n-          Ask Query (Local/Global Search)\n-        </Button>\n-        <Button\n-          variant=\"contained\"\n-          onClick={clearSearchResults}\n-          startIcon={<DeleteIcon />}\n-          color=\"warning\"\n-          disabled={apiSearchResults === null}\n-        >\n-          Clear Query Results\n-        </Button>\n-      </Box>\n-    </Box>\n-  );\n-};\n-\n export default GraphViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727243615071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -881,9 +881,9 @@\n           gap: 1,\n         }}\n       >\n         <Typography variant=\"body2\">{t('graphViewer.nodes')}: {nodeCount}</Typography>\n-        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n+        <Typography variant=\"body2\">{t('graphViewer.relationships')}: {linkCount}</Typography>\n         <Button\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n"
                },
                {
                    "date": 1727243631156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -887,9 +887,9 @@\n           variant=\"contained\"\n           onClick={toggleApiDrawer(true)}\n           startIcon={<SearchIcon />}\n         >\n-          Ask Query (Local/Global Search)\n+          {t('graphViewer.askQuery')}\n         </Button>\n         <Button\n           variant=\"contained\"\n           onClick={clearSearchResults}\n"
                },
                {
                    "date": 1727243646170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -896,9 +896,9 @@\n           startIcon={<DeleteIcon />}\n           color=\"warning\"\n           disabled={apiSearchResults === null}\n         >\n-          Clear Query Results\n+          {t('graphViewer.clearQueryResults')}\n         </Button>\n       </Box>\n     </Box>\n   );\n"
                }
            ],
            "date": 1727241223449,
            "name": "Commit-0",
            "content": "import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport ForceGraph3D from \"react-force-graph-3d\";\nimport {\n  CustomGraphData,\n  CustomLink,\n  CustomNode,\n} from \"../models/custom-graph-data\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Switch,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport FullscreenIcon from \"@mui/icons-material/Fullscreen\";\nimport FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Fuse from \"fuse.js\";\nimport {\n  CSS2DRenderer,\n  CSS2DObject,\n} from \"three/examples/jsm/renderers/CSS2DRenderer\";\nimport * as THREE from \"three\";\nimport { Renderer } from \"three\";\nimport SearchDrawer from \"./SearchDrawer\";\nimport DetailDrawer from \"./DetailDrawer\";\nimport { SearchResult } from \"../models/search-result\";\nimport agent from \"../api/agent\";\nimport APISearchDrawer from \"./APISearchDrawer\";\nimport SpriteText from \"three-spritetext\";\n\ntype Coords = {\n  x: number;\n  y: number;\n  z: number;\n};\n\ninterface GraphViewerProps {\n  data: CustomGraphData;\n  graphType: \"2d\" | \"3d\";\n  isFullscreen: boolean;\n  onToggleFullscreen: () => void;\n  onToggleGraphType: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  includeDocuments: boolean;\n  onIncludeDocumentsChange: React.Dispatch<React.SetStateAction<boolean>>;\n  includeTextUnits: boolean;\n  onIncludeTextUnitsChange: React.Dispatch<React.SetStateAction<boolean>>;\n  includeCommunities: boolean;\n  onIncludeCommunitiesChange: React.Dispatch<React.SetStateAction<boolean>>;\n  includeCovariates: boolean;\n  onIncludeCovariatesChange: React.Dispatch<React.SetStateAction<boolean>>;\n  hasDocuments: boolean;\n  hasTextUnits: boolean;\n  hasCommunities: boolean;\n  hasCovariates: boolean;\n}\n\nconst NODE_R = 8;\n\nconst GraphViewer: React.FC<GraphViewerProps> = ({\n  data,\n  graphType,\n  isFullscreen,\n  includeDocuments,\n  onIncludeDocumentsChange,\n  includeTextUnits,\n  onIncludeTextUnitsChange,\n  includeCommunities,\n  onIncludeCommunitiesChange,\n  includeCovariates,\n  onIncludeCovariatesChange,\n  onToggleFullscreen,\n  onToggleGraphType,\n  hasDocuments,\n  hasTextUnits,\n  hasCommunities,\n  hasCovariates,\n}) => {\n  const theme = useTheme();\n  const [highlightNodes, setHighlightNodes] = useState<Set<CustomNode>>(\n    new Set()\n  );\n  const [highlightLinks, setHighlightLinks] = useState<Set<CustomLink>>(\n    new Set()\n  );\n  const [hoverNode, setHoverNode] = useState<CustomNode | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<\n    (CustomNode | CustomLink)[]\n  >([]);\n  const [rightDrawerOpen, setRightDrawerOpen] = useState(false);\n  const [bottomDrawerOpen, setBottomDrawerOpen] = useState(false);\n  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n  const [selectedRelationship, setSelectedRelationship] =\n    useState<CustomLink | null>(null);\n  const [linkedNodes, setLinkedNodes] = useState<CustomNode[]>([]);\n  const [linkedRelationships, setLinkedRelationships] = useState<CustomLink[]>(\n    []\n  );\n  const [showLabels, setShowLabels] = useState(false);\n  const [showLinkLabels, setShowLinkLabels] = useState(false);\n  const [showHighlight, setShowHighlight] = useState(true);\n  const graphRef = useRef<any>();\n  const extraRenderers = [new CSS2DRenderer() as any as Renderer];\n  const nodeCount = data.nodes.length;\n  const linkCount = data.links.length;\n\n  const [apiDrawerOpen, setApiDrawerOpen] = useState(false);\n  const [apiSearchResults, setApiSearchResults] = useState<SearchResult | null>(\n    null\n  );\n  const [serverUp, setServerUp] = useState<boolean>(false);\n\n  const [graphData, setGraphData] = useState<CustomGraphData>(data);\n\n  const initialGraphData = useRef<CustomGraphData>(data);\n\n  useEffect(() => {\n    setGraphData(data);\n    initialGraphData.current = data;\n  }, [data]);\n\n  useEffect(() => {\n    checkServerStatus();\n  }, []);\n\n  const toggleApiDrawer = (open: boolean) => () => {\n    setApiDrawerOpen(open);\n  };\n\n  const handleApiSearch = async (\n    query: string,\n    searchType: \"local\" | \"global\"\n  ) => {\n    try {\n      const data: SearchResult =\n        searchType === \"local\"\n          ? await agent.Search.local(query)\n          : await agent.Search.global(query);\n\n      setApiSearchResults(data);\n      // Process the search result to update the graph data\n      updateGraphData(data.context_data);\n    } catch (err) {\n      console.error(\"An error occurred during the API search.\", err);\n    } finally {\n    }\n  };\n\n  const checkServerStatus = async () => {\n    try {\n      const response = await agent.Status.check();\n      if (response.status === \"Server is up and running\") {\n        setServerUp(true);\n      } else {\n        setServerUp(false);\n      }\n    } catch (error) {\n      setServerUp(false);\n    }\n  };\n\n  const updateGraphData = (contextData: any) => {\n    if (!contextData) return;\n\n    const newNodes: CustomNode[] = [];\n    const newLinks: CustomLink[] = [];\n\n    const baseGraphData = initialGraphData.current;\n\n    // Assuming contextData has keys like entities, reports, relationships, sources\n    Object.entries(contextData).forEach(([key, items]) => {\n      if (Array.isArray(items)) {\n        items.forEach((item) => {\n          if (key === \"relationships\") {\n            // Handle links\n            const existingLink = baseGraphData.links.find(\n              (link) =>\n                link.human_readable_id?.toString() === item.id.toString()\n            );\n\n            if (existingLink) {\n              newLinks.push(existingLink);\n            }\n          } else if (key === \"entities\") {\n            const existingNode = baseGraphData.nodes.find(\n              (node) =>\n                node.human_readable_id?.toString() === item.id.toString() &&\n                !node.covariate_type\n            );\n            if (existingNode) {\n              newNodes.push(existingNode);\n            }\n          } else if (key === \"reports\") {\n            const existingNode = baseGraphData.nodes.find(\n              (node) => node.uuid === item.id.toString()\n            );\n            if (existingNode) {\n              newNodes.push(existingNode);\n            }\n          } else if (key === \"sources\") {\n            const existingNode = baseGraphData.nodes.find(\n              (node) => node.text?.toString() === item.text\n            );\n            if (existingNode) {\n              newNodes.push(existingNode);\n            }\n          } else if (key === \"covariates\" || key === \"claims\") {\n            const existingNode = baseGraphData.nodes.find(\n              (node) =>\n                node.human_readable_id?.toString() === item.id.toString() &&\n                node.covariate_type\n            );\n            if (existingNode) {\n              newNodes.push(existingNode);\n            }\n          }\n        });\n      }\n    });\n\n    // Update the graph data with the new nodes and links\n    const updatedGraphData: CustomGraphData = {\n      nodes: [...newNodes],\n      links: [...newLinks],\n    };\n\n    // Set the updated data to trigger re-render\n    setGraphData(updatedGraphData);\n  };\n\n  const fuse = new Fuse([...data.nodes, ...data.links], {\n    keys: [\n      \"uuid\",\n      \"id\",\n      \"name\",\n      \"type\",\n      \"description\",\n      \"source\",\n      \"target\",\n      \"title\",\n      \"summary\",\n    ],\n    threshold: 0.3,\n  });\n\n  const handleNodeHover = useCallback((node: CustomNode | null) => {\n    const newHighlightNodes = new Set<CustomNode>();\n    const newHighlightLinks = new Set<CustomLink>();\n\n    if (node) {\n      newHighlightNodes.add(node);\n      node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n      node.links?.forEach((link) => newHighlightLinks.add(link));\n    }\n\n    setHighlightNodes(newHighlightNodes);\n    setHighlightLinks(newHighlightLinks);\n    setHoverNode(node);\n  }, []);\n\n  const handleLinkHover = useCallback((link: CustomLink | null) => {\n    const newHighlightNodes = new Set<CustomNode>();\n    const newHighlightLinks = new Set<CustomLink>();\n\n    if (link) {\n      newHighlightLinks.add(link);\n      if (typeof link.source !== \"string\") newHighlightNodes.add(link.source);\n      if (typeof link.target !== \"string\") newHighlightNodes.add(link.target);\n    }\n\n    setHighlightNodes(newHighlightNodes);\n    setHighlightLinks(newHighlightLinks);\n  }, []);\n\n  const paintRing = useCallback(\n    (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n      ctx.beginPath();\n      ctx.arc(node.x!, node.y!, NODE_R * 1.4, 0, 2 * Math.PI, false);\n      if (highlightNodes.has(node)) {\n        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n        ctx.globalAlpha = 1; // full opacity\n      } else {\n        ctx.fillStyle = \"gray\";\n        ctx.globalAlpha = 0.3; // reduced opacity for non-highlighted nodes\n      }\n      ctx.fill();\n      ctx.globalAlpha = 1; // reset alpha for other drawings\n    },\n    [hoverNode, highlightNodes]\n  );\n\n  const handleSearch = () => {\n    const results = fuse.search(searchTerm).map((result) => result.item);\n    const nodeResults = results.filter((item) => \"neighbors\" in item);\n    const linkResults = results.filter(\n      (item) => \"source\" in item && \"target\" in item\n    );\n    setSearchResults([...nodeResults, ...linkResults]);\n    setRightDrawerOpen(true);\n  };\n\n  const toggleDrawer = (open: boolean) => () => {\n    setRightDrawerOpen(open);\n  };\n\n  const handleFocusButtonClick = (node: CustomNode) => {\n    const newHighlightNodes = new Set<CustomNode>();\n    newHighlightNodes.add(node);\n    node.neighbors?.forEach((neighbor) => newHighlightNodes.add(neighbor));\n    node.links?.forEach((link) => highlightLinks.add(link));\n\n    setHighlightNodes(newHighlightNodes);\n    setHoverNode(node);\n\n    if (graphRef.current) {\n      if (graphType === \"2d\") {\n        graphRef.current.centerAt(node.x, node.y, 1000);\n        graphRef.current.zoom(8, 1000);\n      } else {\n        graphRef.current.cameraPosition(\n          { x: node.x, y: node.y, z: 300 }, // new position\n          { x: node.x, y: node.y, z: 0 }, // lookAt\n          3000 // ms transition duration\n        );\n      }\n    }\n\n    // Simulate mouse hover on the focused node\n    setTimeout(() => {\n      handleNodeHover(node);\n    }, 1000); // Adjust delay as needed\n\n    setRightDrawerOpen(false);\n  };\n\n  const handleFocusLinkClick = (link: CustomLink) => {\n    const newHighlightNodes = new Set<CustomNode>();\n    const newHighlightLinks = new Set<CustomLink>();\n\n    newHighlightLinks.add(link);\n    let sourceNode: CustomNode | undefined;\n    let targetNode: CustomNode | undefined;\n\n    if (typeof link.source !== \"string\") {\n      newHighlightNodes.add(link.source);\n      sourceNode = link.source;\n    }\n\n    if (typeof link.target !== \"string\") {\n      newHighlightNodes.add(link.target);\n      targetNode = link.target;\n    }\n\n    setHighlightNodes(newHighlightNodes);\n    setHighlightLinks(newHighlightLinks);\n\n    if (\n      graphRef.current &&\n      sourceNode &&\n      targetNode &&\n      sourceNode.x &&\n      targetNode.x &&\n      sourceNode.y &&\n      targetNode.y\n    ) {\n      const midX = (sourceNode.x + targetNode.x) / 2;\n      const midY = (sourceNode.y + targetNode.y) / 2;\n\n      if (graphType === \"2d\") {\n        graphRef.current.centerAt(midX, midY, 1000);\n        graphRef.current.zoom(8, 1000);\n      } else {\n        graphRef.current.cameraPosition(\n          { x: midX, y: midY, z: 300 }, // new position\n          { x: midX, y: midY, z: 0 }, // lookAt\n          3000 // ms transition duration\n        );\n      }\n    }\n\n    // Simulate mouse hover on the focused link\n    setTimeout(() => {\n      handleLinkHover(link);\n    }, 1000); // Adjust delay as needed\n\n    setRightDrawerOpen(false);\n  };\n\n  const handleNodeClick = (node: CustomNode) => {\n    setSelectedRelationship(null);\n    setSelectedNode(node);\n    setLinkedNodes(node.neighbors || []);\n    setLinkedRelationships(node.links || []);\n    setBottomDrawerOpen(true);\n  };\n\n  const handleLinkClick = (link: CustomLink) => {\n    setSelectedNode(null);\n    setSelectedRelationship(link);\n    const linkSource =\n      typeof link.source === \"object\"\n        ? (link.source as CustomNode).id\n        : link.source;\n    const linkTarget =\n      typeof link.target === \"object\"\n        ? (link.target as CustomNode).id\n        : link.target;\n    const sourceNode = data.nodes.find((node) => node.id === linkSource);\n    const targetNode = data.nodes.find((node) => node.id === linkTarget);\n    if (sourceNode && targetNode) {\n      const linkedNodes = [sourceNode, targetNode];\n      setLinkedNodes(linkedNodes);\n      const linkedRelationships = [link];\n      setLinkedRelationships(linkedRelationships);\n      setBottomDrawerOpen(true);\n    }\n  };\n\n  const getBackgroundColor = () =>\n    theme.palette.mode === \"dark\" ? \"#000000\" : \"#FFFFFF\";\n\n  const getLinkColor = (link: CustomLink) =>\n    theme.palette.mode === \"dark\" ? \"gray\" : \"lightgray\";\n\n  const get3DLinkColor = (link: CustomLink) =>\n    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n\n  const getlinkDirectionalParticleColor = (link: CustomLink) =>\n    theme.palette.mode === \"dark\" ? \"lightgray\" : \"gray\";\n\n  const renderNodeLabel = (node: CustomNode, ctx: CanvasRenderingContext2D) => {\n    if (!showLabels) return; // Only render the label if showLabels is true\n\n    const label = node.name || \"\";\n    const fontSize = 4;\n    const padding = 2;\n    ctx.font = `${fontSize}px Sans-Serif`;\n\n    // Set the styles based on the theme mode\n    const backgroundColor =\n      theme.palette.mode === \"dark\"\n        ? \"rgba(0, 0, 0, 0.6)\"\n        : \"rgba(255, 255, 255, 0.6)\";\n\n    // Calculate label dimensions\n    const textWidth = ctx.measureText(label).width;\n    const boxWidth = textWidth + padding * 2;\n    const boxHeight = fontSize + padding * 2;\n\n    if (node.x && node.y) {\n      // Draw the background rectangle with rounded corners\n      ctx.fillStyle = backgroundColor;\n      ctx.beginPath();\n      ctx.moveTo(node.x - boxWidth / 2 + 5, node.y - boxHeight / 2);\n      ctx.lineTo(node.x + boxWidth / 2 - 5, node.y - boxHeight / 2);\n      ctx.quadraticCurveTo(\n        node.x + boxWidth / 2,\n        node.y - boxHeight / 2,\n        node.x + boxWidth / 2,\n        node.y - boxHeight / 2 + 5\n      );\n      ctx.lineTo(node.x + boxWidth / 2, node.y + boxHeight / 2 - 5);\n      ctx.quadraticCurveTo(\n        node.x + boxWidth / 2,\n        node.y + boxHeight / 2,\n        node.x + boxWidth / 2 - 5,\n        node.y + boxHeight / 2\n      );\n      ctx.lineTo(node.x - boxWidth / 2 + 5, node.y + boxHeight / 2);\n      ctx.quadraticCurveTo(\n        node.x - boxWidth / 2,\n        node.y + boxHeight / 2,\n        node.x - boxWidth / 2,\n        node.y + boxHeight / 2 - 5\n      );\n      ctx.lineTo(node.x - boxWidth / 2, node.y - boxHeight / 2 + 5);\n      ctx.quadraticCurveTo(\n        node.x - boxWidth / 2,\n        node.y - boxHeight / 2,\n        node.x - boxWidth / 2 + 5,\n        node.y - boxHeight / 2\n      );\n      ctx.closePath();\n      ctx.fill();\n\n      // Draw the text in the center of the node\n      // ctx.fillStyle = textColor;\n      ctx.fillStyle = node.color;\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(label, node.x, node.y);\n    }\n  };\n\n  const nodeThreeObject = (node: CustomNode) => {\n    if (!showLabels) {\n      return new THREE.Object3D();\n    }\n\n    try {\n      const nodeEl = document.createElement(\"div\");\n      nodeEl.textContent = node.name || node.id; // Use either name or id for the label\n      nodeEl.style.color = node.color;\n      nodeEl.style.padding = \"2px 4px\";\n      nodeEl.style.borderRadius = \"4px\";\n      nodeEl.style.fontSize = \"10px\";\n      nodeEl.className = \"node-label\";\n\n      return new CSS2DObject(nodeEl);\n    } catch (error) {\n      console.error(\"Error creating 3D object:\", error);\n      return new THREE.Object3D(); // Fallback in case of error\n    }\n  };\n\n  const localSearchEnabled = hasCovariates\n    ? includeTextUnits && includeCommunities && includeCovariates\n    : includeTextUnits && includeCommunities;\n\n  const clearSearchResults = () => {\n    setGraphData(initialGraphData.current);\n    setApiSearchResults(null);\n  };\n\n  return (\n    <Box\n      sx={{\n        height: isFullscreen ? \"100vh\" : \"calc(100vh - 64px)\",\n        width: isFullscreen ? \"100vw\" : \"100%\",\n        position: isFullscreen ? \"fixed\" : \"relative\",\n        top: 0,\n        left: 0,\n        zIndex: isFullscreen ? 1300 : \"auto\",\n        overflow: \"hidden\",\n        margin: 0,\n        padding: 0,\n        backgroundColor: getBackgroundColor(),\n      }}\n    >\n      <Box\n        sx={{\n          position: \"absolute\",\n          top: 10,\n          right: 10,\n          zIndex: 1400,\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 2,\n          alignItems: \"flex-end\",\n        }}\n      >\n        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            onClick={toggleDrawer(true)}\n            startIcon={<SearchIcon />}\n          >\n              {t('graphViewer.searchNodesLinks')}\n\n          </Button>\n          {/* <FormControlLabel\n            control={\n              <Switch\n                checked={graphType === \"3d\"}\n                onChange={onToggleGraphType}\n              />\n            }\n            label=\"3D View\"\n          /> */}\n          {/* <FormControlLabel\n            control={\n              <Switch\n                checked={showLabels}\n                onChange={() => setShowLabels(!showLabels)}\n              />\n            }\n            label=\"Show Node Labels\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showLinkLabels}\n                onChange={() => setShowLinkLabels(!showLinkLabels)}\n              />\n            }\n            label=\"Show Relationship Labels\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showHighlight}\n                onChange={() => setShowHighlight(!showHighlight)}\n              />\n            }\n            label=\"Show Highlight\"\n          /> */}\n          <Tooltip title={isFullscreen ? \"Exit Full Screen\" : \"Full Screen\"}>\n            <IconButton onClick={onToggleFullscreen} color=\"inherit\">\n              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n            </IconButton>\n          </Tooltip>\n        </Box>\n\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 1,\n            alignItems: \"flex-start\",\n          }}\n        >\n          <FormControlLabel\n            control={\n              <Switch\n                checked={graphType === \"3d\"}\n                onChange={onToggleGraphType}\n              />\n            }\n            label=\"3D View\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showLabels}\n                onChange={() => setShowLabels(!showLabels)}\n              />\n            }\n            label=\"Show Node Labels\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showLinkLabels}\n                onChange={() => setShowLinkLabels(!showLinkLabels)}\n              />\n            }\n            label=\"Show Link Labels\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showHighlight}\n                onChange={() => setShowHighlight(!showHighlight)}\n              />\n            }\n            label=\"Show Highlight\"\n          />\n        </Box>\n\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={includeDocuments}\n                onChange={() => onIncludeDocumentsChange(!includeDocuments)}\n                disabled={!hasDocuments || apiSearchResults !== null}\n              />\n            }\n            label=\"Include Documents\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={includeTextUnits}\n                // onChange={() => onIncludeTextUnitsChange(!includeTextUnits)}\n                onChange={() => {\n                  if (!includeTextUnits) {\n                    onIncludeTextUnitsChange(true);\n                  } else if (includeTextUnits && !includeCovariates) {\n                    onIncludeTextUnitsChange(false);\n                  } else {\n                    onIncludeTextUnitsChange(false);\n                    onIncludeCovariatesChange(false); // Uncheck Covariates when Text Units is unchecked\n                  }\n                }}\n                disabled={!hasTextUnits || apiSearchResults !== null}\n              />\n            }\n            label=\"Include Text Units\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={includeCommunities}\n                onChange={() => onIncludeCommunitiesChange(!includeCommunities)}\n                disabled={!hasCommunities || apiSearchResults !== null}\n              />\n            }\n            label=\"Include Communities\"\n          />\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={includeCovariates}\n                onChange={() => {\n                  if (!includeCovariates) {\n                    if (!includeTextUnits) {\n                      onIncludeTextUnitsChange(true);\n                    }\n                    onIncludeCovariatesChange(true);\n                  } else {\n                    onIncludeCovariatesChange(false);\n                  }\n                }}\n                disabled={!hasCovariates || apiSearchResults !== null}\n              />\n            }\n            label=\"Include Covariates\"\n          />\n        </FormGroup>\n      </Box>\n\n      <APISearchDrawer\n        apiDrawerOpen={apiDrawerOpen}\n        toggleDrawer={toggleApiDrawer}\n        handleApiSearch={handleApiSearch}\n        apiSearchResults={apiSearchResults}\n        localSearchEnabled={localSearchEnabled}\n        globalSearchEnabled={includeCommunities}\n        hasCovariates={hasCovariates}\n        serverUp={serverUp}\n      />\n\n      <SearchDrawer\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n        handleSearch={handleSearch}\n        searchResults={searchResults}\n        rightDrawerOpen={rightDrawerOpen}\n        toggleDrawer={toggleDrawer}\n        handleFocusButtonClick={handleFocusButtonClick}\n        handleNodeClick={handleNodeClick}\n        handleFocusLinkClick={handleFocusLinkClick}\n        handleLinkClick={handleLinkClick}\n      />\n\n      <DetailDrawer\n        bottomDrawerOpen={bottomDrawerOpen}\n        setBottomDrawerOpen={setBottomDrawerOpen}\n        selectedNode={selectedNode}\n        selectedRelationship={selectedRelationship}\n        linkedNodes={linkedNodes}\n        linkedRelationships={linkedRelationships}\n      />\n\n      {graphType === \"2d\" ? (\n        <ForceGraph2D\n          ref={graphRef}\n          graphData={graphData}\n          nodeAutoColorBy=\"type\"\n          nodeRelSize={NODE_R}\n          autoPauseRedraw={false}\n          linkWidth={(link) =>\n            showHighlight && highlightLinks.has(link) ? 5 : 1\n          }\n          linkDirectionalParticles={showHighlight ? 4 : 0}\n          linkDirectionalParticleWidth={(link) =>\n            showHighlight && highlightLinks.has(link) ? 4 : 0\n          }\n          linkDirectionalParticleColor={\n            showHighlight ? getlinkDirectionalParticleColor : undefined\n          }\n          nodeCanvasObjectMode={(node) =>\n            showHighlight && highlightNodes.has(node)\n              ? \"before\"\n              : showLabels\n              ? \"after\"\n              : undefined\n          }\n          nodeCanvasObject={(node, ctx) => {\n            if (showHighlight && highlightNodes.has(node)) {\n              paintRing(node as CustomNode, ctx);\n            }\n            if (showLabels) {\n              renderNodeLabel(node as CustomNode, ctx);\n            }\n          }}\n          linkCanvasObjectMode={() => (showLinkLabels ? \"after\" : undefined)}\n          linkCanvasObject={(link, ctx) => {\n            if (showLinkLabels) {\n              const label = link.type || \"\";\n              const fontSize = 4;\n              ctx.font = `${fontSize}px Sans-Serif`;\n              ctx.fillStyle =\n                theme.palette.mode === \"dark\" ? \"lightgray\" : \"darkgray\";\n              const source =\n                typeof link.source !== \"string\"\n                  ? (link.source as CustomNode)\n                  : null;\n              const target =\n                typeof link.target !== \"string\"\n                  ? (link.target as CustomNode)\n                  : null;\n\n              if (\n                source &&\n                target &&\n                source.x !== undefined &&\n                target.x !== undefined &&\n                source.y !== undefined &&\n                target.y !== undefined\n              ) {\n                const textWidth = ctx.measureText(label).width;\n                const posX = (source.x + target.x) / 2 - textWidth / 2;\n                const posY = (source.y + target.y) / 2;\n                ctx.fillText(label, posX, posY);\n              }\n            }\n          }}\n          onNodeHover={showHighlight ? handleNodeHover : undefined}\n          onLinkHover={showHighlight ? handleLinkHover : undefined}\n          onNodeClick={handleNodeClick}\n          onLinkClick={handleLinkClick}\n          backgroundColor={getBackgroundColor()}\n          linkColor={getLinkColor}\n        />\n      ) : (\n        <ForceGraph3D\n          ref={graphRef}\n          extraRenderers={extraRenderers}\n          graphData={graphData}\n          nodeAutoColorBy=\"type\"\n          nodeRelSize={NODE_R}\n          linkWidth={(link) =>\n            showHighlight && highlightLinks.has(link) ? 5 : 1\n          }\n          linkDirectionalParticles={showHighlight ? 4 : 0}\n          linkDirectionalParticleWidth={(link) =>\n            showHighlight && highlightLinks.has(link) ? 4 : 0\n          }\n          nodeThreeObject={nodeThreeObject}\n          nodeThreeObjectExtend={true}\n          onNodeHover={showHighlight ? handleNodeHover : undefined}\n          onLinkHover={showHighlight ? handleLinkHover : undefined}\n          onNodeClick={handleNodeClick}\n          onLinkClick={handleLinkClick}\n          backgroundColor={getBackgroundColor()}\n          linkColor={get3DLinkColor}\n          linkThreeObjectExtend={true}\n          linkThreeObject={(link) => {\n            if (!showLinkLabels) new THREE.Object3D();\n            const sprite = new SpriteText(`${link.type}`);\n            sprite.color = \"lightgrey\";\n            sprite.textHeight = 1.5;\n            return sprite;\n          }}\n          linkPositionUpdate={(sprite, { start, end }) => {\n            if (!showLinkLabels) return;\n\n            const middlePos = [\"x\", \"y\", \"z\"].reduce((acc, c) => {\n              acc[c as keyof Coords] =\n                start[c as keyof Coords] +\n                (end[c as keyof Coords] - start[c as keyof Coords]) / 2;\n              return acc;\n            }, {} as Coords);\n\n            // Position sprite\n            Object.assign(sprite.position, middlePos);\n          }}\n        />\n      )}\n      <Box\n        sx={{\n          position: \"absolute\",\n          top: 10,\n          left: 10,\n          zIndex: 1400,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n          gap: 1,\n        }}\n      >\n        <Typography variant=\"body2\">Nodes: {nodeCount}</Typography>\n        <Typography variant=\"body2\">Relationships: {linkCount}</Typography>\n        <Button\n          variant=\"contained\"\n          onClick={toggleApiDrawer(true)}\n          startIcon={<SearchIcon />}\n        >\n          Ask Query (Local/Global Search)\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={clearSearchResults}\n          startIcon={<DeleteIcon />}\n          color=\"warning\"\n          disabled={apiSearchResults === null}\n        >\n          Clear Query Results\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default GraphViewer;\n"
        }
    ]
}